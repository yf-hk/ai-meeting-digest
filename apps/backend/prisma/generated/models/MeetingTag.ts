
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `MeetingTag` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MeetingTag
 * 
 */
export type MeetingTagModel = runtime.Types.Result.DefaultSelection<Prisma.$MeetingTagPayload>

export type AggregateMeetingTag = {
  _count: MeetingTagCountAggregateOutputType | null
  _min: MeetingTagMinAggregateOutputType | null
  _max: MeetingTagMaxAggregateOutputType | null
}

export type MeetingTagMinAggregateOutputType = {
  id: string | null
  meetingId: string | null
  tagId: string | null
}

export type MeetingTagMaxAggregateOutputType = {
  id: string | null
  meetingId: string | null
  tagId: string | null
}

export type MeetingTagCountAggregateOutputType = {
  id: number
  meetingId: number
  tagId: number
  _all: number
}


export type MeetingTagMinAggregateInputType = {
  id?: true
  meetingId?: true
  tagId?: true
}

export type MeetingTagMaxAggregateInputType = {
  id?: true
  meetingId?: true
  tagId?: true
}

export type MeetingTagCountAggregateInputType = {
  id?: true
  meetingId?: true
  tagId?: true
  _all?: true
}

export type MeetingTagAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MeetingTag to aggregate.
   */
  where?: Prisma.MeetingTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MeetingTags to fetch.
   */
  orderBy?: Prisma.MeetingTagOrderByWithRelationInput | Prisma.MeetingTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MeetingTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MeetingTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MeetingTags.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MeetingTags
  **/
  _count?: true | MeetingTagCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MeetingTagMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MeetingTagMaxAggregateInputType
}

export type GetMeetingTagAggregateType<T extends MeetingTagAggregateArgs> = {
      [P in keyof T & keyof AggregateMeetingTag]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMeetingTag[P]>
    : Prisma.GetScalarType<T[P], AggregateMeetingTag[P]>
}




export type MeetingTagGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MeetingTagWhereInput
  orderBy?: Prisma.MeetingTagOrderByWithAggregationInput | Prisma.MeetingTagOrderByWithAggregationInput[]
  by: Prisma.MeetingTagScalarFieldEnum[] | Prisma.MeetingTagScalarFieldEnum
  having?: Prisma.MeetingTagScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MeetingTagCountAggregateInputType | true
  _min?: MeetingTagMinAggregateInputType
  _max?: MeetingTagMaxAggregateInputType
}

export type MeetingTagGroupByOutputType = {
  id: string
  meetingId: string
  tagId: string
  _count: MeetingTagCountAggregateOutputType | null
  _min: MeetingTagMinAggregateOutputType | null
  _max: MeetingTagMaxAggregateOutputType | null
}

type GetMeetingTagGroupByPayload<T extends MeetingTagGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MeetingTagGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MeetingTagGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MeetingTagGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MeetingTagGroupByOutputType[P]>
      }
    >
  > 



export type MeetingTagWhereInput = {
  AND?: Prisma.MeetingTagWhereInput | Prisma.MeetingTagWhereInput[]
  OR?: Prisma.MeetingTagWhereInput[]
  NOT?: Prisma.MeetingTagWhereInput | Prisma.MeetingTagWhereInput[]
  id?: Prisma.StringFilter<"MeetingTag"> | string
  meetingId?: Prisma.StringFilter<"MeetingTag"> | string
  tagId?: Prisma.StringFilter<"MeetingTag"> | string
  meeting?: Prisma.XOR<Prisma.MeetingScalarRelationFilter, Prisma.MeetingWhereInput>
  tag?: Prisma.XOR<Prisma.TagScalarRelationFilter, Prisma.TagWhereInput>
}

export type MeetingTagOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
  meeting?: Prisma.MeetingOrderByWithRelationInput
  tag?: Prisma.TagOrderByWithRelationInput
}

export type MeetingTagWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  meetingId_tagId?: Prisma.MeetingTagMeetingIdTagIdCompoundUniqueInput
  AND?: Prisma.MeetingTagWhereInput | Prisma.MeetingTagWhereInput[]
  OR?: Prisma.MeetingTagWhereInput[]
  NOT?: Prisma.MeetingTagWhereInput | Prisma.MeetingTagWhereInput[]
  meetingId?: Prisma.StringFilter<"MeetingTag"> | string
  tagId?: Prisma.StringFilter<"MeetingTag"> | string
  meeting?: Prisma.XOR<Prisma.MeetingScalarRelationFilter, Prisma.MeetingWhereInput>
  tag?: Prisma.XOR<Prisma.TagScalarRelationFilter, Prisma.TagWhereInput>
}, "id" | "meetingId_tagId">

export type MeetingTagOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
  _count?: Prisma.MeetingTagCountOrderByAggregateInput
  _max?: Prisma.MeetingTagMaxOrderByAggregateInput
  _min?: Prisma.MeetingTagMinOrderByAggregateInput
}

export type MeetingTagScalarWhereWithAggregatesInput = {
  AND?: Prisma.MeetingTagScalarWhereWithAggregatesInput | Prisma.MeetingTagScalarWhereWithAggregatesInput[]
  OR?: Prisma.MeetingTagScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MeetingTagScalarWhereWithAggregatesInput | Prisma.MeetingTagScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"MeetingTag"> | string
  meetingId?: Prisma.StringWithAggregatesFilter<"MeetingTag"> | string
  tagId?: Prisma.StringWithAggregatesFilter<"MeetingTag"> | string
}

export type MeetingTagCreateInput = {
  id?: string
  meeting: Prisma.MeetingCreateNestedOneWithoutTagsInput
  tag: Prisma.TagCreateNestedOneWithoutMeetingsInput
}

export type MeetingTagUncheckedCreateInput = {
  id?: string
  meetingId: string
  tagId: string
}

export type MeetingTagUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meeting?: Prisma.MeetingUpdateOneRequiredWithoutTagsNestedInput
  tag?: Prisma.TagUpdateOneRequiredWithoutMeetingsNestedInput
}

export type MeetingTagUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meetingId?: Prisma.StringFieldUpdateOperationsInput | string
  tagId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MeetingTagCreateManyInput = {
  id?: string
  meetingId: string
  tagId: string
}

export type MeetingTagUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MeetingTagUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meetingId?: Prisma.StringFieldUpdateOperationsInput | string
  tagId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MeetingTagListRelationFilter = {
  every?: Prisma.MeetingTagWhereInput
  some?: Prisma.MeetingTagWhereInput
  none?: Prisma.MeetingTagWhereInput
}

export type MeetingTagOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MeetingTagMeetingIdTagIdCompoundUniqueInput = {
  meetingId: string
  tagId: string
}

export type MeetingTagCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
}

export type MeetingTagMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
}

export type MeetingTagMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
}

export type MeetingTagCreateNestedManyWithoutMeetingInput = {
  create?: Prisma.XOR<Prisma.MeetingTagCreateWithoutMeetingInput, Prisma.MeetingTagUncheckedCreateWithoutMeetingInput> | Prisma.MeetingTagCreateWithoutMeetingInput[] | Prisma.MeetingTagUncheckedCreateWithoutMeetingInput[]
  connectOrCreate?: Prisma.MeetingTagCreateOrConnectWithoutMeetingInput | Prisma.MeetingTagCreateOrConnectWithoutMeetingInput[]
  createMany?: Prisma.MeetingTagCreateManyMeetingInputEnvelope
  connect?: Prisma.MeetingTagWhereUniqueInput | Prisma.MeetingTagWhereUniqueInput[]
}

export type MeetingTagUncheckedCreateNestedManyWithoutMeetingInput = {
  create?: Prisma.XOR<Prisma.MeetingTagCreateWithoutMeetingInput, Prisma.MeetingTagUncheckedCreateWithoutMeetingInput> | Prisma.MeetingTagCreateWithoutMeetingInput[] | Prisma.MeetingTagUncheckedCreateWithoutMeetingInput[]
  connectOrCreate?: Prisma.MeetingTagCreateOrConnectWithoutMeetingInput | Prisma.MeetingTagCreateOrConnectWithoutMeetingInput[]
  createMany?: Prisma.MeetingTagCreateManyMeetingInputEnvelope
  connect?: Prisma.MeetingTagWhereUniqueInput | Prisma.MeetingTagWhereUniqueInput[]
}

export type MeetingTagUpdateManyWithoutMeetingNestedInput = {
  create?: Prisma.XOR<Prisma.MeetingTagCreateWithoutMeetingInput, Prisma.MeetingTagUncheckedCreateWithoutMeetingInput> | Prisma.MeetingTagCreateWithoutMeetingInput[] | Prisma.MeetingTagUncheckedCreateWithoutMeetingInput[]
  connectOrCreate?: Prisma.MeetingTagCreateOrConnectWithoutMeetingInput | Prisma.MeetingTagCreateOrConnectWithoutMeetingInput[]
  upsert?: Prisma.MeetingTagUpsertWithWhereUniqueWithoutMeetingInput | Prisma.MeetingTagUpsertWithWhereUniqueWithoutMeetingInput[]
  createMany?: Prisma.MeetingTagCreateManyMeetingInputEnvelope
  set?: Prisma.MeetingTagWhereUniqueInput | Prisma.MeetingTagWhereUniqueInput[]
  disconnect?: Prisma.MeetingTagWhereUniqueInput | Prisma.MeetingTagWhereUniqueInput[]
  delete?: Prisma.MeetingTagWhereUniqueInput | Prisma.MeetingTagWhereUniqueInput[]
  connect?: Prisma.MeetingTagWhereUniqueInput | Prisma.MeetingTagWhereUniqueInput[]
  update?: Prisma.MeetingTagUpdateWithWhereUniqueWithoutMeetingInput | Prisma.MeetingTagUpdateWithWhereUniqueWithoutMeetingInput[]
  updateMany?: Prisma.MeetingTagUpdateManyWithWhereWithoutMeetingInput | Prisma.MeetingTagUpdateManyWithWhereWithoutMeetingInput[]
  deleteMany?: Prisma.MeetingTagScalarWhereInput | Prisma.MeetingTagScalarWhereInput[]
}

export type MeetingTagUncheckedUpdateManyWithoutMeetingNestedInput = {
  create?: Prisma.XOR<Prisma.MeetingTagCreateWithoutMeetingInput, Prisma.MeetingTagUncheckedCreateWithoutMeetingInput> | Prisma.MeetingTagCreateWithoutMeetingInput[] | Prisma.MeetingTagUncheckedCreateWithoutMeetingInput[]
  connectOrCreate?: Prisma.MeetingTagCreateOrConnectWithoutMeetingInput | Prisma.MeetingTagCreateOrConnectWithoutMeetingInput[]
  upsert?: Prisma.MeetingTagUpsertWithWhereUniqueWithoutMeetingInput | Prisma.MeetingTagUpsertWithWhereUniqueWithoutMeetingInput[]
  createMany?: Prisma.MeetingTagCreateManyMeetingInputEnvelope
  set?: Prisma.MeetingTagWhereUniqueInput | Prisma.MeetingTagWhereUniqueInput[]
  disconnect?: Prisma.MeetingTagWhereUniqueInput | Prisma.MeetingTagWhereUniqueInput[]
  delete?: Prisma.MeetingTagWhereUniqueInput | Prisma.MeetingTagWhereUniqueInput[]
  connect?: Prisma.MeetingTagWhereUniqueInput | Prisma.MeetingTagWhereUniqueInput[]
  update?: Prisma.MeetingTagUpdateWithWhereUniqueWithoutMeetingInput | Prisma.MeetingTagUpdateWithWhereUniqueWithoutMeetingInput[]
  updateMany?: Prisma.MeetingTagUpdateManyWithWhereWithoutMeetingInput | Prisma.MeetingTagUpdateManyWithWhereWithoutMeetingInput[]
  deleteMany?: Prisma.MeetingTagScalarWhereInput | Prisma.MeetingTagScalarWhereInput[]
}

export type MeetingTagCreateNestedManyWithoutTagInput = {
  create?: Prisma.XOR<Prisma.MeetingTagCreateWithoutTagInput, Prisma.MeetingTagUncheckedCreateWithoutTagInput> | Prisma.MeetingTagCreateWithoutTagInput[] | Prisma.MeetingTagUncheckedCreateWithoutTagInput[]
  connectOrCreate?: Prisma.MeetingTagCreateOrConnectWithoutTagInput | Prisma.MeetingTagCreateOrConnectWithoutTagInput[]
  createMany?: Prisma.MeetingTagCreateManyTagInputEnvelope
  connect?: Prisma.MeetingTagWhereUniqueInput | Prisma.MeetingTagWhereUniqueInput[]
}

export type MeetingTagUncheckedCreateNestedManyWithoutTagInput = {
  create?: Prisma.XOR<Prisma.MeetingTagCreateWithoutTagInput, Prisma.MeetingTagUncheckedCreateWithoutTagInput> | Prisma.MeetingTagCreateWithoutTagInput[] | Prisma.MeetingTagUncheckedCreateWithoutTagInput[]
  connectOrCreate?: Prisma.MeetingTagCreateOrConnectWithoutTagInput | Prisma.MeetingTagCreateOrConnectWithoutTagInput[]
  createMany?: Prisma.MeetingTagCreateManyTagInputEnvelope
  connect?: Prisma.MeetingTagWhereUniqueInput | Prisma.MeetingTagWhereUniqueInput[]
}

export type MeetingTagUpdateManyWithoutTagNestedInput = {
  create?: Prisma.XOR<Prisma.MeetingTagCreateWithoutTagInput, Prisma.MeetingTagUncheckedCreateWithoutTagInput> | Prisma.MeetingTagCreateWithoutTagInput[] | Prisma.MeetingTagUncheckedCreateWithoutTagInput[]
  connectOrCreate?: Prisma.MeetingTagCreateOrConnectWithoutTagInput | Prisma.MeetingTagCreateOrConnectWithoutTagInput[]
  upsert?: Prisma.MeetingTagUpsertWithWhereUniqueWithoutTagInput | Prisma.MeetingTagUpsertWithWhereUniqueWithoutTagInput[]
  createMany?: Prisma.MeetingTagCreateManyTagInputEnvelope
  set?: Prisma.MeetingTagWhereUniqueInput | Prisma.MeetingTagWhereUniqueInput[]
  disconnect?: Prisma.MeetingTagWhereUniqueInput | Prisma.MeetingTagWhereUniqueInput[]
  delete?: Prisma.MeetingTagWhereUniqueInput | Prisma.MeetingTagWhereUniqueInput[]
  connect?: Prisma.MeetingTagWhereUniqueInput | Prisma.MeetingTagWhereUniqueInput[]
  update?: Prisma.MeetingTagUpdateWithWhereUniqueWithoutTagInput | Prisma.MeetingTagUpdateWithWhereUniqueWithoutTagInput[]
  updateMany?: Prisma.MeetingTagUpdateManyWithWhereWithoutTagInput | Prisma.MeetingTagUpdateManyWithWhereWithoutTagInput[]
  deleteMany?: Prisma.MeetingTagScalarWhereInput | Prisma.MeetingTagScalarWhereInput[]
}

export type MeetingTagUncheckedUpdateManyWithoutTagNestedInput = {
  create?: Prisma.XOR<Prisma.MeetingTagCreateWithoutTagInput, Prisma.MeetingTagUncheckedCreateWithoutTagInput> | Prisma.MeetingTagCreateWithoutTagInput[] | Prisma.MeetingTagUncheckedCreateWithoutTagInput[]
  connectOrCreate?: Prisma.MeetingTagCreateOrConnectWithoutTagInput | Prisma.MeetingTagCreateOrConnectWithoutTagInput[]
  upsert?: Prisma.MeetingTagUpsertWithWhereUniqueWithoutTagInput | Prisma.MeetingTagUpsertWithWhereUniqueWithoutTagInput[]
  createMany?: Prisma.MeetingTagCreateManyTagInputEnvelope
  set?: Prisma.MeetingTagWhereUniqueInput | Prisma.MeetingTagWhereUniqueInput[]
  disconnect?: Prisma.MeetingTagWhereUniqueInput | Prisma.MeetingTagWhereUniqueInput[]
  delete?: Prisma.MeetingTagWhereUniqueInput | Prisma.MeetingTagWhereUniqueInput[]
  connect?: Prisma.MeetingTagWhereUniqueInput | Prisma.MeetingTagWhereUniqueInput[]
  update?: Prisma.MeetingTagUpdateWithWhereUniqueWithoutTagInput | Prisma.MeetingTagUpdateWithWhereUniqueWithoutTagInput[]
  updateMany?: Prisma.MeetingTagUpdateManyWithWhereWithoutTagInput | Prisma.MeetingTagUpdateManyWithWhereWithoutTagInput[]
  deleteMany?: Prisma.MeetingTagScalarWhereInput | Prisma.MeetingTagScalarWhereInput[]
}

export type MeetingTagCreateWithoutMeetingInput = {
  id?: string
  tag: Prisma.TagCreateNestedOneWithoutMeetingsInput
}

export type MeetingTagUncheckedCreateWithoutMeetingInput = {
  id?: string
  tagId: string
}

export type MeetingTagCreateOrConnectWithoutMeetingInput = {
  where: Prisma.MeetingTagWhereUniqueInput
  create: Prisma.XOR<Prisma.MeetingTagCreateWithoutMeetingInput, Prisma.MeetingTagUncheckedCreateWithoutMeetingInput>
}

export type MeetingTagCreateManyMeetingInputEnvelope = {
  data: Prisma.MeetingTagCreateManyMeetingInput | Prisma.MeetingTagCreateManyMeetingInput[]
  skipDuplicates?: boolean
}

export type MeetingTagUpsertWithWhereUniqueWithoutMeetingInput = {
  where: Prisma.MeetingTagWhereUniqueInput
  update: Prisma.XOR<Prisma.MeetingTagUpdateWithoutMeetingInput, Prisma.MeetingTagUncheckedUpdateWithoutMeetingInput>
  create: Prisma.XOR<Prisma.MeetingTagCreateWithoutMeetingInput, Prisma.MeetingTagUncheckedCreateWithoutMeetingInput>
}

export type MeetingTagUpdateWithWhereUniqueWithoutMeetingInput = {
  where: Prisma.MeetingTagWhereUniqueInput
  data: Prisma.XOR<Prisma.MeetingTagUpdateWithoutMeetingInput, Prisma.MeetingTagUncheckedUpdateWithoutMeetingInput>
}

export type MeetingTagUpdateManyWithWhereWithoutMeetingInput = {
  where: Prisma.MeetingTagScalarWhereInput
  data: Prisma.XOR<Prisma.MeetingTagUpdateManyMutationInput, Prisma.MeetingTagUncheckedUpdateManyWithoutMeetingInput>
}

export type MeetingTagScalarWhereInput = {
  AND?: Prisma.MeetingTagScalarWhereInput | Prisma.MeetingTagScalarWhereInput[]
  OR?: Prisma.MeetingTagScalarWhereInput[]
  NOT?: Prisma.MeetingTagScalarWhereInput | Prisma.MeetingTagScalarWhereInput[]
  id?: Prisma.StringFilter<"MeetingTag"> | string
  meetingId?: Prisma.StringFilter<"MeetingTag"> | string
  tagId?: Prisma.StringFilter<"MeetingTag"> | string
}

export type MeetingTagCreateWithoutTagInput = {
  id?: string
  meeting: Prisma.MeetingCreateNestedOneWithoutTagsInput
}

export type MeetingTagUncheckedCreateWithoutTagInput = {
  id?: string
  meetingId: string
}

export type MeetingTagCreateOrConnectWithoutTagInput = {
  where: Prisma.MeetingTagWhereUniqueInput
  create: Prisma.XOR<Prisma.MeetingTagCreateWithoutTagInput, Prisma.MeetingTagUncheckedCreateWithoutTagInput>
}

export type MeetingTagCreateManyTagInputEnvelope = {
  data: Prisma.MeetingTagCreateManyTagInput | Prisma.MeetingTagCreateManyTagInput[]
  skipDuplicates?: boolean
}

export type MeetingTagUpsertWithWhereUniqueWithoutTagInput = {
  where: Prisma.MeetingTagWhereUniqueInput
  update: Prisma.XOR<Prisma.MeetingTagUpdateWithoutTagInput, Prisma.MeetingTagUncheckedUpdateWithoutTagInput>
  create: Prisma.XOR<Prisma.MeetingTagCreateWithoutTagInput, Prisma.MeetingTagUncheckedCreateWithoutTagInput>
}

export type MeetingTagUpdateWithWhereUniqueWithoutTagInput = {
  where: Prisma.MeetingTagWhereUniqueInput
  data: Prisma.XOR<Prisma.MeetingTagUpdateWithoutTagInput, Prisma.MeetingTagUncheckedUpdateWithoutTagInput>
}

export type MeetingTagUpdateManyWithWhereWithoutTagInput = {
  where: Prisma.MeetingTagScalarWhereInput
  data: Prisma.XOR<Prisma.MeetingTagUpdateManyMutationInput, Prisma.MeetingTagUncheckedUpdateManyWithoutTagInput>
}

export type MeetingTagCreateManyMeetingInput = {
  id?: string
  tagId: string
}

export type MeetingTagUpdateWithoutMeetingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tag?: Prisma.TagUpdateOneRequiredWithoutMeetingsNestedInput
}

export type MeetingTagUncheckedUpdateWithoutMeetingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tagId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MeetingTagUncheckedUpdateManyWithoutMeetingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tagId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MeetingTagCreateManyTagInput = {
  id?: string
  meetingId: string
}

export type MeetingTagUpdateWithoutTagInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meeting?: Prisma.MeetingUpdateOneRequiredWithoutTagsNestedInput
}

export type MeetingTagUncheckedUpdateWithoutTagInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meetingId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MeetingTagUncheckedUpdateManyWithoutTagInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meetingId?: Prisma.StringFieldUpdateOperationsInput | string
}



export type MeetingTagSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meetingId?: boolean
  tagId?: boolean
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}, ExtArgs["result"]["meetingTag"]>

export type MeetingTagSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meetingId?: boolean
  tagId?: boolean
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}, ExtArgs["result"]["meetingTag"]>

export type MeetingTagSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meetingId?: boolean
  tagId?: boolean
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}, ExtArgs["result"]["meetingTag"]>

export type MeetingTagSelectScalar = {
  id?: boolean
  meetingId?: boolean
  tagId?: boolean
}

export type MeetingTagOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "meetingId" | "tagId", ExtArgs["result"]["meetingTag"]>
export type MeetingTagInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}
export type MeetingTagIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}
export type MeetingTagIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}

export type $MeetingTagPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MeetingTag"
  objects: {
    meeting: Prisma.$MeetingPayload<ExtArgs>
    tag: Prisma.$TagPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    meetingId: string
    tagId: string
  }, ExtArgs["result"]["meetingTag"]>
  composites: {}
}

export type MeetingTagGetPayload<S extends boolean | null | undefined | MeetingTagDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MeetingTagPayload, S>

export type MeetingTagCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MeetingTagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MeetingTagCountAggregateInputType | true
  }

export interface MeetingTagDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MeetingTag'], meta: { name: 'MeetingTag' } }
  /**
   * Find zero or one MeetingTag that matches the filter.
   * @param {MeetingTagFindUniqueArgs} args - Arguments to find a MeetingTag
   * @example
   * // Get one MeetingTag
   * const meetingTag = await prisma.meetingTag.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MeetingTagFindUniqueArgs>(args: Prisma.SelectSubset<T, MeetingTagFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MeetingTagClient<runtime.Types.Result.GetResult<Prisma.$MeetingTagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MeetingTag that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MeetingTagFindUniqueOrThrowArgs} args - Arguments to find a MeetingTag
   * @example
   * // Get one MeetingTag
   * const meetingTag = await prisma.meetingTag.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MeetingTagFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MeetingTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MeetingTagClient<runtime.Types.Result.GetResult<Prisma.$MeetingTagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MeetingTag that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingTagFindFirstArgs} args - Arguments to find a MeetingTag
   * @example
   * // Get one MeetingTag
   * const meetingTag = await prisma.meetingTag.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MeetingTagFindFirstArgs>(args?: Prisma.SelectSubset<T, MeetingTagFindFirstArgs<ExtArgs>>): Prisma.Prisma__MeetingTagClient<runtime.Types.Result.GetResult<Prisma.$MeetingTagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MeetingTag that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingTagFindFirstOrThrowArgs} args - Arguments to find a MeetingTag
   * @example
   * // Get one MeetingTag
   * const meetingTag = await prisma.meetingTag.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MeetingTagFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MeetingTagFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MeetingTagClient<runtime.Types.Result.GetResult<Prisma.$MeetingTagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MeetingTags that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingTagFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MeetingTags
   * const meetingTags = await prisma.meetingTag.findMany()
   * 
   * // Get first 10 MeetingTags
   * const meetingTags = await prisma.meetingTag.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const meetingTagWithIdOnly = await prisma.meetingTag.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MeetingTagFindManyArgs>(args?: Prisma.SelectSubset<T, MeetingTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MeetingTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MeetingTag.
   * @param {MeetingTagCreateArgs} args - Arguments to create a MeetingTag.
   * @example
   * // Create one MeetingTag
   * const MeetingTag = await prisma.meetingTag.create({
   *   data: {
   *     // ... data to create a MeetingTag
   *   }
   * })
   * 
   */
  create<T extends MeetingTagCreateArgs>(args: Prisma.SelectSubset<T, MeetingTagCreateArgs<ExtArgs>>): Prisma.Prisma__MeetingTagClient<runtime.Types.Result.GetResult<Prisma.$MeetingTagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MeetingTags.
   * @param {MeetingTagCreateManyArgs} args - Arguments to create many MeetingTags.
   * @example
   * // Create many MeetingTags
   * const meetingTag = await prisma.meetingTag.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MeetingTagCreateManyArgs>(args?: Prisma.SelectSubset<T, MeetingTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MeetingTags and returns the data saved in the database.
   * @param {MeetingTagCreateManyAndReturnArgs} args - Arguments to create many MeetingTags.
   * @example
   * // Create many MeetingTags
   * const meetingTag = await prisma.meetingTag.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MeetingTags and only return the `id`
   * const meetingTagWithIdOnly = await prisma.meetingTag.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MeetingTagCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MeetingTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MeetingTagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MeetingTag.
   * @param {MeetingTagDeleteArgs} args - Arguments to delete one MeetingTag.
   * @example
   * // Delete one MeetingTag
   * const MeetingTag = await prisma.meetingTag.delete({
   *   where: {
   *     // ... filter to delete one MeetingTag
   *   }
   * })
   * 
   */
  delete<T extends MeetingTagDeleteArgs>(args: Prisma.SelectSubset<T, MeetingTagDeleteArgs<ExtArgs>>): Prisma.Prisma__MeetingTagClient<runtime.Types.Result.GetResult<Prisma.$MeetingTagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MeetingTag.
   * @param {MeetingTagUpdateArgs} args - Arguments to update one MeetingTag.
   * @example
   * // Update one MeetingTag
   * const meetingTag = await prisma.meetingTag.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MeetingTagUpdateArgs>(args: Prisma.SelectSubset<T, MeetingTagUpdateArgs<ExtArgs>>): Prisma.Prisma__MeetingTagClient<runtime.Types.Result.GetResult<Prisma.$MeetingTagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MeetingTags.
   * @param {MeetingTagDeleteManyArgs} args - Arguments to filter MeetingTags to delete.
   * @example
   * // Delete a few MeetingTags
   * const { count } = await prisma.meetingTag.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MeetingTagDeleteManyArgs>(args?: Prisma.SelectSubset<T, MeetingTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MeetingTags.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingTagUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MeetingTags
   * const meetingTag = await prisma.meetingTag.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MeetingTagUpdateManyArgs>(args: Prisma.SelectSubset<T, MeetingTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MeetingTags and returns the data updated in the database.
   * @param {MeetingTagUpdateManyAndReturnArgs} args - Arguments to update many MeetingTags.
   * @example
   * // Update many MeetingTags
   * const meetingTag = await prisma.meetingTag.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MeetingTags and only return the `id`
   * const meetingTagWithIdOnly = await prisma.meetingTag.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MeetingTagUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MeetingTagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MeetingTagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MeetingTag.
   * @param {MeetingTagUpsertArgs} args - Arguments to update or create a MeetingTag.
   * @example
   * // Update or create a MeetingTag
   * const meetingTag = await prisma.meetingTag.upsert({
   *   create: {
   *     // ... data to create a MeetingTag
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MeetingTag we want to update
   *   }
   * })
   */
  upsert<T extends MeetingTagUpsertArgs>(args: Prisma.SelectSubset<T, MeetingTagUpsertArgs<ExtArgs>>): Prisma.Prisma__MeetingTagClient<runtime.Types.Result.GetResult<Prisma.$MeetingTagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MeetingTags.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingTagCountArgs} args - Arguments to filter MeetingTags to count.
   * @example
   * // Count the number of MeetingTags
   * const count = await prisma.meetingTag.count({
   *   where: {
   *     // ... the filter for the MeetingTags we want to count
   *   }
   * })
  **/
  count<T extends MeetingTagCountArgs>(
    args?: Prisma.Subset<T, MeetingTagCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MeetingTagCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MeetingTag.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MeetingTagAggregateArgs>(args: Prisma.Subset<T, MeetingTagAggregateArgs>): Prisma.PrismaPromise<GetMeetingTagAggregateType<T>>

  /**
   * Group by MeetingTag.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingTagGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MeetingTagGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MeetingTagGroupByArgs['orderBy'] }
      : { orderBy?: MeetingTagGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MeetingTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeetingTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MeetingTag model
 */
readonly fields: MeetingTagFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MeetingTag.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MeetingTagClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  meeting<T extends Prisma.MeetingDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MeetingDefaultArgs<ExtArgs>>): Prisma.Prisma__MeetingClient<runtime.Types.Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  tag<T extends Prisma.TagDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TagDefaultArgs<ExtArgs>>): Prisma.Prisma__TagClient<runtime.Types.Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MeetingTag model
 */
export interface MeetingTagFieldRefs {
  readonly id: Prisma.FieldRef<"MeetingTag", 'String'>
  readonly meetingId: Prisma.FieldRef<"MeetingTag", 'String'>
  readonly tagId: Prisma.FieldRef<"MeetingTag", 'String'>
}
    

// Custom InputTypes
/**
 * MeetingTag findUnique
 */
export type MeetingTagFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingTag
   */
  select?: Prisma.MeetingTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingTag
   */
  omit?: Prisma.MeetingTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingTagInclude<ExtArgs> | null
  /**
   * Filter, which MeetingTag to fetch.
   */
  where: Prisma.MeetingTagWhereUniqueInput
}

/**
 * MeetingTag findUniqueOrThrow
 */
export type MeetingTagFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingTag
   */
  select?: Prisma.MeetingTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingTag
   */
  omit?: Prisma.MeetingTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingTagInclude<ExtArgs> | null
  /**
   * Filter, which MeetingTag to fetch.
   */
  where: Prisma.MeetingTagWhereUniqueInput
}

/**
 * MeetingTag findFirst
 */
export type MeetingTagFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingTag
   */
  select?: Prisma.MeetingTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingTag
   */
  omit?: Prisma.MeetingTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingTagInclude<ExtArgs> | null
  /**
   * Filter, which MeetingTag to fetch.
   */
  where?: Prisma.MeetingTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MeetingTags to fetch.
   */
  orderBy?: Prisma.MeetingTagOrderByWithRelationInput | Prisma.MeetingTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MeetingTags.
   */
  cursor?: Prisma.MeetingTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MeetingTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MeetingTags.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MeetingTags.
   */
  distinct?: Prisma.MeetingTagScalarFieldEnum | Prisma.MeetingTagScalarFieldEnum[]
}

/**
 * MeetingTag findFirstOrThrow
 */
export type MeetingTagFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingTag
   */
  select?: Prisma.MeetingTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingTag
   */
  omit?: Prisma.MeetingTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingTagInclude<ExtArgs> | null
  /**
   * Filter, which MeetingTag to fetch.
   */
  where?: Prisma.MeetingTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MeetingTags to fetch.
   */
  orderBy?: Prisma.MeetingTagOrderByWithRelationInput | Prisma.MeetingTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MeetingTags.
   */
  cursor?: Prisma.MeetingTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MeetingTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MeetingTags.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MeetingTags.
   */
  distinct?: Prisma.MeetingTagScalarFieldEnum | Prisma.MeetingTagScalarFieldEnum[]
}

/**
 * MeetingTag findMany
 */
export type MeetingTagFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingTag
   */
  select?: Prisma.MeetingTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingTag
   */
  omit?: Prisma.MeetingTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingTagInclude<ExtArgs> | null
  /**
   * Filter, which MeetingTags to fetch.
   */
  where?: Prisma.MeetingTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MeetingTags to fetch.
   */
  orderBy?: Prisma.MeetingTagOrderByWithRelationInput | Prisma.MeetingTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MeetingTags.
   */
  cursor?: Prisma.MeetingTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MeetingTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MeetingTags.
   */
  skip?: number
  distinct?: Prisma.MeetingTagScalarFieldEnum | Prisma.MeetingTagScalarFieldEnum[]
}

/**
 * MeetingTag create
 */
export type MeetingTagCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingTag
   */
  select?: Prisma.MeetingTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingTag
   */
  omit?: Prisma.MeetingTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingTagInclude<ExtArgs> | null
  /**
   * The data needed to create a MeetingTag.
   */
  data: Prisma.XOR<Prisma.MeetingTagCreateInput, Prisma.MeetingTagUncheckedCreateInput>
}

/**
 * MeetingTag createMany
 */
export type MeetingTagCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MeetingTags.
   */
  data: Prisma.MeetingTagCreateManyInput | Prisma.MeetingTagCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MeetingTag createManyAndReturn
 */
export type MeetingTagCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingTag
   */
  select?: Prisma.MeetingTagSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingTag
   */
  omit?: Prisma.MeetingTagOmit<ExtArgs> | null
  /**
   * The data used to create many MeetingTags.
   */
  data: Prisma.MeetingTagCreateManyInput | Prisma.MeetingTagCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingTagIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MeetingTag update
 */
export type MeetingTagUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingTag
   */
  select?: Prisma.MeetingTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingTag
   */
  omit?: Prisma.MeetingTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingTagInclude<ExtArgs> | null
  /**
   * The data needed to update a MeetingTag.
   */
  data: Prisma.XOR<Prisma.MeetingTagUpdateInput, Prisma.MeetingTagUncheckedUpdateInput>
  /**
   * Choose, which MeetingTag to update.
   */
  where: Prisma.MeetingTagWhereUniqueInput
}

/**
 * MeetingTag updateMany
 */
export type MeetingTagUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MeetingTags.
   */
  data: Prisma.XOR<Prisma.MeetingTagUpdateManyMutationInput, Prisma.MeetingTagUncheckedUpdateManyInput>
  /**
   * Filter which MeetingTags to update
   */
  where?: Prisma.MeetingTagWhereInput
  /**
   * Limit how many MeetingTags to update.
   */
  limit?: number
}

/**
 * MeetingTag updateManyAndReturn
 */
export type MeetingTagUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingTag
   */
  select?: Prisma.MeetingTagSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingTag
   */
  omit?: Prisma.MeetingTagOmit<ExtArgs> | null
  /**
   * The data used to update MeetingTags.
   */
  data: Prisma.XOR<Prisma.MeetingTagUpdateManyMutationInput, Prisma.MeetingTagUncheckedUpdateManyInput>
  /**
   * Filter which MeetingTags to update
   */
  where?: Prisma.MeetingTagWhereInput
  /**
   * Limit how many MeetingTags to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingTagIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MeetingTag upsert
 */
export type MeetingTagUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingTag
   */
  select?: Prisma.MeetingTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingTag
   */
  omit?: Prisma.MeetingTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingTagInclude<ExtArgs> | null
  /**
   * The filter to search for the MeetingTag to update in case it exists.
   */
  where: Prisma.MeetingTagWhereUniqueInput
  /**
   * In case the MeetingTag found by the `where` argument doesn't exist, create a new MeetingTag with this data.
   */
  create: Prisma.XOR<Prisma.MeetingTagCreateInput, Prisma.MeetingTagUncheckedCreateInput>
  /**
   * In case the MeetingTag was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MeetingTagUpdateInput, Prisma.MeetingTagUncheckedUpdateInput>
}

/**
 * MeetingTag delete
 */
export type MeetingTagDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingTag
   */
  select?: Prisma.MeetingTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingTag
   */
  omit?: Prisma.MeetingTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingTagInclude<ExtArgs> | null
  /**
   * Filter which MeetingTag to delete.
   */
  where: Prisma.MeetingTagWhereUniqueInput
}

/**
 * MeetingTag deleteMany
 */
export type MeetingTagDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MeetingTags to delete
   */
  where?: Prisma.MeetingTagWhereInput
  /**
   * Limit how many MeetingTags to delete.
   */
  limit?: number
}

/**
 * MeetingTag without action
 */
export type MeetingTagDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingTag
   */
  select?: Prisma.MeetingTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingTag
   */
  omit?: Prisma.MeetingTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingTagInclude<ExtArgs> | null
}
