
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ActionItem` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ActionItem
 * 
 */
export type ActionItemModel = runtime.Types.Result.DefaultSelection<Prisma.$ActionItemPayload>

export type AggregateActionItem = {
  _count: ActionItemCountAggregateOutputType | null
  _min: ActionItemMinAggregateOutputType | null
  _max: ActionItemMaxAggregateOutputType | null
}

export type ActionItemMinAggregateOutputType = {
  id: string | null
  meetingId: string | null
  description: string | null
  assigneeId: string | null
  dueDate: Date | null
  priority: $Enums.ActionPriority | null
  status: $Enums.ActionStatus | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ActionItemMaxAggregateOutputType = {
  id: string | null
  meetingId: string | null
  description: string | null
  assigneeId: string | null
  dueDate: Date | null
  priority: $Enums.ActionPriority | null
  status: $Enums.ActionStatus | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ActionItemCountAggregateOutputType = {
  id: number
  meetingId: number
  description: number
  assigneeId: number
  dueDate: number
  priority: number
  status: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ActionItemMinAggregateInputType = {
  id?: true
  meetingId?: true
  description?: true
  assigneeId?: true
  dueDate?: true
  priority?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type ActionItemMaxAggregateInputType = {
  id?: true
  meetingId?: true
  description?: true
  assigneeId?: true
  dueDate?: true
  priority?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type ActionItemCountAggregateInputType = {
  id?: true
  meetingId?: true
  description?: true
  assigneeId?: true
  dueDate?: true
  priority?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ActionItemAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ActionItem to aggregate.
   */
  where?: Prisma.ActionItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ActionItems to fetch.
   */
  orderBy?: Prisma.ActionItemOrderByWithRelationInput | Prisma.ActionItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ActionItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ActionItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ActionItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ActionItems
  **/
  _count?: true | ActionItemCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ActionItemMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ActionItemMaxAggregateInputType
}

export type GetActionItemAggregateType<T extends ActionItemAggregateArgs> = {
      [P in keyof T & keyof AggregateActionItem]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateActionItem[P]>
    : Prisma.GetScalarType<T[P], AggregateActionItem[P]>
}




export type ActionItemGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ActionItemWhereInput
  orderBy?: Prisma.ActionItemOrderByWithAggregationInput | Prisma.ActionItemOrderByWithAggregationInput[]
  by: Prisma.ActionItemScalarFieldEnum[] | Prisma.ActionItemScalarFieldEnum
  having?: Prisma.ActionItemScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ActionItemCountAggregateInputType | true
  _min?: ActionItemMinAggregateInputType
  _max?: ActionItemMaxAggregateInputType
}

export type ActionItemGroupByOutputType = {
  id: string
  meetingId: string
  description: string
  assigneeId: string | null
  dueDate: Date | null
  priority: $Enums.ActionPriority
  status: $Enums.ActionStatus
  createdAt: Date
  updatedAt: Date
  _count: ActionItemCountAggregateOutputType | null
  _min: ActionItemMinAggregateOutputType | null
  _max: ActionItemMaxAggregateOutputType | null
}

type GetActionItemGroupByPayload<T extends ActionItemGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ActionItemGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ActionItemGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ActionItemGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ActionItemGroupByOutputType[P]>
      }
    >
  > 



export type ActionItemWhereInput = {
  AND?: Prisma.ActionItemWhereInput | Prisma.ActionItemWhereInput[]
  OR?: Prisma.ActionItemWhereInput[]
  NOT?: Prisma.ActionItemWhereInput | Prisma.ActionItemWhereInput[]
  id?: Prisma.StringFilter<"ActionItem"> | string
  meetingId?: Prisma.StringFilter<"ActionItem"> | string
  description?: Prisma.StringFilter<"ActionItem"> | string
  assigneeId?: Prisma.StringNullableFilter<"ActionItem"> | string | null
  dueDate?: Prisma.DateTimeNullableFilter<"ActionItem"> | Date | string | null
  priority?: Prisma.EnumActionPriorityFilter<"ActionItem"> | $Enums.ActionPriority
  status?: Prisma.EnumActionStatusFilter<"ActionItem"> | $Enums.ActionStatus
  createdAt?: Prisma.DateTimeFilter<"ActionItem"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ActionItem"> | Date | string
  meeting?: Prisma.XOR<Prisma.MeetingScalarRelationFilter, Prisma.MeetingWhereInput>
  assignee?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
}

export type ActionItemOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  description?: Prisma.SortOrder
  assigneeId?: Prisma.SortOrderInput | Prisma.SortOrder
  dueDate?: Prisma.SortOrderInput | Prisma.SortOrder
  priority?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  meeting?: Prisma.MeetingOrderByWithRelationInput
  assignee?: Prisma.UserOrderByWithRelationInput
}

export type ActionItemWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ActionItemWhereInput | Prisma.ActionItemWhereInput[]
  OR?: Prisma.ActionItemWhereInput[]
  NOT?: Prisma.ActionItemWhereInput | Prisma.ActionItemWhereInput[]
  meetingId?: Prisma.StringFilter<"ActionItem"> | string
  description?: Prisma.StringFilter<"ActionItem"> | string
  assigneeId?: Prisma.StringNullableFilter<"ActionItem"> | string | null
  dueDate?: Prisma.DateTimeNullableFilter<"ActionItem"> | Date | string | null
  priority?: Prisma.EnumActionPriorityFilter<"ActionItem"> | $Enums.ActionPriority
  status?: Prisma.EnumActionStatusFilter<"ActionItem"> | $Enums.ActionStatus
  createdAt?: Prisma.DateTimeFilter<"ActionItem"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ActionItem"> | Date | string
  meeting?: Prisma.XOR<Prisma.MeetingScalarRelationFilter, Prisma.MeetingWhereInput>
  assignee?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
}, "id">

export type ActionItemOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  description?: Prisma.SortOrder
  assigneeId?: Prisma.SortOrderInput | Prisma.SortOrder
  dueDate?: Prisma.SortOrderInput | Prisma.SortOrder
  priority?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ActionItemCountOrderByAggregateInput
  _max?: Prisma.ActionItemMaxOrderByAggregateInput
  _min?: Prisma.ActionItemMinOrderByAggregateInput
}

export type ActionItemScalarWhereWithAggregatesInput = {
  AND?: Prisma.ActionItemScalarWhereWithAggregatesInput | Prisma.ActionItemScalarWhereWithAggregatesInput[]
  OR?: Prisma.ActionItemScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ActionItemScalarWhereWithAggregatesInput | Prisma.ActionItemScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ActionItem"> | string
  meetingId?: Prisma.StringWithAggregatesFilter<"ActionItem"> | string
  description?: Prisma.StringWithAggregatesFilter<"ActionItem"> | string
  assigneeId?: Prisma.StringNullableWithAggregatesFilter<"ActionItem"> | string | null
  dueDate?: Prisma.DateTimeNullableWithAggregatesFilter<"ActionItem"> | Date | string | null
  priority?: Prisma.EnumActionPriorityWithAggregatesFilter<"ActionItem"> | $Enums.ActionPriority
  status?: Prisma.EnumActionStatusWithAggregatesFilter<"ActionItem"> | $Enums.ActionStatus
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ActionItem"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ActionItem"> | Date | string
}

export type ActionItemCreateInput = {
  id?: string
  description: string
  dueDate?: Date | string | null
  priority?: $Enums.ActionPriority
  status?: $Enums.ActionStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  meeting: Prisma.MeetingCreateNestedOneWithoutActionItemsInput
  assignee?: Prisma.UserCreateNestedOneWithoutActionItemsInput
}

export type ActionItemUncheckedCreateInput = {
  id?: string
  meetingId: string
  description: string
  assigneeId?: string | null
  dueDate?: Date | string | null
  priority?: $Enums.ActionPriority
  status?: $Enums.ActionStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ActionItemUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  dueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  priority?: Prisma.EnumActionPriorityFieldUpdateOperationsInput | $Enums.ActionPriority
  status?: Prisma.EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  meeting?: Prisma.MeetingUpdateOneRequiredWithoutActionItemsNestedInput
  assignee?: Prisma.UserUpdateOneWithoutActionItemsNestedInput
}

export type ActionItemUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meetingId?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  assigneeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  priority?: Prisma.EnumActionPriorityFieldUpdateOperationsInput | $Enums.ActionPriority
  status?: Prisma.EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ActionItemCreateManyInput = {
  id?: string
  meetingId: string
  description: string
  assigneeId?: string | null
  dueDate?: Date | string | null
  priority?: $Enums.ActionPriority
  status?: $Enums.ActionStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ActionItemUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  dueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  priority?: Prisma.EnumActionPriorityFieldUpdateOperationsInput | $Enums.ActionPriority
  status?: Prisma.EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ActionItemUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meetingId?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  assigneeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  priority?: Prisma.EnumActionPriorityFieldUpdateOperationsInput | $Enums.ActionPriority
  status?: Prisma.EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ActionItemListRelationFilter = {
  every?: Prisma.ActionItemWhereInput
  some?: Prisma.ActionItemWhereInput
  none?: Prisma.ActionItemWhereInput
}

export type ActionItemOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ActionItemCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  description?: Prisma.SortOrder
  assigneeId?: Prisma.SortOrder
  dueDate?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ActionItemMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  description?: Prisma.SortOrder
  assigneeId?: Prisma.SortOrder
  dueDate?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ActionItemMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  description?: Prisma.SortOrder
  assigneeId?: Prisma.SortOrder
  dueDate?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ActionItemCreateNestedManyWithoutAssigneeInput = {
  create?: Prisma.XOR<Prisma.ActionItemCreateWithoutAssigneeInput, Prisma.ActionItemUncheckedCreateWithoutAssigneeInput> | Prisma.ActionItemCreateWithoutAssigneeInput[] | Prisma.ActionItemUncheckedCreateWithoutAssigneeInput[]
  connectOrCreate?: Prisma.ActionItemCreateOrConnectWithoutAssigneeInput | Prisma.ActionItemCreateOrConnectWithoutAssigneeInput[]
  createMany?: Prisma.ActionItemCreateManyAssigneeInputEnvelope
  connect?: Prisma.ActionItemWhereUniqueInput | Prisma.ActionItemWhereUniqueInput[]
}

export type ActionItemUncheckedCreateNestedManyWithoutAssigneeInput = {
  create?: Prisma.XOR<Prisma.ActionItemCreateWithoutAssigneeInput, Prisma.ActionItemUncheckedCreateWithoutAssigneeInput> | Prisma.ActionItemCreateWithoutAssigneeInput[] | Prisma.ActionItemUncheckedCreateWithoutAssigneeInput[]
  connectOrCreate?: Prisma.ActionItemCreateOrConnectWithoutAssigneeInput | Prisma.ActionItemCreateOrConnectWithoutAssigneeInput[]
  createMany?: Prisma.ActionItemCreateManyAssigneeInputEnvelope
  connect?: Prisma.ActionItemWhereUniqueInput | Prisma.ActionItemWhereUniqueInput[]
}

export type ActionItemUpdateManyWithoutAssigneeNestedInput = {
  create?: Prisma.XOR<Prisma.ActionItemCreateWithoutAssigneeInput, Prisma.ActionItemUncheckedCreateWithoutAssigneeInput> | Prisma.ActionItemCreateWithoutAssigneeInput[] | Prisma.ActionItemUncheckedCreateWithoutAssigneeInput[]
  connectOrCreate?: Prisma.ActionItemCreateOrConnectWithoutAssigneeInput | Prisma.ActionItemCreateOrConnectWithoutAssigneeInput[]
  upsert?: Prisma.ActionItemUpsertWithWhereUniqueWithoutAssigneeInput | Prisma.ActionItemUpsertWithWhereUniqueWithoutAssigneeInput[]
  createMany?: Prisma.ActionItemCreateManyAssigneeInputEnvelope
  set?: Prisma.ActionItemWhereUniqueInput | Prisma.ActionItemWhereUniqueInput[]
  disconnect?: Prisma.ActionItemWhereUniqueInput | Prisma.ActionItemWhereUniqueInput[]
  delete?: Prisma.ActionItemWhereUniqueInput | Prisma.ActionItemWhereUniqueInput[]
  connect?: Prisma.ActionItemWhereUniqueInput | Prisma.ActionItemWhereUniqueInput[]
  update?: Prisma.ActionItemUpdateWithWhereUniqueWithoutAssigneeInput | Prisma.ActionItemUpdateWithWhereUniqueWithoutAssigneeInput[]
  updateMany?: Prisma.ActionItemUpdateManyWithWhereWithoutAssigneeInput | Prisma.ActionItemUpdateManyWithWhereWithoutAssigneeInput[]
  deleteMany?: Prisma.ActionItemScalarWhereInput | Prisma.ActionItemScalarWhereInput[]
}

export type ActionItemUncheckedUpdateManyWithoutAssigneeNestedInput = {
  create?: Prisma.XOR<Prisma.ActionItemCreateWithoutAssigneeInput, Prisma.ActionItemUncheckedCreateWithoutAssigneeInput> | Prisma.ActionItemCreateWithoutAssigneeInput[] | Prisma.ActionItemUncheckedCreateWithoutAssigneeInput[]
  connectOrCreate?: Prisma.ActionItemCreateOrConnectWithoutAssigneeInput | Prisma.ActionItemCreateOrConnectWithoutAssigneeInput[]
  upsert?: Prisma.ActionItemUpsertWithWhereUniqueWithoutAssigneeInput | Prisma.ActionItemUpsertWithWhereUniqueWithoutAssigneeInput[]
  createMany?: Prisma.ActionItemCreateManyAssigneeInputEnvelope
  set?: Prisma.ActionItemWhereUniqueInput | Prisma.ActionItemWhereUniqueInput[]
  disconnect?: Prisma.ActionItemWhereUniqueInput | Prisma.ActionItemWhereUniqueInput[]
  delete?: Prisma.ActionItemWhereUniqueInput | Prisma.ActionItemWhereUniqueInput[]
  connect?: Prisma.ActionItemWhereUniqueInput | Prisma.ActionItemWhereUniqueInput[]
  update?: Prisma.ActionItemUpdateWithWhereUniqueWithoutAssigneeInput | Prisma.ActionItemUpdateWithWhereUniqueWithoutAssigneeInput[]
  updateMany?: Prisma.ActionItemUpdateManyWithWhereWithoutAssigneeInput | Prisma.ActionItemUpdateManyWithWhereWithoutAssigneeInput[]
  deleteMany?: Prisma.ActionItemScalarWhereInput | Prisma.ActionItemScalarWhereInput[]
}

export type ActionItemCreateNestedManyWithoutMeetingInput = {
  create?: Prisma.XOR<Prisma.ActionItemCreateWithoutMeetingInput, Prisma.ActionItemUncheckedCreateWithoutMeetingInput> | Prisma.ActionItemCreateWithoutMeetingInput[] | Prisma.ActionItemUncheckedCreateWithoutMeetingInput[]
  connectOrCreate?: Prisma.ActionItemCreateOrConnectWithoutMeetingInput | Prisma.ActionItemCreateOrConnectWithoutMeetingInput[]
  createMany?: Prisma.ActionItemCreateManyMeetingInputEnvelope
  connect?: Prisma.ActionItemWhereUniqueInput | Prisma.ActionItemWhereUniqueInput[]
}

export type ActionItemUncheckedCreateNestedManyWithoutMeetingInput = {
  create?: Prisma.XOR<Prisma.ActionItemCreateWithoutMeetingInput, Prisma.ActionItemUncheckedCreateWithoutMeetingInput> | Prisma.ActionItemCreateWithoutMeetingInput[] | Prisma.ActionItemUncheckedCreateWithoutMeetingInput[]
  connectOrCreate?: Prisma.ActionItemCreateOrConnectWithoutMeetingInput | Prisma.ActionItemCreateOrConnectWithoutMeetingInput[]
  createMany?: Prisma.ActionItemCreateManyMeetingInputEnvelope
  connect?: Prisma.ActionItemWhereUniqueInput | Prisma.ActionItemWhereUniqueInput[]
}

export type ActionItemUpdateManyWithoutMeetingNestedInput = {
  create?: Prisma.XOR<Prisma.ActionItemCreateWithoutMeetingInput, Prisma.ActionItemUncheckedCreateWithoutMeetingInput> | Prisma.ActionItemCreateWithoutMeetingInput[] | Prisma.ActionItemUncheckedCreateWithoutMeetingInput[]
  connectOrCreate?: Prisma.ActionItemCreateOrConnectWithoutMeetingInput | Prisma.ActionItemCreateOrConnectWithoutMeetingInput[]
  upsert?: Prisma.ActionItemUpsertWithWhereUniqueWithoutMeetingInput | Prisma.ActionItemUpsertWithWhereUniqueWithoutMeetingInput[]
  createMany?: Prisma.ActionItemCreateManyMeetingInputEnvelope
  set?: Prisma.ActionItemWhereUniqueInput | Prisma.ActionItemWhereUniqueInput[]
  disconnect?: Prisma.ActionItemWhereUniqueInput | Prisma.ActionItemWhereUniqueInput[]
  delete?: Prisma.ActionItemWhereUniqueInput | Prisma.ActionItemWhereUniqueInput[]
  connect?: Prisma.ActionItemWhereUniqueInput | Prisma.ActionItemWhereUniqueInput[]
  update?: Prisma.ActionItemUpdateWithWhereUniqueWithoutMeetingInput | Prisma.ActionItemUpdateWithWhereUniqueWithoutMeetingInput[]
  updateMany?: Prisma.ActionItemUpdateManyWithWhereWithoutMeetingInput | Prisma.ActionItemUpdateManyWithWhereWithoutMeetingInput[]
  deleteMany?: Prisma.ActionItemScalarWhereInput | Prisma.ActionItemScalarWhereInput[]
}

export type ActionItemUncheckedUpdateManyWithoutMeetingNestedInput = {
  create?: Prisma.XOR<Prisma.ActionItemCreateWithoutMeetingInput, Prisma.ActionItemUncheckedCreateWithoutMeetingInput> | Prisma.ActionItemCreateWithoutMeetingInput[] | Prisma.ActionItemUncheckedCreateWithoutMeetingInput[]
  connectOrCreate?: Prisma.ActionItemCreateOrConnectWithoutMeetingInput | Prisma.ActionItemCreateOrConnectWithoutMeetingInput[]
  upsert?: Prisma.ActionItemUpsertWithWhereUniqueWithoutMeetingInput | Prisma.ActionItemUpsertWithWhereUniqueWithoutMeetingInput[]
  createMany?: Prisma.ActionItemCreateManyMeetingInputEnvelope
  set?: Prisma.ActionItemWhereUniqueInput | Prisma.ActionItemWhereUniqueInput[]
  disconnect?: Prisma.ActionItemWhereUniqueInput | Prisma.ActionItemWhereUniqueInput[]
  delete?: Prisma.ActionItemWhereUniqueInput | Prisma.ActionItemWhereUniqueInput[]
  connect?: Prisma.ActionItemWhereUniqueInput | Prisma.ActionItemWhereUniqueInput[]
  update?: Prisma.ActionItemUpdateWithWhereUniqueWithoutMeetingInput | Prisma.ActionItemUpdateWithWhereUniqueWithoutMeetingInput[]
  updateMany?: Prisma.ActionItemUpdateManyWithWhereWithoutMeetingInput | Prisma.ActionItemUpdateManyWithWhereWithoutMeetingInput[]
  deleteMany?: Prisma.ActionItemScalarWhereInput | Prisma.ActionItemScalarWhereInput[]
}

export type EnumActionPriorityFieldUpdateOperationsInput = {
  set?: $Enums.ActionPriority
}

export type EnumActionStatusFieldUpdateOperationsInput = {
  set?: $Enums.ActionStatus
}

export type ActionItemCreateWithoutAssigneeInput = {
  id?: string
  description: string
  dueDate?: Date | string | null
  priority?: $Enums.ActionPriority
  status?: $Enums.ActionStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  meeting: Prisma.MeetingCreateNestedOneWithoutActionItemsInput
}

export type ActionItemUncheckedCreateWithoutAssigneeInput = {
  id?: string
  meetingId: string
  description: string
  dueDate?: Date | string | null
  priority?: $Enums.ActionPriority
  status?: $Enums.ActionStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ActionItemCreateOrConnectWithoutAssigneeInput = {
  where: Prisma.ActionItemWhereUniqueInput
  create: Prisma.XOR<Prisma.ActionItemCreateWithoutAssigneeInput, Prisma.ActionItemUncheckedCreateWithoutAssigneeInput>
}

export type ActionItemCreateManyAssigneeInputEnvelope = {
  data: Prisma.ActionItemCreateManyAssigneeInput | Prisma.ActionItemCreateManyAssigneeInput[]
  skipDuplicates?: boolean
}

export type ActionItemUpsertWithWhereUniqueWithoutAssigneeInput = {
  where: Prisma.ActionItemWhereUniqueInput
  update: Prisma.XOR<Prisma.ActionItemUpdateWithoutAssigneeInput, Prisma.ActionItemUncheckedUpdateWithoutAssigneeInput>
  create: Prisma.XOR<Prisma.ActionItemCreateWithoutAssigneeInput, Prisma.ActionItemUncheckedCreateWithoutAssigneeInput>
}

export type ActionItemUpdateWithWhereUniqueWithoutAssigneeInput = {
  where: Prisma.ActionItemWhereUniqueInput
  data: Prisma.XOR<Prisma.ActionItemUpdateWithoutAssigneeInput, Prisma.ActionItemUncheckedUpdateWithoutAssigneeInput>
}

export type ActionItemUpdateManyWithWhereWithoutAssigneeInput = {
  where: Prisma.ActionItemScalarWhereInput
  data: Prisma.XOR<Prisma.ActionItemUpdateManyMutationInput, Prisma.ActionItemUncheckedUpdateManyWithoutAssigneeInput>
}

export type ActionItemScalarWhereInput = {
  AND?: Prisma.ActionItemScalarWhereInput | Prisma.ActionItemScalarWhereInput[]
  OR?: Prisma.ActionItemScalarWhereInput[]
  NOT?: Prisma.ActionItemScalarWhereInput | Prisma.ActionItemScalarWhereInput[]
  id?: Prisma.StringFilter<"ActionItem"> | string
  meetingId?: Prisma.StringFilter<"ActionItem"> | string
  description?: Prisma.StringFilter<"ActionItem"> | string
  assigneeId?: Prisma.StringNullableFilter<"ActionItem"> | string | null
  dueDate?: Prisma.DateTimeNullableFilter<"ActionItem"> | Date | string | null
  priority?: Prisma.EnumActionPriorityFilter<"ActionItem"> | $Enums.ActionPriority
  status?: Prisma.EnumActionStatusFilter<"ActionItem"> | $Enums.ActionStatus
  createdAt?: Prisma.DateTimeFilter<"ActionItem"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ActionItem"> | Date | string
}

export type ActionItemCreateWithoutMeetingInput = {
  id?: string
  description: string
  dueDate?: Date | string | null
  priority?: $Enums.ActionPriority
  status?: $Enums.ActionStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  assignee?: Prisma.UserCreateNestedOneWithoutActionItemsInput
}

export type ActionItemUncheckedCreateWithoutMeetingInput = {
  id?: string
  description: string
  assigneeId?: string | null
  dueDate?: Date | string | null
  priority?: $Enums.ActionPriority
  status?: $Enums.ActionStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ActionItemCreateOrConnectWithoutMeetingInput = {
  where: Prisma.ActionItemWhereUniqueInput
  create: Prisma.XOR<Prisma.ActionItemCreateWithoutMeetingInput, Prisma.ActionItemUncheckedCreateWithoutMeetingInput>
}

export type ActionItemCreateManyMeetingInputEnvelope = {
  data: Prisma.ActionItemCreateManyMeetingInput | Prisma.ActionItemCreateManyMeetingInput[]
  skipDuplicates?: boolean
}

export type ActionItemUpsertWithWhereUniqueWithoutMeetingInput = {
  where: Prisma.ActionItemWhereUniqueInput
  update: Prisma.XOR<Prisma.ActionItemUpdateWithoutMeetingInput, Prisma.ActionItemUncheckedUpdateWithoutMeetingInput>
  create: Prisma.XOR<Prisma.ActionItemCreateWithoutMeetingInput, Prisma.ActionItemUncheckedCreateWithoutMeetingInput>
}

export type ActionItemUpdateWithWhereUniqueWithoutMeetingInput = {
  where: Prisma.ActionItemWhereUniqueInput
  data: Prisma.XOR<Prisma.ActionItemUpdateWithoutMeetingInput, Prisma.ActionItemUncheckedUpdateWithoutMeetingInput>
}

export type ActionItemUpdateManyWithWhereWithoutMeetingInput = {
  where: Prisma.ActionItemScalarWhereInput
  data: Prisma.XOR<Prisma.ActionItemUpdateManyMutationInput, Prisma.ActionItemUncheckedUpdateManyWithoutMeetingInput>
}

export type ActionItemCreateManyAssigneeInput = {
  id?: string
  meetingId: string
  description: string
  dueDate?: Date | string | null
  priority?: $Enums.ActionPriority
  status?: $Enums.ActionStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ActionItemUpdateWithoutAssigneeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  dueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  priority?: Prisma.EnumActionPriorityFieldUpdateOperationsInput | $Enums.ActionPriority
  status?: Prisma.EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  meeting?: Prisma.MeetingUpdateOneRequiredWithoutActionItemsNestedInput
}

export type ActionItemUncheckedUpdateWithoutAssigneeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meetingId?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  dueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  priority?: Prisma.EnumActionPriorityFieldUpdateOperationsInput | $Enums.ActionPriority
  status?: Prisma.EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ActionItemUncheckedUpdateManyWithoutAssigneeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meetingId?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  dueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  priority?: Prisma.EnumActionPriorityFieldUpdateOperationsInput | $Enums.ActionPriority
  status?: Prisma.EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ActionItemCreateManyMeetingInput = {
  id?: string
  description: string
  assigneeId?: string | null
  dueDate?: Date | string | null
  priority?: $Enums.ActionPriority
  status?: $Enums.ActionStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ActionItemUpdateWithoutMeetingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  dueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  priority?: Prisma.EnumActionPriorityFieldUpdateOperationsInput | $Enums.ActionPriority
  status?: Prisma.EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  assignee?: Prisma.UserUpdateOneWithoutActionItemsNestedInput
}

export type ActionItemUncheckedUpdateWithoutMeetingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  assigneeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  priority?: Prisma.EnumActionPriorityFieldUpdateOperationsInput | $Enums.ActionPriority
  status?: Prisma.EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ActionItemUncheckedUpdateManyWithoutMeetingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  assigneeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  priority?: Prisma.EnumActionPriorityFieldUpdateOperationsInput | $Enums.ActionPriority
  status?: Prisma.EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ActionItemSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meetingId?: boolean
  description?: boolean
  assigneeId?: boolean
  dueDate?: boolean
  priority?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
  assignee?: boolean | Prisma.ActionItem$assigneeArgs<ExtArgs>
}, ExtArgs["result"]["actionItem"]>

export type ActionItemSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meetingId?: boolean
  description?: boolean
  assigneeId?: boolean
  dueDate?: boolean
  priority?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
  assignee?: boolean | Prisma.ActionItem$assigneeArgs<ExtArgs>
}, ExtArgs["result"]["actionItem"]>

export type ActionItemSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meetingId?: boolean
  description?: boolean
  assigneeId?: boolean
  dueDate?: boolean
  priority?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
  assignee?: boolean | Prisma.ActionItem$assigneeArgs<ExtArgs>
}, ExtArgs["result"]["actionItem"]>

export type ActionItemSelectScalar = {
  id?: boolean
  meetingId?: boolean
  description?: boolean
  assigneeId?: boolean
  dueDate?: boolean
  priority?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ActionItemOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "meetingId" | "description" | "assigneeId" | "dueDate" | "priority" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["actionItem"]>
export type ActionItemInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
  assignee?: boolean | Prisma.ActionItem$assigneeArgs<ExtArgs>
}
export type ActionItemIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
  assignee?: boolean | Prisma.ActionItem$assigneeArgs<ExtArgs>
}
export type ActionItemIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
  assignee?: boolean | Prisma.ActionItem$assigneeArgs<ExtArgs>
}

export type $ActionItemPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ActionItem"
  objects: {
    meeting: Prisma.$MeetingPayload<ExtArgs>
    assignee: Prisma.$UserPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    meetingId: string
    description: string
    assigneeId: string | null
    dueDate: Date | null
    priority: $Enums.ActionPriority
    status: $Enums.ActionStatus
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["actionItem"]>
  composites: {}
}

export type ActionItemGetPayload<S extends boolean | null | undefined | ActionItemDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ActionItemPayload, S>

export type ActionItemCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ActionItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ActionItemCountAggregateInputType | true
  }

export interface ActionItemDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActionItem'], meta: { name: 'ActionItem' } }
  /**
   * Find zero or one ActionItem that matches the filter.
   * @param {ActionItemFindUniqueArgs} args - Arguments to find a ActionItem
   * @example
   * // Get one ActionItem
   * const actionItem = await prisma.actionItem.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ActionItemFindUniqueArgs>(args: Prisma.SelectSubset<T, ActionItemFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ActionItemClient<runtime.Types.Result.GetResult<Prisma.$ActionItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ActionItem that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ActionItemFindUniqueOrThrowArgs} args - Arguments to find a ActionItem
   * @example
   * // Get one ActionItem
   * const actionItem = await prisma.actionItem.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ActionItemFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ActionItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ActionItemClient<runtime.Types.Result.GetResult<Prisma.$ActionItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ActionItem that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActionItemFindFirstArgs} args - Arguments to find a ActionItem
   * @example
   * // Get one ActionItem
   * const actionItem = await prisma.actionItem.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ActionItemFindFirstArgs>(args?: Prisma.SelectSubset<T, ActionItemFindFirstArgs<ExtArgs>>): Prisma.Prisma__ActionItemClient<runtime.Types.Result.GetResult<Prisma.$ActionItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ActionItem that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActionItemFindFirstOrThrowArgs} args - Arguments to find a ActionItem
   * @example
   * // Get one ActionItem
   * const actionItem = await prisma.actionItem.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ActionItemFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ActionItemFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ActionItemClient<runtime.Types.Result.GetResult<Prisma.$ActionItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ActionItems that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActionItemFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ActionItems
   * const actionItems = await prisma.actionItem.findMany()
   * 
   * // Get first 10 ActionItems
   * const actionItems = await prisma.actionItem.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const actionItemWithIdOnly = await prisma.actionItem.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ActionItemFindManyArgs>(args?: Prisma.SelectSubset<T, ActionItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ActionItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ActionItem.
   * @param {ActionItemCreateArgs} args - Arguments to create a ActionItem.
   * @example
   * // Create one ActionItem
   * const ActionItem = await prisma.actionItem.create({
   *   data: {
   *     // ... data to create a ActionItem
   *   }
   * })
   * 
   */
  create<T extends ActionItemCreateArgs>(args: Prisma.SelectSubset<T, ActionItemCreateArgs<ExtArgs>>): Prisma.Prisma__ActionItemClient<runtime.Types.Result.GetResult<Prisma.$ActionItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ActionItems.
   * @param {ActionItemCreateManyArgs} args - Arguments to create many ActionItems.
   * @example
   * // Create many ActionItems
   * const actionItem = await prisma.actionItem.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ActionItemCreateManyArgs>(args?: Prisma.SelectSubset<T, ActionItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ActionItems and returns the data saved in the database.
   * @param {ActionItemCreateManyAndReturnArgs} args - Arguments to create many ActionItems.
   * @example
   * // Create many ActionItems
   * const actionItem = await prisma.actionItem.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ActionItems and only return the `id`
   * const actionItemWithIdOnly = await prisma.actionItem.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ActionItemCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ActionItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ActionItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ActionItem.
   * @param {ActionItemDeleteArgs} args - Arguments to delete one ActionItem.
   * @example
   * // Delete one ActionItem
   * const ActionItem = await prisma.actionItem.delete({
   *   where: {
   *     // ... filter to delete one ActionItem
   *   }
   * })
   * 
   */
  delete<T extends ActionItemDeleteArgs>(args: Prisma.SelectSubset<T, ActionItemDeleteArgs<ExtArgs>>): Prisma.Prisma__ActionItemClient<runtime.Types.Result.GetResult<Prisma.$ActionItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ActionItem.
   * @param {ActionItemUpdateArgs} args - Arguments to update one ActionItem.
   * @example
   * // Update one ActionItem
   * const actionItem = await prisma.actionItem.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ActionItemUpdateArgs>(args: Prisma.SelectSubset<T, ActionItemUpdateArgs<ExtArgs>>): Prisma.Prisma__ActionItemClient<runtime.Types.Result.GetResult<Prisma.$ActionItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ActionItems.
   * @param {ActionItemDeleteManyArgs} args - Arguments to filter ActionItems to delete.
   * @example
   * // Delete a few ActionItems
   * const { count } = await prisma.actionItem.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ActionItemDeleteManyArgs>(args?: Prisma.SelectSubset<T, ActionItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ActionItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActionItemUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ActionItems
   * const actionItem = await prisma.actionItem.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ActionItemUpdateManyArgs>(args: Prisma.SelectSubset<T, ActionItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ActionItems and returns the data updated in the database.
   * @param {ActionItemUpdateManyAndReturnArgs} args - Arguments to update many ActionItems.
   * @example
   * // Update many ActionItems
   * const actionItem = await prisma.actionItem.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ActionItems and only return the `id`
   * const actionItemWithIdOnly = await prisma.actionItem.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ActionItemUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ActionItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ActionItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ActionItem.
   * @param {ActionItemUpsertArgs} args - Arguments to update or create a ActionItem.
   * @example
   * // Update or create a ActionItem
   * const actionItem = await prisma.actionItem.upsert({
   *   create: {
   *     // ... data to create a ActionItem
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ActionItem we want to update
   *   }
   * })
   */
  upsert<T extends ActionItemUpsertArgs>(args: Prisma.SelectSubset<T, ActionItemUpsertArgs<ExtArgs>>): Prisma.Prisma__ActionItemClient<runtime.Types.Result.GetResult<Prisma.$ActionItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ActionItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActionItemCountArgs} args - Arguments to filter ActionItems to count.
   * @example
   * // Count the number of ActionItems
   * const count = await prisma.actionItem.count({
   *   where: {
   *     // ... the filter for the ActionItems we want to count
   *   }
   * })
  **/
  count<T extends ActionItemCountArgs>(
    args?: Prisma.Subset<T, ActionItemCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ActionItemCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ActionItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActionItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ActionItemAggregateArgs>(args: Prisma.Subset<T, ActionItemAggregateArgs>): Prisma.PrismaPromise<GetActionItemAggregateType<T>>

  /**
   * Group by ActionItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActionItemGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ActionItemGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ActionItemGroupByArgs['orderBy'] }
      : { orderBy?: ActionItemGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ActionItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActionItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ActionItem model
 */
readonly fields: ActionItemFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ActionItem.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ActionItemClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  meeting<T extends Prisma.MeetingDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MeetingDefaultArgs<ExtArgs>>): Prisma.Prisma__MeetingClient<runtime.Types.Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  assignee<T extends Prisma.ActionItem$assigneeArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ActionItem$assigneeArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ActionItem model
 */
export interface ActionItemFieldRefs {
  readonly id: Prisma.FieldRef<"ActionItem", 'String'>
  readonly meetingId: Prisma.FieldRef<"ActionItem", 'String'>
  readonly description: Prisma.FieldRef<"ActionItem", 'String'>
  readonly assigneeId: Prisma.FieldRef<"ActionItem", 'String'>
  readonly dueDate: Prisma.FieldRef<"ActionItem", 'DateTime'>
  readonly priority: Prisma.FieldRef<"ActionItem", 'ActionPriority'>
  readonly status: Prisma.FieldRef<"ActionItem", 'ActionStatus'>
  readonly createdAt: Prisma.FieldRef<"ActionItem", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ActionItem", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ActionItem findUnique
 */
export type ActionItemFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ActionItem
   */
  select?: Prisma.ActionItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ActionItem
   */
  omit?: Prisma.ActionItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActionItemInclude<ExtArgs> | null
  /**
   * Filter, which ActionItem to fetch.
   */
  where: Prisma.ActionItemWhereUniqueInput
}

/**
 * ActionItem findUniqueOrThrow
 */
export type ActionItemFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ActionItem
   */
  select?: Prisma.ActionItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ActionItem
   */
  omit?: Prisma.ActionItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActionItemInclude<ExtArgs> | null
  /**
   * Filter, which ActionItem to fetch.
   */
  where: Prisma.ActionItemWhereUniqueInput
}

/**
 * ActionItem findFirst
 */
export type ActionItemFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ActionItem
   */
  select?: Prisma.ActionItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ActionItem
   */
  omit?: Prisma.ActionItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActionItemInclude<ExtArgs> | null
  /**
   * Filter, which ActionItem to fetch.
   */
  where?: Prisma.ActionItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ActionItems to fetch.
   */
  orderBy?: Prisma.ActionItemOrderByWithRelationInput | Prisma.ActionItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ActionItems.
   */
  cursor?: Prisma.ActionItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ActionItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ActionItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ActionItems.
   */
  distinct?: Prisma.ActionItemScalarFieldEnum | Prisma.ActionItemScalarFieldEnum[]
}

/**
 * ActionItem findFirstOrThrow
 */
export type ActionItemFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ActionItem
   */
  select?: Prisma.ActionItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ActionItem
   */
  omit?: Prisma.ActionItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActionItemInclude<ExtArgs> | null
  /**
   * Filter, which ActionItem to fetch.
   */
  where?: Prisma.ActionItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ActionItems to fetch.
   */
  orderBy?: Prisma.ActionItemOrderByWithRelationInput | Prisma.ActionItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ActionItems.
   */
  cursor?: Prisma.ActionItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ActionItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ActionItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ActionItems.
   */
  distinct?: Prisma.ActionItemScalarFieldEnum | Prisma.ActionItemScalarFieldEnum[]
}

/**
 * ActionItem findMany
 */
export type ActionItemFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ActionItem
   */
  select?: Prisma.ActionItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ActionItem
   */
  omit?: Prisma.ActionItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActionItemInclude<ExtArgs> | null
  /**
   * Filter, which ActionItems to fetch.
   */
  where?: Prisma.ActionItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ActionItems to fetch.
   */
  orderBy?: Prisma.ActionItemOrderByWithRelationInput | Prisma.ActionItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ActionItems.
   */
  cursor?: Prisma.ActionItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ActionItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ActionItems.
   */
  skip?: number
  distinct?: Prisma.ActionItemScalarFieldEnum | Prisma.ActionItemScalarFieldEnum[]
}

/**
 * ActionItem create
 */
export type ActionItemCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ActionItem
   */
  select?: Prisma.ActionItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ActionItem
   */
  omit?: Prisma.ActionItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActionItemInclude<ExtArgs> | null
  /**
   * The data needed to create a ActionItem.
   */
  data: Prisma.XOR<Prisma.ActionItemCreateInput, Prisma.ActionItemUncheckedCreateInput>
}

/**
 * ActionItem createMany
 */
export type ActionItemCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ActionItems.
   */
  data: Prisma.ActionItemCreateManyInput | Prisma.ActionItemCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ActionItem createManyAndReturn
 */
export type ActionItemCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ActionItem
   */
  select?: Prisma.ActionItemSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ActionItem
   */
  omit?: Prisma.ActionItemOmit<ExtArgs> | null
  /**
   * The data used to create many ActionItems.
   */
  data: Prisma.ActionItemCreateManyInput | Prisma.ActionItemCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActionItemIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ActionItem update
 */
export type ActionItemUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ActionItem
   */
  select?: Prisma.ActionItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ActionItem
   */
  omit?: Prisma.ActionItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActionItemInclude<ExtArgs> | null
  /**
   * The data needed to update a ActionItem.
   */
  data: Prisma.XOR<Prisma.ActionItemUpdateInput, Prisma.ActionItemUncheckedUpdateInput>
  /**
   * Choose, which ActionItem to update.
   */
  where: Prisma.ActionItemWhereUniqueInput
}

/**
 * ActionItem updateMany
 */
export type ActionItemUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ActionItems.
   */
  data: Prisma.XOR<Prisma.ActionItemUpdateManyMutationInput, Prisma.ActionItemUncheckedUpdateManyInput>
  /**
   * Filter which ActionItems to update
   */
  where?: Prisma.ActionItemWhereInput
  /**
   * Limit how many ActionItems to update.
   */
  limit?: number
}

/**
 * ActionItem updateManyAndReturn
 */
export type ActionItemUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ActionItem
   */
  select?: Prisma.ActionItemSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ActionItem
   */
  omit?: Prisma.ActionItemOmit<ExtArgs> | null
  /**
   * The data used to update ActionItems.
   */
  data: Prisma.XOR<Prisma.ActionItemUpdateManyMutationInput, Prisma.ActionItemUncheckedUpdateManyInput>
  /**
   * Filter which ActionItems to update
   */
  where?: Prisma.ActionItemWhereInput
  /**
   * Limit how many ActionItems to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActionItemIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ActionItem upsert
 */
export type ActionItemUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ActionItem
   */
  select?: Prisma.ActionItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ActionItem
   */
  omit?: Prisma.ActionItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActionItemInclude<ExtArgs> | null
  /**
   * The filter to search for the ActionItem to update in case it exists.
   */
  where: Prisma.ActionItemWhereUniqueInput
  /**
   * In case the ActionItem found by the `where` argument doesn't exist, create a new ActionItem with this data.
   */
  create: Prisma.XOR<Prisma.ActionItemCreateInput, Prisma.ActionItemUncheckedCreateInput>
  /**
   * In case the ActionItem was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ActionItemUpdateInput, Prisma.ActionItemUncheckedUpdateInput>
}

/**
 * ActionItem delete
 */
export type ActionItemDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ActionItem
   */
  select?: Prisma.ActionItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ActionItem
   */
  omit?: Prisma.ActionItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActionItemInclude<ExtArgs> | null
  /**
   * Filter which ActionItem to delete.
   */
  where: Prisma.ActionItemWhereUniqueInput
}

/**
 * ActionItem deleteMany
 */
export type ActionItemDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ActionItems to delete
   */
  where?: Prisma.ActionItemWhereInput
  /**
   * Limit how many ActionItems to delete.
   */
  limit?: number
}

/**
 * ActionItem.assignee
 */
export type ActionItem$assigneeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
}

/**
 * ActionItem without action
 */
export type ActionItemDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ActionItem
   */
  select?: Prisma.ActionItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ActionItem
   */
  omit?: Prisma.ActionItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActionItemInclude<ExtArgs> | null
}
