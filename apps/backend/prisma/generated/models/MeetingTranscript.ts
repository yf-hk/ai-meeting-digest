
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `MeetingTranscript` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MeetingTranscript
 * 
 */
export type MeetingTranscriptModel = runtime.Types.Result.DefaultSelection<Prisma.$MeetingTranscriptPayload>

export type AggregateMeetingTranscript = {
  _count: MeetingTranscriptCountAggregateOutputType | null
  _avg: MeetingTranscriptAvgAggregateOutputType | null
  _sum: MeetingTranscriptSumAggregateOutputType | null
  _min: MeetingTranscriptMinAggregateOutputType | null
  _max: MeetingTranscriptMaxAggregateOutputType | null
}

export type MeetingTranscriptAvgAggregateOutputType = {
  confidenceScore: number | null
  processingTime: number | null
}

export type MeetingTranscriptSumAggregateOutputType = {
  confidenceScore: number | null
  processingTime: number | null
}

export type MeetingTranscriptMinAggregateOutputType = {
  id: string | null
  meetingId: string | null
  content: string | null
  confidenceScore: number | null
  processingTime: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MeetingTranscriptMaxAggregateOutputType = {
  id: string | null
  meetingId: string | null
  content: string | null
  confidenceScore: number | null
  processingTime: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MeetingTranscriptCountAggregateOutputType = {
  id: number
  meetingId: number
  content: number
  speakerLabels: number
  confidenceScore: number
  processingTime: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type MeetingTranscriptAvgAggregateInputType = {
  confidenceScore?: true
  processingTime?: true
}

export type MeetingTranscriptSumAggregateInputType = {
  confidenceScore?: true
  processingTime?: true
}

export type MeetingTranscriptMinAggregateInputType = {
  id?: true
  meetingId?: true
  content?: true
  confidenceScore?: true
  processingTime?: true
  createdAt?: true
  updatedAt?: true
}

export type MeetingTranscriptMaxAggregateInputType = {
  id?: true
  meetingId?: true
  content?: true
  confidenceScore?: true
  processingTime?: true
  createdAt?: true
  updatedAt?: true
}

export type MeetingTranscriptCountAggregateInputType = {
  id?: true
  meetingId?: true
  content?: true
  speakerLabels?: true
  confidenceScore?: true
  processingTime?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type MeetingTranscriptAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MeetingTranscript to aggregate.
   */
  where?: Prisma.MeetingTranscriptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MeetingTranscripts to fetch.
   */
  orderBy?: Prisma.MeetingTranscriptOrderByWithRelationInput | Prisma.MeetingTranscriptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MeetingTranscriptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MeetingTranscripts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MeetingTranscripts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MeetingTranscripts
  **/
  _count?: true | MeetingTranscriptCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MeetingTranscriptAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MeetingTranscriptSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MeetingTranscriptMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MeetingTranscriptMaxAggregateInputType
}

export type GetMeetingTranscriptAggregateType<T extends MeetingTranscriptAggregateArgs> = {
      [P in keyof T & keyof AggregateMeetingTranscript]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMeetingTranscript[P]>
    : Prisma.GetScalarType<T[P], AggregateMeetingTranscript[P]>
}




export type MeetingTranscriptGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MeetingTranscriptWhereInput
  orderBy?: Prisma.MeetingTranscriptOrderByWithAggregationInput | Prisma.MeetingTranscriptOrderByWithAggregationInput[]
  by: Prisma.MeetingTranscriptScalarFieldEnum[] | Prisma.MeetingTranscriptScalarFieldEnum
  having?: Prisma.MeetingTranscriptScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MeetingTranscriptCountAggregateInputType | true
  _avg?: MeetingTranscriptAvgAggregateInputType
  _sum?: MeetingTranscriptSumAggregateInputType
  _min?: MeetingTranscriptMinAggregateInputType
  _max?: MeetingTranscriptMaxAggregateInputType
}

export type MeetingTranscriptGroupByOutputType = {
  id: string
  meetingId: string
  content: string
  speakerLabels: runtime.JsonValue | null
  confidenceScore: number | null
  processingTime: number | null
  createdAt: Date
  updatedAt: Date
  _count: MeetingTranscriptCountAggregateOutputType | null
  _avg: MeetingTranscriptAvgAggregateOutputType | null
  _sum: MeetingTranscriptSumAggregateOutputType | null
  _min: MeetingTranscriptMinAggregateOutputType | null
  _max: MeetingTranscriptMaxAggregateOutputType | null
}

type GetMeetingTranscriptGroupByPayload<T extends MeetingTranscriptGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MeetingTranscriptGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MeetingTranscriptGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MeetingTranscriptGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MeetingTranscriptGroupByOutputType[P]>
      }
    >
  > 



export type MeetingTranscriptWhereInput = {
  AND?: Prisma.MeetingTranscriptWhereInput | Prisma.MeetingTranscriptWhereInput[]
  OR?: Prisma.MeetingTranscriptWhereInput[]
  NOT?: Prisma.MeetingTranscriptWhereInput | Prisma.MeetingTranscriptWhereInput[]
  id?: Prisma.StringFilter<"MeetingTranscript"> | string
  meetingId?: Prisma.StringFilter<"MeetingTranscript"> | string
  content?: Prisma.StringFilter<"MeetingTranscript"> | string
  speakerLabels?: Prisma.JsonNullableFilter<"MeetingTranscript">
  confidenceScore?: Prisma.FloatNullableFilter<"MeetingTranscript"> | number | null
  processingTime?: Prisma.IntNullableFilter<"MeetingTranscript"> | number | null
  createdAt?: Prisma.DateTimeFilter<"MeetingTranscript"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MeetingTranscript"> | Date | string
  meeting?: Prisma.XOR<Prisma.MeetingScalarRelationFilter, Prisma.MeetingWhereInput>
}

export type MeetingTranscriptOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  speakerLabels?: Prisma.SortOrderInput | Prisma.SortOrder
  confidenceScore?: Prisma.SortOrderInput | Prisma.SortOrder
  processingTime?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  meeting?: Prisma.MeetingOrderByWithRelationInput
}

export type MeetingTranscriptWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  meetingId?: string
  AND?: Prisma.MeetingTranscriptWhereInput | Prisma.MeetingTranscriptWhereInput[]
  OR?: Prisma.MeetingTranscriptWhereInput[]
  NOT?: Prisma.MeetingTranscriptWhereInput | Prisma.MeetingTranscriptWhereInput[]
  content?: Prisma.StringFilter<"MeetingTranscript"> | string
  speakerLabels?: Prisma.JsonNullableFilter<"MeetingTranscript">
  confidenceScore?: Prisma.FloatNullableFilter<"MeetingTranscript"> | number | null
  processingTime?: Prisma.IntNullableFilter<"MeetingTranscript"> | number | null
  createdAt?: Prisma.DateTimeFilter<"MeetingTranscript"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MeetingTranscript"> | Date | string
  meeting?: Prisma.XOR<Prisma.MeetingScalarRelationFilter, Prisma.MeetingWhereInput>
}, "id" | "meetingId">

export type MeetingTranscriptOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  speakerLabels?: Prisma.SortOrderInput | Prisma.SortOrder
  confidenceScore?: Prisma.SortOrderInput | Prisma.SortOrder
  processingTime?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.MeetingTranscriptCountOrderByAggregateInput
  _avg?: Prisma.MeetingTranscriptAvgOrderByAggregateInput
  _max?: Prisma.MeetingTranscriptMaxOrderByAggregateInput
  _min?: Prisma.MeetingTranscriptMinOrderByAggregateInput
  _sum?: Prisma.MeetingTranscriptSumOrderByAggregateInput
}

export type MeetingTranscriptScalarWhereWithAggregatesInput = {
  AND?: Prisma.MeetingTranscriptScalarWhereWithAggregatesInput | Prisma.MeetingTranscriptScalarWhereWithAggregatesInput[]
  OR?: Prisma.MeetingTranscriptScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MeetingTranscriptScalarWhereWithAggregatesInput | Prisma.MeetingTranscriptScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"MeetingTranscript"> | string
  meetingId?: Prisma.StringWithAggregatesFilter<"MeetingTranscript"> | string
  content?: Prisma.StringWithAggregatesFilter<"MeetingTranscript"> | string
  speakerLabels?: Prisma.JsonNullableWithAggregatesFilter<"MeetingTranscript">
  confidenceScore?: Prisma.FloatNullableWithAggregatesFilter<"MeetingTranscript"> | number | null
  processingTime?: Prisma.IntNullableWithAggregatesFilter<"MeetingTranscript"> | number | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"MeetingTranscript"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"MeetingTranscript"> | Date | string
}

export type MeetingTranscriptCreateInput = {
  id?: string
  content: string
  speakerLabels?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  confidenceScore?: number | null
  processingTime?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  meeting: Prisma.MeetingCreateNestedOneWithoutTranscriptInput
}

export type MeetingTranscriptUncheckedCreateInput = {
  id?: string
  meetingId: string
  content: string
  speakerLabels?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  confidenceScore?: number | null
  processingTime?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MeetingTranscriptUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  speakerLabels?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  confidenceScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  processingTime?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  meeting?: Prisma.MeetingUpdateOneRequiredWithoutTranscriptNestedInput
}

export type MeetingTranscriptUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meetingId?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  speakerLabels?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  confidenceScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  processingTime?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MeetingTranscriptCreateManyInput = {
  id?: string
  meetingId: string
  content: string
  speakerLabels?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  confidenceScore?: number | null
  processingTime?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MeetingTranscriptUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  speakerLabels?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  confidenceScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  processingTime?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MeetingTranscriptUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meetingId?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  speakerLabels?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  confidenceScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  processingTime?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MeetingTranscriptNullableScalarRelationFilter = {
  is?: Prisma.MeetingTranscriptWhereInput | null
  isNot?: Prisma.MeetingTranscriptWhereInput | null
}

export type MeetingTranscriptCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  speakerLabels?: Prisma.SortOrder
  confidenceScore?: Prisma.SortOrder
  processingTime?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MeetingTranscriptAvgOrderByAggregateInput = {
  confidenceScore?: Prisma.SortOrder
  processingTime?: Prisma.SortOrder
}

export type MeetingTranscriptMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  confidenceScore?: Prisma.SortOrder
  processingTime?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MeetingTranscriptMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  confidenceScore?: Prisma.SortOrder
  processingTime?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MeetingTranscriptSumOrderByAggregateInput = {
  confidenceScore?: Prisma.SortOrder
  processingTime?: Prisma.SortOrder
}

export type MeetingTranscriptCreateNestedOneWithoutMeetingInput = {
  create?: Prisma.XOR<Prisma.MeetingTranscriptCreateWithoutMeetingInput, Prisma.MeetingTranscriptUncheckedCreateWithoutMeetingInput>
  connectOrCreate?: Prisma.MeetingTranscriptCreateOrConnectWithoutMeetingInput
  connect?: Prisma.MeetingTranscriptWhereUniqueInput
}

export type MeetingTranscriptUncheckedCreateNestedOneWithoutMeetingInput = {
  create?: Prisma.XOR<Prisma.MeetingTranscriptCreateWithoutMeetingInput, Prisma.MeetingTranscriptUncheckedCreateWithoutMeetingInput>
  connectOrCreate?: Prisma.MeetingTranscriptCreateOrConnectWithoutMeetingInput
  connect?: Prisma.MeetingTranscriptWhereUniqueInput
}

export type MeetingTranscriptUpdateOneWithoutMeetingNestedInput = {
  create?: Prisma.XOR<Prisma.MeetingTranscriptCreateWithoutMeetingInput, Prisma.MeetingTranscriptUncheckedCreateWithoutMeetingInput>
  connectOrCreate?: Prisma.MeetingTranscriptCreateOrConnectWithoutMeetingInput
  upsert?: Prisma.MeetingTranscriptUpsertWithoutMeetingInput
  disconnect?: Prisma.MeetingTranscriptWhereInput | boolean
  delete?: Prisma.MeetingTranscriptWhereInput | boolean
  connect?: Prisma.MeetingTranscriptWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MeetingTranscriptUpdateToOneWithWhereWithoutMeetingInput, Prisma.MeetingTranscriptUpdateWithoutMeetingInput>, Prisma.MeetingTranscriptUncheckedUpdateWithoutMeetingInput>
}

export type MeetingTranscriptUncheckedUpdateOneWithoutMeetingNestedInput = {
  create?: Prisma.XOR<Prisma.MeetingTranscriptCreateWithoutMeetingInput, Prisma.MeetingTranscriptUncheckedCreateWithoutMeetingInput>
  connectOrCreate?: Prisma.MeetingTranscriptCreateOrConnectWithoutMeetingInput
  upsert?: Prisma.MeetingTranscriptUpsertWithoutMeetingInput
  disconnect?: Prisma.MeetingTranscriptWhereInput | boolean
  delete?: Prisma.MeetingTranscriptWhereInput | boolean
  connect?: Prisma.MeetingTranscriptWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MeetingTranscriptUpdateToOneWithWhereWithoutMeetingInput, Prisma.MeetingTranscriptUpdateWithoutMeetingInput>, Prisma.MeetingTranscriptUncheckedUpdateWithoutMeetingInput>
}

export type NullableFloatFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type MeetingTranscriptCreateWithoutMeetingInput = {
  id?: string
  content: string
  speakerLabels?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  confidenceScore?: number | null
  processingTime?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MeetingTranscriptUncheckedCreateWithoutMeetingInput = {
  id?: string
  content: string
  speakerLabels?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  confidenceScore?: number | null
  processingTime?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MeetingTranscriptCreateOrConnectWithoutMeetingInput = {
  where: Prisma.MeetingTranscriptWhereUniqueInput
  create: Prisma.XOR<Prisma.MeetingTranscriptCreateWithoutMeetingInput, Prisma.MeetingTranscriptUncheckedCreateWithoutMeetingInput>
}

export type MeetingTranscriptUpsertWithoutMeetingInput = {
  update: Prisma.XOR<Prisma.MeetingTranscriptUpdateWithoutMeetingInput, Prisma.MeetingTranscriptUncheckedUpdateWithoutMeetingInput>
  create: Prisma.XOR<Prisma.MeetingTranscriptCreateWithoutMeetingInput, Prisma.MeetingTranscriptUncheckedCreateWithoutMeetingInput>
  where?: Prisma.MeetingTranscriptWhereInput
}

export type MeetingTranscriptUpdateToOneWithWhereWithoutMeetingInput = {
  where?: Prisma.MeetingTranscriptWhereInput
  data: Prisma.XOR<Prisma.MeetingTranscriptUpdateWithoutMeetingInput, Prisma.MeetingTranscriptUncheckedUpdateWithoutMeetingInput>
}

export type MeetingTranscriptUpdateWithoutMeetingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  speakerLabels?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  confidenceScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  processingTime?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MeetingTranscriptUncheckedUpdateWithoutMeetingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  speakerLabels?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  confidenceScore?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  processingTime?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type MeetingTranscriptSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meetingId?: boolean
  content?: boolean
  speakerLabels?: boolean
  confidenceScore?: boolean
  processingTime?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
}, ExtArgs["result"]["meetingTranscript"]>

export type MeetingTranscriptSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meetingId?: boolean
  content?: boolean
  speakerLabels?: boolean
  confidenceScore?: boolean
  processingTime?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
}, ExtArgs["result"]["meetingTranscript"]>

export type MeetingTranscriptSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meetingId?: boolean
  content?: boolean
  speakerLabels?: boolean
  confidenceScore?: boolean
  processingTime?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
}, ExtArgs["result"]["meetingTranscript"]>

export type MeetingTranscriptSelectScalar = {
  id?: boolean
  meetingId?: boolean
  content?: boolean
  speakerLabels?: boolean
  confidenceScore?: boolean
  processingTime?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type MeetingTranscriptOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "meetingId" | "content" | "speakerLabels" | "confidenceScore" | "processingTime" | "createdAt" | "updatedAt", ExtArgs["result"]["meetingTranscript"]>
export type MeetingTranscriptInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
}
export type MeetingTranscriptIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
}
export type MeetingTranscriptIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
}

export type $MeetingTranscriptPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MeetingTranscript"
  objects: {
    meeting: Prisma.$MeetingPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    meetingId: string
    content: string
    speakerLabels: runtime.JsonValue | null
    confidenceScore: number | null
    processingTime: number | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["meetingTranscript"]>
  composites: {}
}

export type MeetingTranscriptGetPayload<S extends boolean | null | undefined | MeetingTranscriptDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MeetingTranscriptPayload, S>

export type MeetingTranscriptCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MeetingTranscriptFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MeetingTranscriptCountAggregateInputType | true
  }

export interface MeetingTranscriptDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MeetingTranscript'], meta: { name: 'MeetingTranscript' } }
  /**
   * Find zero or one MeetingTranscript that matches the filter.
   * @param {MeetingTranscriptFindUniqueArgs} args - Arguments to find a MeetingTranscript
   * @example
   * // Get one MeetingTranscript
   * const meetingTranscript = await prisma.meetingTranscript.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MeetingTranscriptFindUniqueArgs>(args: Prisma.SelectSubset<T, MeetingTranscriptFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MeetingTranscriptClient<runtime.Types.Result.GetResult<Prisma.$MeetingTranscriptPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MeetingTranscript that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MeetingTranscriptFindUniqueOrThrowArgs} args - Arguments to find a MeetingTranscript
   * @example
   * // Get one MeetingTranscript
   * const meetingTranscript = await prisma.meetingTranscript.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MeetingTranscriptFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MeetingTranscriptFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MeetingTranscriptClient<runtime.Types.Result.GetResult<Prisma.$MeetingTranscriptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MeetingTranscript that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingTranscriptFindFirstArgs} args - Arguments to find a MeetingTranscript
   * @example
   * // Get one MeetingTranscript
   * const meetingTranscript = await prisma.meetingTranscript.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MeetingTranscriptFindFirstArgs>(args?: Prisma.SelectSubset<T, MeetingTranscriptFindFirstArgs<ExtArgs>>): Prisma.Prisma__MeetingTranscriptClient<runtime.Types.Result.GetResult<Prisma.$MeetingTranscriptPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MeetingTranscript that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingTranscriptFindFirstOrThrowArgs} args - Arguments to find a MeetingTranscript
   * @example
   * // Get one MeetingTranscript
   * const meetingTranscript = await prisma.meetingTranscript.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MeetingTranscriptFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MeetingTranscriptFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MeetingTranscriptClient<runtime.Types.Result.GetResult<Prisma.$MeetingTranscriptPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MeetingTranscripts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingTranscriptFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MeetingTranscripts
   * const meetingTranscripts = await prisma.meetingTranscript.findMany()
   * 
   * // Get first 10 MeetingTranscripts
   * const meetingTranscripts = await prisma.meetingTranscript.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const meetingTranscriptWithIdOnly = await prisma.meetingTranscript.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MeetingTranscriptFindManyArgs>(args?: Prisma.SelectSubset<T, MeetingTranscriptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MeetingTranscriptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MeetingTranscript.
   * @param {MeetingTranscriptCreateArgs} args - Arguments to create a MeetingTranscript.
   * @example
   * // Create one MeetingTranscript
   * const MeetingTranscript = await prisma.meetingTranscript.create({
   *   data: {
   *     // ... data to create a MeetingTranscript
   *   }
   * })
   * 
   */
  create<T extends MeetingTranscriptCreateArgs>(args: Prisma.SelectSubset<T, MeetingTranscriptCreateArgs<ExtArgs>>): Prisma.Prisma__MeetingTranscriptClient<runtime.Types.Result.GetResult<Prisma.$MeetingTranscriptPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MeetingTranscripts.
   * @param {MeetingTranscriptCreateManyArgs} args - Arguments to create many MeetingTranscripts.
   * @example
   * // Create many MeetingTranscripts
   * const meetingTranscript = await prisma.meetingTranscript.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MeetingTranscriptCreateManyArgs>(args?: Prisma.SelectSubset<T, MeetingTranscriptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MeetingTranscripts and returns the data saved in the database.
   * @param {MeetingTranscriptCreateManyAndReturnArgs} args - Arguments to create many MeetingTranscripts.
   * @example
   * // Create many MeetingTranscripts
   * const meetingTranscript = await prisma.meetingTranscript.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MeetingTranscripts and only return the `id`
   * const meetingTranscriptWithIdOnly = await prisma.meetingTranscript.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MeetingTranscriptCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MeetingTranscriptCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MeetingTranscriptPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MeetingTranscript.
   * @param {MeetingTranscriptDeleteArgs} args - Arguments to delete one MeetingTranscript.
   * @example
   * // Delete one MeetingTranscript
   * const MeetingTranscript = await prisma.meetingTranscript.delete({
   *   where: {
   *     // ... filter to delete one MeetingTranscript
   *   }
   * })
   * 
   */
  delete<T extends MeetingTranscriptDeleteArgs>(args: Prisma.SelectSubset<T, MeetingTranscriptDeleteArgs<ExtArgs>>): Prisma.Prisma__MeetingTranscriptClient<runtime.Types.Result.GetResult<Prisma.$MeetingTranscriptPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MeetingTranscript.
   * @param {MeetingTranscriptUpdateArgs} args - Arguments to update one MeetingTranscript.
   * @example
   * // Update one MeetingTranscript
   * const meetingTranscript = await prisma.meetingTranscript.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MeetingTranscriptUpdateArgs>(args: Prisma.SelectSubset<T, MeetingTranscriptUpdateArgs<ExtArgs>>): Prisma.Prisma__MeetingTranscriptClient<runtime.Types.Result.GetResult<Prisma.$MeetingTranscriptPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MeetingTranscripts.
   * @param {MeetingTranscriptDeleteManyArgs} args - Arguments to filter MeetingTranscripts to delete.
   * @example
   * // Delete a few MeetingTranscripts
   * const { count } = await prisma.meetingTranscript.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MeetingTranscriptDeleteManyArgs>(args?: Prisma.SelectSubset<T, MeetingTranscriptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MeetingTranscripts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingTranscriptUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MeetingTranscripts
   * const meetingTranscript = await prisma.meetingTranscript.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MeetingTranscriptUpdateManyArgs>(args: Prisma.SelectSubset<T, MeetingTranscriptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MeetingTranscripts and returns the data updated in the database.
   * @param {MeetingTranscriptUpdateManyAndReturnArgs} args - Arguments to update many MeetingTranscripts.
   * @example
   * // Update many MeetingTranscripts
   * const meetingTranscript = await prisma.meetingTranscript.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MeetingTranscripts and only return the `id`
   * const meetingTranscriptWithIdOnly = await prisma.meetingTranscript.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MeetingTranscriptUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MeetingTranscriptUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MeetingTranscriptPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MeetingTranscript.
   * @param {MeetingTranscriptUpsertArgs} args - Arguments to update or create a MeetingTranscript.
   * @example
   * // Update or create a MeetingTranscript
   * const meetingTranscript = await prisma.meetingTranscript.upsert({
   *   create: {
   *     // ... data to create a MeetingTranscript
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MeetingTranscript we want to update
   *   }
   * })
   */
  upsert<T extends MeetingTranscriptUpsertArgs>(args: Prisma.SelectSubset<T, MeetingTranscriptUpsertArgs<ExtArgs>>): Prisma.Prisma__MeetingTranscriptClient<runtime.Types.Result.GetResult<Prisma.$MeetingTranscriptPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MeetingTranscripts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingTranscriptCountArgs} args - Arguments to filter MeetingTranscripts to count.
   * @example
   * // Count the number of MeetingTranscripts
   * const count = await prisma.meetingTranscript.count({
   *   where: {
   *     // ... the filter for the MeetingTranscripts we want to count
   *   }
   * })
  **/
  count<T extends MeetingTranscriptCountArgs>(
    args?: Prisma.Subset<T, MeetingTranscriptCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MeetingTranscriptCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MeetingTranscript.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingTranscriptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MeetingTranscriptAggregateArgs>(args: Prisma.Subset<T, MeetingTranscriptAggregateArgs>): Prisma.PrismaPromise<GetMeetingTranscriptAggregateType<T>>

  /**
   * Group by MeetingTranscript.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingTranscriptGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MeetingTranscriptGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MeetingTranscriptGroupByArgs['orderBy'] }
      : { orderBy?: MeetingTranscriptGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MeetingTranscriptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeetingTranscriptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MeetingTranscript model
 */
readonly fields: MeetingTranscriptFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MeetingTranscript.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MeetingTranscriptClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  meeting<T extends Prisma.MeetingDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MeetingDefaultArgs<ExtArgs>>): Prisma.Prisma__MeetingClient<runtime.Types.Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MeetingTranscript model
 */
export interface MeetingTranscriptFieldRefs {
  readonly id: Prisma.FieldRef<"MeetingTranscript", 'String'>
  readonly meetingId: Prisma.FieldRef<"MeetingTranscript", 'String'>
  readonly content: Prisma.FieldRef<"MeetingTranscript", 'String'>
  readonly speakerLabels: Prisma.FieldRef<"MeetingTranscript", 'Json'>
  readonly confidenceScore: Prisma.FieldRef<"MeetingTranscript", 'Float'>
  readonly processingTime: Prisma.FieldRef<"MeetingTranscript", 'Int'>
  readonly createdAt: Prisma.FieldRef<"MeetingTranscript", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"MeetingTranscript", 'DateTime'>
}
    

// Custom InputTypes
/**
 * MeetingTranscript findUnique
 */
export type MeetingTranscriptFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingTranscript
   */
  select?: Prisma.MeetingTranscriptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingTranscript
   */
  omit?: Prisma.MeetingTranscriptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingTranscriptInclude<ExtArgs> | null
  /**
   * Filter, which MeetingTranscript to fetch.
   */
  where: Prisma.MeetingTranscriptWhereUniqueInput
}

/**
 * MeetingTranscript findUniqueOrThrow
 */
export type MeetingTranscriptFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingTranscript
   */
  select?: Prisma.MeetingTranscriptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingTranscript
   */
  omit?: Prisma.MeetingTranscriptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingTranscriptInclude<ExtArgs> | null
  /**
   * Filter, which MeetingTranscript to fetch.
   */
  where: Prisma.MeetingTranscriptWhereUniqueInput
}

/**
 * MeetingTranscript findFirst
 */
export type MeetingTranscriptFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingTranscript
   */
  select?: Prisma.MeetingTranscriptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingTranscript
   */
  omit?: Prisma.MeetingTranscriptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingTranscriptInclude<ExtArgs> | null
  /**
   * Filter, which MeetingTranscript to fetch.
   */
  where?: Prisma.MeetingTranscriptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MeetingTranscripts to fetch.
   */
  orderBy?: Prisma.MeetingTranscriptOrderByWithRelationInput | Prisma.MeetingTranscriptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MeetingTranscripts.
   */
  cursor?: Prisma.MeetingTranscriptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MeetingTranscripts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MeetingTranscripts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MeetingTranscripts.
   */
  distinct?: Prisma.MeetingTranscriptScalarFieldEnum | Prisma.MeetingTranscriptScalarFieldEnum[]
}

/**
 * MeetingTranscript findFirstOrThrow
 */
export type MeetingTranscriptFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingTranscript
   */
  select?: Prisma.MeetingTranscriptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingTranscript
   */
  omit?: Prisma.MeetingTranscriptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingTranscriptInclude<ExtArgs> | null
  /**
   * Filter, which MeetingTranscript to fetch.
   */
  where?: Prisma.MeetingTranscriptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MeetingTranscripts to fetch.
   */
  orderBy?: Prisma.MeetingTranscriptOrderByWithRelationInput | Prisma.MeetingTranscriptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MeetingTranscripts.
   */
  cursor?: Prisma.MeetingTranscriptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MeetingTranscripts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MeetingTranscripts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MeetingTranscripts.
   */
  distinct?: Prisma.MeetingTranscriptScalarFieldEnum | Prisma.MeetingTranscriptScalarFieldEnum[]
}

/**
 * MeetingTranscript findMany
 */
export type MeetingTranscriptFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingTranscript
   */
  select?: Prisma.MeetingTranscriptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingTranscript
   */
  omit?: Prisma.MeetingTranscriptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingTranscriptInclude<ExtArgs> | null
  /**
   * Filter, which MeetingTranscripts to fetch.
   */
  where?: Prisma.MeetingTranscriptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MeetingTranscripts to fetch.
   */
  orderBy?: Prisma.MeetingTranscriptOrderByWithRelationInput | Prisma.MeetingTranscriptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MeetingTranscripts.
   */
  cursor?: Prisma.MeetingTranscriptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MeetingTranscripts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MeetingTranscripts.
   */
  skip?: number
  distinct?: Prisma.MeetingTranscriptScalarFieldEnum | Prisma.MeetingTranscriptScalarFieldEnum[]
}

/**
 * MeetingTranscript create
 */
export type MeetingTranscriptCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingTranscript
   */
  select?: Prisma.MeetingTranscriptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingTranscript
   */
  omit?: Prisma.MeetingTranscriptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingTranscriptInclude<ExtArgs> | null
  /**
   * The data needed to create a MeetingTranscript.
   */
  data: Prisma.XOR<Prisma.MeetingTranscriptCreateInput, Prisma.MeetingTranscriptUncheckedCreateInput>
}

/**
 * MeetingTranscript createMany
 */
export type MeetingTranscriptCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MeetingTranscripts.
   */
  data: Prisma.MeetingTranscriptCreateManyInput | Prisma.MeetingTranscriptCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MeetingTranscript createManyAndReturn
 */
export type MeetingTranscriptCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingTranscript
   */
  select?: Prisma.MeetingTranscriptSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingTranscript
   */
  omit?: Prisma.MeetingTranscriptOmit<ExtArgs> | null
  /**
   * The data used to create many MeetingTranscripts.
   */
  data: Prisma.MeetingTranscriptCreateManyInput | Prisma.MeetingTranscriptCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingTranscriptIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MeetingTranscript update
 */
export type MeetingTranscriptUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingTranscript
   */
  select?: Prisma.MeetingTranscriptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingTranscript
   */
  omit?: Prisma.MeetingTranscriptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingTranscriptInclude<ExtArgs> | null
  /**
   * The data needed to update a MeetingTranscript.
   */
  data: Prisma.XOR<Prisma.MeetingTranscriptUpdateInput, Prisma.MeetingTranscriptUncheckedUpdateInput>
  /**
   * Choose, which MeetingTranscript to update.
   */
  where: Prisma.MeetingTranscriptWhereUniqueInput
}

/**
 * MeetingTranscript updateMany
 */
export type MeetingTranscriptUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MeetingTranscripts.
   */
  data: Prisma.XOR<Prisma.MeetingTranscriptUpdateManyMutationInput, Prisma.MeetingTranscriptUncheckedUpdateManyInput>
  /**
   * Filter which MeetingTranscripts to update
   */
  where?: Prisma.MeetingTranscriptWhereInput
  /**
   * Limit how many MeetingTranscripts to update.
   */
  limit?: number
}

/**
 * MeetingTranscript updateManyAndReturn
 */
export type MeetingTranscriptUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingTranscript
   */
  select?: Prisma.MeetingTranscriptSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingTranscript
   */
  omit?: Prisma.MeetingTranscriptOmit<ExtArgs> | null
  /**
   * The data used to update MeetingTranscripts.
   */
  data: Prisma.XOR<Prisma.MeetingTranscriptUpdateManyMutationInput, Prisma.MeetingTranscriptUncheckedUpdateManyInput>
  /**
   * Filter which MeetingTranscripts to update
   */
  where?: Prisma.MeetingTranscriptWhereInput
  /**
   * Limit how many MeetingTranscripts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingTranscriptIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MeetingTranscript upsert
 */
export type MeetingTranscriptUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingTranscript
   */
  select?: Prisma.MeetingTranscriptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingTranscript
   */
  omit?: Prisma.MeetingTranscriptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingTranscriptInclude<ExtArgs> | null
  /**
   * The filter to search for the MeetingTranscript to update in case it exists.
   */
  where: Prisma.MeetingTranscriptWhereUniqueInput
  /**
   * In case the MeetingTranscript found by the `where` argument doesn't exist, create a new MeetingTranscript with this data.
   */
  create: Prisma.XOR<Prisma.MeetingTranscriptCreateInput, Prisma.MeetingTranscriptUncheckedCreateInput>
  /**
   * In case the MeetingTranscript was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MeetingTranscriptUpdateInput, Prisma.MeetingTranscriptUncheckedUpdateInput>
}

/**
 * MeetingTranscript delete
 */
export type MeetingTranscriptDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingTranscript
   */
  select?: Prisma.MeetingTranscriptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingTranscript
   */
  omit?: Prisma.MeetingTranscriptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingTranscriptInclude<ExtArgs> | null
  /**
   * Filter which MeetingTranscript to delete.
   */
  where: Prisma.MeetingTranscriptWhereUniqueInput
}

/**
 * MeetingTranscript deleteMany
 */
export type MeetingTranscriptDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MeetingTranscripts to delete
   */
  where?: Prisma.MeetingTranscriptWhereInput
  /**
   * Limit how many MeetingTranscripts to delete.
   */
  limit?: number
}

/**
 * MeetingTranscript without action
 */
export type MeetingTranscriptDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingTranscript
   */
  select?: Prisma.MeetingTranscriptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingTranscript
   */
  omit?: Prisma.MeetingTranscriptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingTranscriptInclude<ExtArgs> | null
}
