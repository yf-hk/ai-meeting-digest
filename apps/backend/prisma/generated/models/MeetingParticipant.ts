
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `MeetingParticipant` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MeetingParticipant
 * 
 */
export type MeetingParticipantModel = runtime.Types.Result.DefaultSelection<Prisma.$MeetingParticipantPayload>

export type AggregateMeetingParticipant = {
  _count: MeetingParticipantCountAggregateOutputType | null
  _min: MeetingParticipantMinAggregateOutputType | null
  _max: MeetingParticipantMaxAggregateOutputType | null
}

export type MeetingParticipantMinAggregateOutputType = {
  id: string | null
  meetingId: string | null
  userId: string | null
  role: $Enums.ParticipantRole | null
  joinedAt: Date | null
  leftAt: Date | null
}

export type MeetingParticipantMaxAggregateOutputType = {
  id: string | null
  meetingId: string | null
  userId: string | null
  role: $Enums.ParticipantRole | null
  joinedAt: Date | null
  leftAt: Date | null
}

export type MeetingParticipantCountAggregateOutputType = {
  id: number
  meetingId: number
  userId: number
  role: number
  joinedAt: number
  leftAt: number
  _all: number
}


export type MeetingParticipantMinAggregateInputType = {
  id?: true
  meetingId?: true
  userId?: true
  role?: true
  joinedAt?: true
  leftAt?: true
}

export type MeetingParticipantMaxAggregateInputType = {
  id?: true
  meetingId?: true
  userId?: true
  role?: true
  joinedAt?: true
  leftAt?: true
}

export type MeetingParticipantCountAggregateInputType = {
  id?: true
  meetingId?: true
  userId?: true
  role?: true
  joinedAt?: true
  leftAt?: true
  _all?: true
}

export type MeetingParticipantAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MeetingParticipant to aggregate.
   */
  where?: Prisma.MeetingParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MeetingParticipants to fetch.
   */
  orderBy?: Prisma.MeetingParticipantOrderByWithRelationInput | Prisma.MeetingParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MeetingParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MeetingParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MeetingParticipants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MeetingParticipants
  **/
  _count?: true | MeetingParticipantCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MeetingParticipantMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MeetingParticipantMaxAggregateInputType
}

export type GetMeetingParticipantAggregateType<T extends MeetingParticipantAggregateArgs> = {
      [P in keyof T & keyof AggregateMeetingParticipant]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMeetingParticipant[P]>
    : Prisma.GetScalarType<T[P], AggregateMeetingParticipant[P]>
}




export type MeetingParticipantGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MeetingParticipantWhereInput
  orderBy?: Prisma.MeetingParticipantOrderByWithAggregationInput | Prisma.MeetingParticipantOrderByWithAggregationInput[]
  by: Prisma.MeetingParticipantScalarFieldEnum[] | Prisma.MeetingParticipantScalarFieldEnum
  having?: Prisma.MeetingParticipantScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MeetingParticipantCountAggregateInputType | true
  _min?: MeetingParticipantMinAggregateInputType
  _max?: MeetingParticipantMaxAggregateInputType
}

export type MeetingParticipantGroupByOutputType = {
  id: string
  meetingId: string
  userId: string
  role: $Enums.ParticipantRole
  joinedAt: Date | null
  leftAt: Date | null
  _count: MeetingParticipantCountAggregateOutputType | null
  _min: MeetingParticipantMinAggregateOutputType | null
  _max: MeetingParticipantMaxAggregateOutputType | null
}

type GetMeetingParticipantGroupByPayload<T extends MeetingParticipantGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MeetingParticipantGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MeetingParticipantGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MeetingParticipantGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MeetingParticipantGroupByOutputType[P]>
      }
    >
  > 



export type MeetingParticipantWhereInput = {
  AND?: Prisma.MeetingParticipantWhereInput | Prisma.MeetingParticipantWhereInput[]
  OR?: Prisma.MeetingParticipantWhereInput[]
  NOT?: Prisma.MeetingParticipantWhereInput | Prisma.MeetingParticipantWhereInput[]
  id?: Prisma.StringFilter<"MeetingParticipant"> | string
  meetingId?: Prisma.StringFilter<"MeetingParticipant"> | string
  userId?: Prisma.StringFilter<"MeetingParticipant"> | string
  role?: Prisma.EnumParticipantRoleFilter<"MeetingParticipant"> | $Enums.ParticipantRole
  joinedAt?: Prisma.DateTimeNullableFilter<"MeetingParticipant"> | Date | string | null
  leftAt?: Prisma.DateTimeNullableFilter<"MeetingParticipant"> | Date | string | null
  meeting?: Prisma.XOR<Prisma.MeetingScalarRelationFilter, Prisma.MeetingWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type MeetingParticipantOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  leftAt?: Prisma.SortOrderInput | Prisma.SortOrder
  meeting?: Prisma.MeetingOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type MeetingParticipantWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  meetingId_userId?: Prisma.MeetingParticipantMeetingIdUserIdCompoundUniqueInput
  AND?: Prisma.MeetingParticipantWhereInput | Prisma.MeetingParticipantWhereInput[]
  OR?: Prisma.MeetingParticipantWhereInput[]
  NOT?: Prisma.MeetingParticipantWhereInput | Prisma.MeetingParticipantWhereInput[]
  meetingId?: Prisma.StringFilter<"MeetingParticipant"> | string
  userId?: Prisma.StringFilter<"MeetingParticipant"> | string
  role?: Prisma.EnumParticipantRoleFilter<"MeetingParticipant"> | $Enums.ParticipantRole
  joinedAt?: Prisma.DateTimeNullableFilter<"MeetingParticipant"> | Date | string | null
  leftAt?: Prisma.DateTimeNullableFilter<"MeetingParticipant"> | Date | string | null
  meeting?: Prisma.XOR<Prisma.MeetingScalarRelationFilter, Prisma.MeetingWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "meetingId_userId">

export type MeetingParticipantOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  leftAt?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.MeetingParticipantCountOrderByAggregateInput
  _max?: Prisma.MeetingParticipantMaxOrderByAggregateInput
  _min?: Prisma.MeetingParticipantMinOrderByAggregateInput
}

export type MeetingParticipantScalarWhereWithAggregatesInput = {
  AND?: Prisma.MeetingParticipantScalarWhereWithAggregatesInput | Prisma.MeetingParticipantScalarWhereWithAggregatesInput[]
  OR?: Prisma.MeetingParticipantScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MeetingParticipantScalarWhereWithAggregatesInput | Prisma.MeetingParticipantScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"MeetingParticipant"> | string
  meetingId?: Prisma.StringWithAggregatesFilter<"MeetingParticipant"> | string
  userId?: Prisma.StringWithAggregatesFilter<"MeetingParticipant"> | string
  role?: Prisma.EnumParticipantRoleWithAggregatesFilter<"MeetingParticipant"> | $Enums.ParticipantRole
  joinedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"MeetingParticipant"> | Date | string | null
  leftAt?: Prisma.DateTimeNullableWithAggregatesFilter<"MeetingParticipant"> | Date | string | null
}

export type MeetingParticipantCreateInput = {
  id?: string
  role?: $Enums.ParticipantRole
  joinedAt?: Date | string | null
  leftAt?: Date | string | null
  meeting: Prisma.MeetingCreateNestedOneWithoutParticipantsInput
  user: Prisma.UserCreateNestedOneWithoutMeetingParticipationsInput
}

export type MeetingParticipantUncheckedCreateInput = {
  id?: string
  meetingId: string
  userId: string
  role?: $Enums.ParticipantRole
  joinedAt?: Date | string | null
  leftAt?: Date | string | null
}

export type MeetingParticipantUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
  joinedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  leftAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  meeting?: Prisma.MeetingUpdateOneRequiredWithoutParticipantsNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutMeetingParticipationsNestedInput
}

export type MeetingParticipantUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meetingId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
  joinedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  leftAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type MeetingParticipantCreateManyInput = {
  id?: string
  meetingId: string
  userId: string
  role?: $Enums.ParticipantRole
  joinedAt?: Date | string | null
  leftAt?: Date | string | null
}

export type MeetingParticipantUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
  joinedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  leftAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type MeetingParticipantUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meetingId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
  joinedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  leftAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type MeetingParticipantListRelationFilter = {
  every?: Prisma.MeetingParticipantWhereInput
  some?: Prisma.MeetingParticipantWhereInput
  none?: Prisma.MeetingParticipantWhereInput
}

export type MeetingParticipantOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MeetingParticipantMeetingIdUserIdCompoundUniqueInput = {
  meetingId: string
  userId: string
}

export type MeetingParticipantCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
  leftAt?: Prisma.SortOrder
}

export type MeetingParticipantMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
  leftAt?: Prisma.SortOrder
}

export type MeetingParticipantMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  joinedAt?: Prisma.SortOrder
  leftAt?: Prisma.SortOrder
}

export type MeetingParticipantCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MeetingParticipantCreateWithoutUserInput, Prisma.MeetingParticipantUncheckedCreateWithoutUserInput> | Prisma.MeetingParticipantCreateWithoutUserInput[] | Prisma.MeetingParticipantUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MeetingParticipantCreateOrConnectWithoutUserInput | Prisma.MeetingParticipantCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.MeetingParticipantCreateManyUserInputEnvelope
  connect?: Prisma.MeetingParticipantWhereUniqueInput | Prisma.MeetingParticipantWhereUniqueInput[]
}

export type MeetingParticipantUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MeetingParticipantCreateWithoutUserInput, Prisma.MeetingParticipantUncheckedCreateWithoutUserInput> | Prisma.MeetingParticipantCreateWithoutUserInput[] | Prisma.MeetingParticipantUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MeetingParticipantCreateOrConnectWithoutUserInput | Prisma.MeetingParticipantCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.MeetingParticipantCreateManyUserInputEnvelope
  connect?: Prisma.MeetingParticipantWhereUniqueInput | Prisma.MeetingParticipantWhereUniqueInput[]
}

export type MeetingParticipantUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MeetingParticipantCreateWithoutUserInput, Prisma.MeetingParticipantUncheckedCreateWithoutUserInput> | Prisma.MeetingParticipantCreateWithoutUserInput[] | Prisma.MeetingParticipantUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MeetingParticipantCreateOrConnectWithoutUserInput | Prisma.MeetingParticipantCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.MeetingParticipantUpsertWithWhereUniqueWithoutUserInput | Prisma.MeetingParticipantUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.MeetingParticipantCreateManyUserInputEnvelope
  set?: Prisma.MeetingParticipantWhereUniqueInput | Prisma.MeetingParticipantWhereUniqueInput[]
  disconnect?: Prisma.MeetingParticipantWhereUniqueInput | Prisma.MeetingParticipantWhereUniqueInput[]
  delete?: Prisma.MeetingParticipantWhereUniqueInput | Prisma.MeetingParticipantWhereUniqueInput[]
  connect?: Prisma.MeetingParticipantWhereUniqueInput | Prisma.MeetingParticipantWhereUniqueInput[]
  update?: Prisma.MeetingParticipantUpdateWithWhereUniqueWithoutUserInput | Prisma.MeetingParticipantUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.MeetingParticipantUpdateManyWithWhereWithoutUserInput | Prisma.MeetingParticipantUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.MeetingParticipantScalarWhereInput | Prisma.MeetingParticipantScalarWhereInput[]
}

export type MeetingParticipantUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MeetingParticipantCreateWithoutUserInput, Prisma.MeetingParticipantUncheckedCreateWithoutUserInput> | Prisma.MeetingParticipantCreateWithoutUserInput[] | Prisma.MeetingParticipantUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MeetingParticipantCreateOrConnectWithoutUserInput | Prisma.MeetingParticipantCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.MeetingParticipantUpsertWithWhereUniqueWithoutUserInput | Prisma.MeetingParticipantUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.MeetingParticipantCreateManyUserInputEnvelope
  set?: Prisma.MeetingParticipantWhereUniqueInput | Prisma.MeetingParticipantWhereUniqueInput[]
  disconnect?: Prisma.MeetingParticipantWhereUniqueInput | Prisma.MeetingParticipantWhereUniqueInput[]
  delete?: Prisma.MeetingParticipantWhereUniqueInput | Prisma.MeetingParticipantWhereUniqueInput[]
  connect?: Prisma.MeetingParticipantWhereUniqueInput | Prisma.MeetingParticipantWhereUniqueInput[]
  update?: Prisma.MeetingParticipantUpdateWithWhereUniqueWithoutUserInput | Prisma.MeetingParticipantUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.MeetingParticipantUpdateManyWithWhereWithoutUserInput | Prisma.MeetingParticipantUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.MeetingParticipantScalarWhereInput | Prisma.MeetingParticipantScalarWhereInput[]
}

export type MeetingParticipantCreateNestedManyWithoutMeetingInput = {
  create?: Prisma.XOR<Prisma.MeetingParticipantCreateWithoutMeetingInput, Prisma.MeetingParticipantUncheckedCreateWithoutMeetingInput> | Prisma.MeetingParticipantCreateWithoutMeetingInput[] | Prisma.MeetingParticipantUncheckedCreateWithoutMeetingInput[]
  connectOrCreate?: Prisma.MeetingParticipantCreateOrConnectWithoutMeetingInput | Prisma.MeetingParticipantCreateOrConnectWithoutMeetingInput[]
  createMany?: Prisma.MeetingParticipantCreateManyMeetingInputEnvelope
  connect?: Prisma.MeetingParticipantWhereUniqueInput | Prisma.MeetingParticipantWhereUniqueInput[]
}

export type MeetingParticipantUncheckedCreateNestedManyWithoutMeetingInput = {
  create?: Prisma.XOR<Prisma.MeetingParticipantCreateWithoutMeetingInput, Prisma.MeetingParticipantUncheckedCreateWithoutMeetingInput> | Prisma.MeetingParticipantCreateWithoutMeetingInput[] | Prisma.MeetingParticipantUncheckedCreateWithoutMeetingInput[]
  connectOrCreate?: Prisma.MeetingParticipantCreateOrConnectWithoutMeetingInput | Prisma.MeetingParticipantCreateOrConnectWithoutMeetingInput[]
  createMany?: Prisma.MeetingParticipantCreateManyMeetingInputEnvelope
  connect?: Prisma.MeetingParticipantWhereUniqueInput | Prisma.MeetingParticipantWhereUniqueInput[]
}

export type MeetingParticipantUpdateManyWithoutMeetingNestedInput = {
  create?: Prisma.XOR<Prisma.MeetingParticipantCreateWithoutMeetingInput, Prisma.MeetingParticipantUncheckedCreateWithoutMeetingInput> | Prisma.MeetingParticipantCreateWithoutMeetingInput[] | Prisma.MeetingParticipantUncheckedCreateWithoutMeetingInput[]
  connectOrCreate?: Prisma.MeetingParticipantCreateOrConnectWithoutMeetingInput | Prisma.MeetingParticipantCreateOrConnectWithoutMeetingInput[]
  upsert?: Prisma.MeetingParticipantUpsertWithWhereUniqueWithoutMeetingInput | Prisma.MeetingParticipantUpsertWithWhereUniqueWithoutMeetingInput[]
  createMany?: Prisma.MeetingParticipantCreateManyMeetingInputEnvelope
  set?: Prisma.MeetingParticipantWhereUniqueInput | Prisma.MeetingParticipantWhereUniqueInput[]
  disconnect?: Prisma.MeetingParticipantWhereUniqueInput | Prisma.MeetingParticipantWhereUniqueInput[]
  delete?: Prisma.MeetingParticipantWhereUniqueInput | Prisma.MeetingParticipantWhereUniqueInput[]
  connect?: Prisma.MeetingParticipantWhereUniqueInput | Prisma.MeetingParticipantWhereUniqueInput[]
  update?: Prisma.MeetingParticipantUpdateWithWhereUniqueWithoutMeetingInput | Prisma.MeetingParticipantUpdateWithWhereUniqueWithoutMeetingInput[]
  updateMany?: Prisma.MeetingParticipantUpdateManyWithWhereWithoutMeetingInput | Prisma.MeetingParticipantUpdateManyWithWhereWithoutMeetingInput[]
  deleteMany?: Prisma.MeetingParticipantScalarWhereInput | Prisma.MeetingParticipantScalarWhereInput[]
}

export type MeetingParticipantUncheckedUpdateManyWithoutMeetingNestedInput = {
  create?: Prisma.XOR<Prisma.MeetingParticipantCreateWithoutMeetingInput, Prisma.MeetingParticipantUncheckedCreateWithoutMeetingInput> | Prisma.MeetingParticipantCreateWithoutMeetingInput[] | Prisma.MeetingParticipantUncheckedCreateWithoutMeetingInput[]
  connectOrCreate?: Prisma.MeetingParticipantCreateOrConnectWithoutMeetingInput | Prisma.MeetingParticipantCreateOrConnectWithoutMeetingInput[]
  upsert?: Prisma.MeetingParticipantUpsertWithWhereUniqueWithoutMeetingInput | Prisma.MeetingParticipantUpsertWithWhereUniqueWithoutMeetingInput[]
  createMany?: Prisma.MeetingParticipantCreateManyMeetingInputEnvelope
  set?: Prisma.MeetingParticipantWhereUniqueInput | Prisma.MeetingParticipantWhereUniqueInput[]
  disconnect?: Prisma.MeetingParticipantWhereUniqueInput | Prisma.MeetingParticipantWhereUniqueInput[]
  delete?: Prisma.MeetingParticipantWhereUniqueInput | Prisma.MeetingParticipantWhereUniqueInput[]
  connect?: Prisma.MeetingParticipantWhereUniqueInput | Prisma.MeetingParticipantWhereUniqueInput[]
  update?: Prisma.MeetingParticipantUpdateWithWhereUniqueWithoutMeetingInput | Prisma.MeetingParticipantUpdateWithWhereUniqueWithoutMeetingInput[]
  updateMany?: Prisma.MeetingParticipantUpdateManyWithWhereWithoutMeetingInput | Prisma.MeetingParticipantUpdateManyWithWhereWithoutMeetingInput[]
  deleteMany?: Prisma.MeetingParticipantScalarWhereInput | Prisma.MeetingParticipantScalarWhereInput[]
}

export type EnumParticipantRoleFieldUpdateOperationsInput = {
  set?: $Enums.ParticipantRole
}

export type MeetingParticipantCreateWithoutUserInput = {
  id?: string
  role?: $Enums.ParticipantRole
  joinedAt?: Date | string | null
  leftAt?: Date | string | null
  meeting: Prisma.MeetingCreateNestedOneWithoutParticipantsInput
}

export type MeetingParticipantUncheckedCreateWithoutUserInput = {
  id?: string
  meetingId: string
  role?: $Enums.ParticipantRole
  joinedAt?: Date | string | null
  leftAt?: Date | string | null
}

export type MeetingParticipantCreateOrConnectWithoutUserInput = {
  where: Prisma.MeetingParticipantWhereUniqueInput
  create: Prisma.XOR<Prisma.MeetingParticipantCreateWithoutUserInput, Prisma.MeetingParticipantUncheckedCreateWithoutUserInput>
}

export type MeetingParticipantCreateManyUserInputEnvelope = {
  data: Prisma.MeetingParticipantCreateManyUserInput | Prisma.MeetingParticipantCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type MeetingParticipantUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.MeetingParticipantWhereUniqueInput
  update: Prisma.XOR<Prisma.MeetingParticipantUpdateWithoutUserInput, Prisma.MeetingParticipantUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.MeetingParticipantCreateWithoutUserInput, Prisma.MeetingParticipantUncheckedCreateWithoutUserInput>
}

export type MeetingParticipantUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.MeetingParticipantWhereUniqueInput
  data: Prisma.XOR<Prisma.MeetingParticipantUpdateWithoutUserInput, Prisma.MeetingParticipantUncheckedUpdateWithoutUserInput>
}

export type MeetingParticipantUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.MeetingParticipantScalarWhereInput
  data: Prisma.XOR<Prisma.MeetingParticipantUpdateManyMutationInput, Prisma.MeetingParticipantUncheckedUpdateManyWithoutUserInput>
}

export type MeetingParticipantScalarWhereInput = {
  AND?: Prisma.MeetingParticipantScalarWhereInput | Prisma.MeetingParticipantScalarWhereInput[]
  OR?: Prisma.MeetingParticipantScalarWhereInput[]
  NOT?: Prisma.MeetingParticipantScalarWhereInput | Prisma.MeetingParticipantScalarWhereInput[]
  id?: Prisma.StringFilter<"MeetingParticipant"> | string
  meetingId?: Prisma.StringFilter<"MeetingParticipant"> | string
  userId?: Prisma.StringFilter<"MeetingParticipant"> | string
  role?: Prisma.EnumParticipantRoleFilter<"MeetingParticipant"> | $Enums.ParticipantRole
  joinedAt?: Prisma.DateTimeNullableFilter<"MeetingParticipant"> | Date | string | null
  leftAt?: Prisma.DateTimeNullableFilter<"MeetingParticipant"> | Date | string | null
}

export type MeetingParticipantCreateWithoutMeetingInput = {
  id?: string
  role?: $Enums.ParticipantRole
  joinedAt?: Date | string | null
  leftAt?: Date | string | null
  user: Prisma.UserCreateNestedOneWithoutMeetingParticipationsInput
}

export type MeetingParticipantUncheckedCreateWithoutMeetingInput = {
  id?: string
  userId: string
  role?: $Enums.ParticipantRole
  joinedAt?: Date | string | null
  leftAt?: Date | string | null
}

export type MeetingParticipantCreateOrConnectWithoutMeetingInput = {
  where: Prisma.MeetingParticipantWhereUniqueInput
  create: Prisma.XOR<Prisma.MeetingParticipantCreateWithoutMeetingInput, Prisma.MeetingParticipantUncheckedCreateWithoutMeetingInput>
}

export type MeetingParticipantCreateManyMeetingInputEnvelope = {
  data: Prisma.MeetingParticipantCreateManyMeetingInput | Prisma.MeetingParticipantCreateManyMeetingInput[]
  skipDuplicates?: boolean
}

export type MeetingParticipantUpsertWithWhereUniqueWithoutMeetingInput = {
  where: Prisma.MeetingParticipantWhereUniqueInput
  update: Prisma.XOR<Prisma.MeetingParticipantUpdateWithoutMeetingInput, Prisma.MeetingParticipantUncheckedUpdateWithoutMeetingInput>
  create: Prisma.XOR<Prisma.MeetingParticipantCreateWithoutMeetingInput, Prisma.MeetingParticipantUncheckedCreateWithoutMeetingInput>
}

export type MeetingParticipantUpdateWithWhereUniqueWithoutMeetingInput = {
  where: Prisma.MeetingParticipantWhereUniqueInput
  data: Prisma.XOR<Prisma.MeetingParticipantUpdateWithoutMeetingInput, Prisma.MeetingParticipantUncheckedUpdateWithoutMeetingInput>
}

export type MeetingParticipantUpdateManyWithWhereWithoutMeetingInput = {
  where: Prisma.MeetingParticipantScalarWhereInput
  data: Prisma.XOR<Prisma.MeetingParticipantUpdateManyMutationInput, Prisma.MeetingParticipantUncheckedUpdateManyWithoutMeetingInput>
}

export type MeetingParticipantCreateManyUserInput = {
  id?: string
  meetingId: string
  role?: $Enums.ParticipantRole
  joinedAt?: Date | string | null
  leftAt?: Date | string | null
}

export type MeetingParticipantUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
  joinedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  leftAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  meeting?: Prisma.MeetingUpdateOneRequiredWithoutParticipantsNestedInput
}

export type MeetingParticipantUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meetingId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
  joinedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  leftAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type MeetingParticipantUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meetingId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
  joinedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  leftAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type MeetingParticipantCreateManyMeetingInput = {
  id?: string
  userId: string
  role?: $Enums.ParticipantRole
  joinedAt?: Date | string | null
  leftAt?: Date | string | null
}

export type MeetingParticipantUpdateWithoutMeetingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
  joinedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  leftAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  user?: Prisma.UserUpdateOneRequiredWithoutMeetingParticipationsNestedInput
}

export type MeetingParticipantUncheckedUpdateWithoutMeetingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
  joinedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  leftAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type MeetingParticipantUncheckedUpdateManyWithoutMeetingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.EnumParticipantRoleFieldUpdateOperationsInput | $Enums.ParticipantRole
  joinedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  leftAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}



export type MeetingParticipantSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meetingId?: boolean
  userId?: boolean
  role?: boolean
  joinedAt?: boolean
  leftAt?: boolean
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["meetingParticipant"]>

export type MeetingParticipantSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meetingId?: boolean
  userId?: boolean
  role?: boolean
  joinedAt?: boolean
  leftAt?: boolean
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["meetingParticipant"]>

export type MeetingParticipantSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meetingId?: boolean
  userId?: boolean
  role?: boolean
  joinedAt?: boolean
  leftAt?: boolean
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["meetingParticipant"]>

export type MeetingParticipantSelectScalar = {
  id?: boolean
  meetingId?: boolean
  userId?: boolean
  role?: boolean
  joinedAt?: boolean
  leftAt?: boolean
}

export type MeetingParticipantOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "meetingId" | "userId" | "role" | "joinedAt" | "leftAt", ExtArgs["result"]["meetingParticipant"]>
export type MeetingParticipantInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type MeetingParticipantIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type MeetingParticipantIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $MeetingParticipantPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MeetingParticipant"
  objects: {
    meeting: Prisma.$MeetingPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    meetingId: string
    userId: string
    role: $Enums.ParticipantRole
    joinedAt: Date | null
    leftAt: Date | null
  }, ExtArgs["result"]["meetingParticipant"]>
  composites: {}
}

export type MeetingParticipantGetPayload<S extends boolean | null | undefined | MeetingParticipantDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MeetingParticipantPayload, S>

export type MeetingParticipantCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MeetingParticipantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MeetingParticipantCountAggregateInputType | true
  }

export interface MeetingParticipantDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MeetingParticipant'], meta: { name: 'MeetingParticipant' } }
  /**
   * Find zero or one MeetingParticipant that matches the filter.
   * @param {MeetingParticipantFindUniqueArgs} args - Arguments to find a MeetingParticipant
   * @example
   * // Get one MeetingParticipant
   * const meetingParticipant = await prisma.meetingParticipant.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MeetingParticipantFindUniqueArgs>(args: Prisma.SelectSubset<T, MeetingParticipantFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MeetingParticipantClient<runtime.Types.Result.GetResult<Prisma.$MeetingParticipantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MeetingParticipant that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MeetingParticipantFindUniqueOrThrowArgs} args - Arguments to find a MeetingParticipant
   * @example
   * // Get one MeetingParticipant
   * const meetingParticipant = await prisma.meetingParticipant.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MeetingParticipantFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MeetingParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MeetingParticipantClient<runtime.Types.Result.GetResult<Prisma.$MeetingParticipantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MeetingParticipant that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingParticipantFindFirstArgs} args - Arguments to find a MeetingParticipant
   * @example
   * // Get one MeetingParticipant
   * const meetingParticipant = await prisma.meetingParticipant.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MeetingParticipantFindFirstArgs>(args?: Prisma.SelectSubset<T, MeetingParticipantFindFirstArgs<ExtArgs>>): Prisma.Prisma__MeetingParticipantClient<runtime.Types.Result.GetResult<Prisma.$MeetingParticipantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MeetingParticipant that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingParticipantFindFirstOrThrowArgs} args - Arguments to find a MeetingParticipant
   * @example
   * // Get one MeetingParticipant
   * const meetingParticipant = await prisma.meetingParticipant.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MeetingParticipantFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MeetingParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MeetingParticipantClient<runtime.Types.Result.GetResult<Prisma.$MeetingParticipantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MeetingParticipants that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MeetingParticipants
   * const meetingParticipants = await prisma.meetingParticipant.findMany()
   * 
   * // Get first 10 MeetingParticipants
   * const meetingParticipants = await prisma.meetingParticipant.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const meetingParticipantWithIdOnly = await prisma.meetingParticipant.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MeetingParticipantFindManyArgs>(args?: Prisma.SelectSubset<T, MeetingParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MeetingParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MeetingParticipant.
   * @param {MeetingParticipantCreateArgs} args - Arguments to create a MeetingParticipant.
   * @example
   * // Create one MeetingParticipant
   * const MeetingParticipant = await prisma.meetingParticipant.create({
   *   data: {
   *     // ... data to create a MeetingParticipant
   *   }
   * })
   * 
   */
  create<T extends MeetingParticipantCreateArgs>(args: Prisma.SelectSubset<T, MeetingParticipantCreateArgs<ExtArgs>>): Prisma.Prisma__MeetingParticipantClient<runtime.Types.Result.GetResult<Prisma.$MeetingParticipantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MeetingParticipants.
   * @param {MeetingParticipantCreateManyArgs} args - Arguments to create many MeetingParticipants.
   * @example
   * // Create many MeetingParticipants
   * const meetingParticipant = await prisma.meetingParticipant.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MeetingParticipantCreateManyArgs>(args?: Prisma.SelectSubset<T, MeetingParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MeetingParticipants and returns the data saved in the database.
   * @param {MeetingParticipantCreateManyAndReturnArgs} args - Arguments to create many MeetingParticipants.
   * @example
   * // Create many MeetingParticipants
   * const meetingParticipant = await prisma.meetingParticipant.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MeetingParticipants and only return the `id`
   * const meetingParticipantWithIdOnly = await prisma.meetingParticipant.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MeetingParticipantCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MeetingParticipantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MeetingParticipantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MeetingParticipant.
   * @param {MeetingParticipantDeleteArgs} args - Arguments to delete one MeetingParticipant.
   * @example
   * // Delete one MeetingParticipant
   * const MeetingParticipant = await prisma.meetingParticipant.delete({
   *   where: {
   *     // ... filter to delete one MeetingParticipant
   *   }
   * })
   * 
   */
  delete<T extends MeetingParticipantDeleteArgs>(args: Prisma.SelectSubset<T, MeetingParticipantDeleteArgs<ExtArgs>>): Prisma.Prisma__MeetingParticipantClient<runtime.Types.Result.GetResult<Prisma.$MeetingParticipantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MeetingParticipant.
   * @param {MeetingParticipantUpdateArgs} args - Arguments to update one MeetingParticipant.
   * @example
   * // Update one MeetingParticipant
   * const meetingParticipant = await prisma.meetingParticipant.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MeetingParticipantUpdateArgs>(args: Prisma.SelectSubset<T, MeetingParticipantUpdateArgs<ExtArgs>>): Prisma.Prisma__MeetingParticipantClient<runtime.Types.Result.GetResult<Prisma.$MeetingParticipantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MeetingParticipants.
   * @param {MeetingParticipantDeleteManyArgs} args - Arguments to filter MeetingParticipants to delete.
   * @example
   * // Delete a few MeetingParticipants
   * const { count } = await prisma.meetingParticipant.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MeetingParticipantDeleteManyArgs>(args?: Prisma.SelectSubset<T, MeetingParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MeetingParticipants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingParticipantUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MeetingParticipants
   * const meetingParticipant = await prisma.meetingParticipant.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MeetingParticipantUpdateManyArgs>(args: Prisma.SelectSubset<T, MeetingParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MeetingParticipants and returns the data updated in the database.
   * @param {MeetingParticipantUpdateManyAndReturnArgs} args - Arguments to update many MeetingParticipants.
   * @example
   * // Update many MeetingParticipants
   * const meetingParticipant = await prisma.meetingParticipant.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MeetingParticipants and only return the `id`
   * const meetingParticipantWithIdOnly = await prisma.meetingParticipant.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MeetingParticipantUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MeetingParticipantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MeetingParticipantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MeetingParticipant.
   * @param {MeetingParticipantUpsertArgs} args - Arguments to update or create a MeetingParticipant.
   * @example
   * // Update or create a MeetingParticipant
   * const meetingParticipant = await prisma.meetingParticipant.upsert({
   *   create: {
   *     // ... data to create a MeetingParticipant
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MeetingParticipant we want to update
   *   }
   * })
   */
  upsert<T extends MeetingParticipantUpsertArgs>(args: Prisma.SelectSubset<T, MeetingParticipantUpsertArgs<ExtArgs>>): Prisma.Prisma__MeetingParticipantClient<runtime.Types.Result.GetResult<Prisma.$MeetingParticipantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MeetingParticipants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingParticipantCountArgs} args - Arguments to filter MeetingParticipants to count.
   * @example
   * // Count the number of MeetingParticipants
   * const count = await prisma.meetingParticipant.count({
   *   where: {
   *     // ... the filter for the MeetingParticipants we want to count
   *   }
   * })
  **/
  count<T extends MeetingParticipantCountArgs>(
    args?: Prisma.Subset<T, MeetingParticipantCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MeetingParticipantCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MeetingParticipant.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MeetingParticipantAggregateArgs>(args: Prisma.Subset<T, MeetingParticipantAggregateArgs>): Prisma.PrismaPromise<GetMeetingParticipantAggregateType<T>>

  /**
   * Group by MeetingParticipant.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingParticipantGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MeetingParticipantGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MeetingParticipantGroupByArgs['orderBy'] }
      : { orderBy?: MeetingParticipantGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MeetingParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeetingParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MeetingParticipant model
 */
readonly fields: MeetingParticipantFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MeetingParticipant.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MeetingParticipantClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  meeting<T extends Prisma.MeetingDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MeetingDefaultArgs<ExtArgs>>): Prisma.Prisma__MeetingClient<runtime.Types.Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MeetingParticipant model
 */
export interface MeetingParticipantFieldRefs {
  readonly id: Prisma.FieldRef<"MeetingParticipant", 'String'>
  readonly meetingId: Prisma.FieldRef<"MeetingParticipant", 'String'>
  readonly userId: Prisma.FieldRef<"MeetingParticipant", 'String'>
  readonly role: Prisma.FieldRef<"MeetingParticipant", 'ParticipantRole'>
  readonly joinedAt: Prisma.FieldRef<"MeetingParticipant", 'DateTime'>
  readonly leftAt: Prisma.FieldRef<"MeetingParticipant", 'DateTime'>
}
    

// Custom InputTypes
/**
 * MeetingParticipant findUnique
 */
export type MeetingParticipantFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingParticipant
   */
  select?: Prisma.MeetingParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingParticipant
   */
  omit?: Prisma.MeetingParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingParticipantInclude<ExtArgs> | null
  /**
   * Filter, which MeetingParticipant to fetch.
   */
  where: Prisma.MeetingParticipantWhereUniqueInput
}

/**
 * MeetingParticipant findUniqueOrThrow
 */
export type MeetingParticipantFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingParticipant
   */
  select?: Prisma.MeetingParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingParticipant
   */
  omit?: Prisma.MeetingParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingParticipantInclude<ExtArgs> | null
  /**
   * Filter, which MeetingParticipant to fetch.
   */
  where: Prisma.MeetingParticipantWhereUniqueInput
}

/**
 * MeetingParticipant findFirst
 */
export type MeetingParticipantFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingParticipant
   */
  select?: Prisma.MeetingParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingParticipant
   */
  omit?: Prisma.MeetingParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingParticipantInclude<ExtArgs> | null
  /**
   * Filter, which MeetingParticipant to fetch.
   */
  where?: Prisma.MeetingParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MeetingParticipants to fetch.
   */
  orderBy?: Prisma.MeetingParticipantOrderByWithRelationInput | Prisma.MeetingParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MeetingParticipants.
   */
  cursor?: Prisma.MeetingParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MeetingParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MeetingParticipants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MeetingParticipants.
   */
  distinct?: Prisma.MeetingParticipantScalarFieldEnum | Prisma.MeetingParticipantScalarFieldEnum[]
}

/**
 * MeetingParticipant findFirstOrThrow
 */
export type MeetingParticipantFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingParticipant
   */
  select?: Prisma.MeetingParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingParticipant
   */
  omit?: Prisma.MeetingParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingParticipantInclude<ExtArgs> | null
  /**
   * Filter, which MeetingParticipant to fetch.
   */
  where?: Prisma.MeetingParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MeetingParticipants to fetch.
   */
  orderBy?: Prisma.MeetingParticipantOrderByWithRelationInput | Prisma.MeetingParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MeetingParticipants.
   */
  cursor?: Prisma.MeetingParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MeetingParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MeetingParticipants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MeetingParticipants.
   */
  distinct?: Prisma.MeetingParticipantScalarFieldEnum | Prisma.MeetingParticipantScalarFieldEnum[]
}

/**
 * MeetingParticipant findMany
 */
export type MeetingParticipantFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingParticipant
   */
  select?: Prisma.MeetingParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingParticipant
   */
  omit?: Prisma.MeetingParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingParticipantInclude<ExtArgs> | null
  /**
   * Filter, which MeetingParticipants to fetch.
   */
  where?: Prisma.MeetingParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MeetingParticipants to fetch.
   */
  orderBy?: Prisma.MeetingParticipantOrderByWithRelationInput | Prisma.MeetingParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MeetingParticipants.
   */
  cursor?: Prisma.MeetingParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MeetingParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MeetingParticipants.
   */
  skip?: number
  distinct?: Prisma.MeetingParticipantScalarFieldEnum | Prisma.MeetingParticipantScalarFieldEnum[]
}

/**
 * MeetingParticipant create
 */
export type MeetingParticipantCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingParticipant
   */
  select?: Prisma.MeetingParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingParticipant
   */
  omit?: Prisma.MeetingParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingParticipantInclude<ExtArgs> | null
  /**
   * The data needed to create a MeetingParticipant.
   */
  data: Prisma.XOR<Prisma.MeetingParticipantCreateInput, Prisma.MeetingParticipantUncheckedCreateInput>
}

/**
 * MeetingParticipant createMany
 */
export type MeetingParticipantCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MeetingParticipants.
   */
  data: Prisma.MeetingParticipantCreateManyInput | Prisma.MeetingParticipantCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MeetingParticipant createManyAndReturn
 */
export type MeetingParticipantCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingParticipant
   */
  select?: Prisma.MeetingParticipantSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingParticipant
   */
  omit?: Prisma.MeetingParticipantOmit<ExtArgs> | null
  /**
   * The data used to create many MeetingParticipants.
   */
  data: Prisma.MeetingParticipantCreateManyInput | Prisma.MeetingParticipantCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingParticipantIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MeetingParticipant update
 */
export type MeetingParticipantUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingParticipant
   */
  select?: Prisma.MeetingParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingParticipant
   */
  omit?: Prisma.MeetingParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingParticipantInclude<ExtArgs> | null
  /**
   * The data needed to update a MeetingParticipant.
   */
  data: Prisma.XOR<Prisma.MeetingParticipantUpdateInput, Prisma.MeetingParticipantUncheckedUpdateInput>
  /**
   * Choose, which MeetingParticipant to update.
   */
  where: Prisma.MeetingParticipantWhereUniqueInput
}

/**
 * MeetingParticipant updateMany
 */
export type MeetingParticipantUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MeetingParticipants.
   */
  data: Prisma.XOR<Prisma.MeetingParticipantUpdateManyMutationInput, Prisma.MeetingParticipantUncheckedUpdateManyInput>
  /**
   * Filter which MeetingParticipants to update
   */
  where?: Prisma.MeetingParticipantWhereInput
  /**
   * Limit how many MeetingParticipants to update.
   */
  limit?: number
}

/**
 * MeetingParticipant updateManyAndReturn
 */
export type MeetingParticipantUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingParticipant
   */
  select?: Prisma.MeetingParticipantSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingParticipant
   */
  omit?: Prisma.MeetingParticipantOmit<ExtArgs> | null
  /**
   * The data used to update MeetingParticipants.
   */
  data: Prisma.XOR<Prisma.MeetingParticipantUpdateManyMutationInput, Prisma.MeetingParticipantUncheckedUpdateManyInput>
  /**
   * Filter which MeetingParticipants to update
   */
  where?: Prisma.MeetingParticipantWhereInput
  /**
   * Limit how many MeetingParticipants to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingParticipantIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MeetingParticipant upsert
 */
export type MeetingParticipantUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingParticipant
   */
  select?: Prisma.MeetingParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingParticipant
   */
  omit?: Prisma.MeetingParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingParticipantInclude<ExtArgs> | null
  /**
   * The filter to search for the MeetingParticipant to update in case it exists.
   */
  where: Prisma.MeetingParticipantWhereUniqueInput
  /**
   * In case the MeetingParticipant found by the `where` argument doesn't exist, create a new MeetingParticipant with this data.
   */
  create: Prisma.XOR<Prisma.MeetingParticipantCreateInput, Prisma.MeetingParticipantUncheckedCreateInput>
  /**
   * In case the MeetingParticipant was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MeetingParticipantUpdateInput, Prisma.MeetingParticipantUncheckedUpdateInput>
}

/**
 * MeetingParticipant delete
 */
export type MeetingParticipantDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingParticipant
   */
  select?: Prisma.MeetingParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingParticipant
   */
  omit?: Prisma.MeetingParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingParticipantInclude<ExtArgs> | null
  /**
   * Filter which MeetingParticipant to delete.
   */
  where: Prisma.MeetingParticipantWhereUniqueInput
}

/**
 * MeetingParticipant deleteMany
 */
export type MeetingParticipantDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MeetingParticipants to delete
   */
  where?: Prisma.MeetingParticipantWhereInput
  /**
   * Limit how many MeetingParticipants to delete.
   */
  limit?: number
}

/**
 * MeetingParticipant without action
 */
export type MeetingParticipantDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingParticipant
   */
  select?: Prisma.MeetingParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingParticipant
   */
  omit?: Prisma.MeetingParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingParticipantInclude<ExtArgs> | null
}
