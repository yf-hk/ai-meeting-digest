
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `MeetingFile` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MeetingFile
 * 
 */
export type MeetingFileModel = runtime.Types.Result.DefaultSelection<Prisma.$MeetingFilePayload>

export type AggregateMeetingFile = {
  _count: MeetingFileCountAggregateOutputType | null
  _avg: MeetingFileAvgAggregateOutputType | null
  _sum: MeetingFileSumAggregateOutputType | null
  _min: MeetingFileMinAggregateOutputType | null
  _max: MeetingFileMaxAggregateOutputType | null
}

export type MeetingFileAvgAggregateOutputType = {
  fileSize: number | null
}

export type MeetingFileSumAggregateOutputType = {
  fileSize: bigint | null
}

export type MeetingFileMinAggregateOutputType = {
  id: string | null
  meetingId: string | null
  fileName: string | null
  filePath: string | null
  fileType: string | null
  fileSize: bigint | null
  uploadedAt: Date | null
}

export type MeetingFileMaxAggregateOutputType = {
  id: string | null
  meetingId: string | null
  fileName: string | null
  filePath: string | null
  fileType: string | null
  fileSize: bigint | null
  uploadedAt: Date | null
}

export type MeetingFileCountAggregateOutputType = {
  id: number
  meetingId: number
  fileName: number
  filePath: number
  fileType: number
  fileSize: number
  uploadedAt: number
  _all: number
}


export type MeetingFileAvgAggregateInputType = {
  fileSize?: true
}

export type MeetingFileSumAggregateInputType = {
  fileSize?: true
}

export type MeetingFileMinAggregateInputType = {
  id?: true
  meetingId?: true
  fileName?: true
  filePath?: true
  fileType?: true
  fileSize?: true
  uploadedAt?: true
}

export type MeetingFileMaxAggregateInputType = {
  id?: true
  meetingId?: true
  fileName?: true
  filePath?: true
  fileType?: true
  fileSize?: true
  uploadedAt?: true
}

export type MeetingFileCountAggregateInputType = {
  id?: true
  meetingId?: true
  fileName?: true
  filePath?: true
  fileType?: true
  fileSize?: true
  uploadedAt?: true
  _all?: true
}

export type MeetingFileAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MeetingFile to aggregate.
   */
  where?: Prisma.MeetingFileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MeetingFiles to fetch.
   */
  orderBy?: Prisma.MeetingFileOrderByWithRelationInput | Prisma.MeetingFileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MeetingFileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MeetingFiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MeetingFiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MeetingFiles
  **/
  _count?: true | MeetingFileCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MeetingFileAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MeetingFileSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MeetingFileMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MeetingFileMaxAggregateInputType
}

export type GetMeetingFileAggregateType<T extends MeetingFileAggregateArgs> = {
      [P in keyof T & keyof AggregateMeetingFile]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMeetingFile[P]>
    : Prisma.GetScalarType<T[P], AggregateMeetingFile[P]>
}




export type MeetingFileGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MeetingFileWhereInput
  orderBy?: Prisma.MeetingFileOrderByWithAggregationInput | Prisma.MeetingFileOrderByWithAggregationInput[]
  by: Prisma.MeetingFileScalarFieldEnum[] | Prisma.MeetingFileScalarFieldEnum
  having?: Prisma.MeetingFileScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MeetingFileCountAggregateInputType | true
  _avg?: MeetingFileAvgAggregateInputType
  _sum?: MeetingFileSumAggregateInputType
  _min?: MeetingFileMinAggregateInputType
  _max?: MeetingFileMaxAggregateInputType
}

export type MeetingFileGroupByOutputType = {
  id: string
  meetingId: string
  fileName: string
  filePath: string
  fileType: string
  fileSize: bigint
  uploadedAt: Date
  _count: MeetingFileCountAggregateOutputType | null
  _avg: MeetingFileAvgAggregateOutputType | null
  _sum: MeetingFileSumAggregateOutputType | null
  _min: MeetingFileMinAggregateOutputType | null
  _max: MeetingFileMaxAggregateOutputType | null
}

type GetMeetingFileGroupByPayload<T extends MeetingFileGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MeetingFileGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MeetingFileGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MeetingFileGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MeetingFileGroupByOutputType[P]>
      }
    >
  > 



export type MeetingFileWhereInput = {
  AND?: Prisma.MeetingFileWhereInput | Prisma.MeetingFileWhereInput[]
  OR?: Prisma.MeetingFileWhereInput[]
  NOT?: Prisma.MeetingFileWhereInput | Prisma.MeetingFileWhereInput[]
  id?: Prisma.StringFilter<"MeetingFile"> | string
  meetingId?: Prisma.StringFilter<"MeetingFile"> | string
  fileName?: Prisma.StringFilter<"MeetingFile"> | string
  filePath?: Prisma.StringFilter<"MeetingFile"> | string
  fileType?: Prisma.StringFilter<"MeetingFile"> | string
  fileSize?: Prisma.BigIntFilter<"MeetingFile"> | bigint | number
  uploadedAt?: Prisma.DateTimeFilter<"MeetingFile"> | Date | string
  meeting?: Prisma.XOR<Prisma.MeetingScalarRelationFilter, Prisma.MeetingWhereInput>
}

export type MeetingFileOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  fileName?: Prisma.SortOrder
  filePath?: Prisma.SortOrder
  fileType?: Prisma.SortOrder
  fileSize?: Prisma.SortOrder
  uploadedAt?: Prisma.SortOrder
  meeting?: Prisma.MeetingOrderByWithRelationInput
}

export type MeetingFileWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.MeetingFileWhereInput | Prisma.MeetingFileWhereInput[]
  OR?: Prisma.MeetingFileWhereInput[]
  NOT?: Prisma.MeetingFileWhereInput | Prisma.MeetingFileWhereInput[]
  meetingId?: Prisma.StringFilter<"MeetingFile"> | string
  fileName?: Prisma.StringFilter<"MeetingFile"> | string
  filePath?: Prisma.StringFilter<"MeetingFile"> | string
  fileType?: Prisma.StringFilter<"MeetingFile"> | string
  fileSize?: Prisma.BigIntFilter<"MeetingFile"> | bigint | number
  uploadedAt?: Prisma.DateTimeFilter<"MeetingFile"> | Date | string
  meeting?: Prisma.XOR<Prisma.MeetingScalarRelationFilter, Prisma.MeetingWhereInput>
}, "id">

export type MeetingFileOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  fileName?: Prisma.SortOrder
  filePath?: Prisma.SortOrder
  fileType?: Prisma.SortOrder
  fileSize?: Prisma.SortOrder
  uploadedAt?: Prisma.SortOrder
  _count?: Prisma.MeetingFileCountOrderByAggregateInput
  _avg?: Prisma.MeetingFileAvgOrderByAggregateInput
  _max?: Prisma.MeetingFileMaxOrderByAggregateInput
  _min?: Prisma.MeetingFileMinOrderByAggregateInput
  _sum?: Prisma.MeetingFileSumOrderByAggregateInput
}

export type MeetingFileScalarWhereWithAggregatesInput = {
  AND?: Prisma.MeetingFileScalarWhereWithAggregatesInput | Prisma.MeetingFileScalarWhereWithAggregatesInput[]
  OR?: Prisma.MeetingFileScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MeetingFileScalarWhereWithAggregatesInput | Prisma.MeetingFileScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"MeetingFile"> | string
  meetingId?: Prisma.StringWithAggregatesFilter<"MeetingFile"> | string
  fileName?: Prisma.StringWithAggregatesFilter<"MeetingFile"> | string
  filePath?: Prisma.StringWithAggregatesFilter<"MeetingFile"> | string
  fileType?: Prisma.StringWithAggregatesFilter<"MeetingFile"> | string
  fileSize?: Prisma.BigIntWithAggregatesFilter<"MeetingFile"> | bigint | number
  uploadedAt?: Prisma.DateTimeWithAggregatesFilter<"MeetingFile"> | Date | string
}

export type MeetingFileCreateInput = {
  id?: string
  fileName: string
  filePath: string
  fileType: string
  fileSize: bigint | number
  uploadedAt?: Date | string
  meeting: Prisma.MeetingCreateNestedOneWithoutFilesInput
}

export type MeetingFileUncheckedCreateInput = {
  id?: string
  meetingId: string
  fileName: string
  filePath: string
  fileType: string
  fileSize: bigint | number
  uploadedAt?: Date | string
}

export type MeetingFileUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  filePath?: Prisma.StringFieldUpdateOperationsInput | string
  fileType?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  meeting?: Prisma.MeetingUpdateOneRequiredWithoutFilesNestedInput
}

export type MeetingFileUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meetingId?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  filePath?: Prisma.StringFieldUpdateOperationsInput | string
  fileType?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MeetingFileCreateManyInput = {
  id?: string
  meetingId: string
  fileName: string
  filePath: string
  fileType: string
  fileSize: bigint | number
  uploadedAt?: Date | string
}

export type MeetingFileUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  filePath?: Prisma.StringFieldUpdateOperationsInput | string
  fileType?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MeetingFileUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meetingId?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  filePath?: Prisma.StringFieldUpdateOperationsInput | string
  fileType?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MeetingFileListRelationFilter = {
  every?: Prisma.MeetingFileWhereInput
  some?: Prisma.MeetingFileWhereInput
  none?: Prisma.MeetingFileWhereInput
}

export type MeetingFileOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MeetingFileCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  fileName?: Prisma.SortOrder
  filePath?: Prisma.SortOrder
  fileType?: Prisma.SortOrder
  fileSize?: Prisma.SortOrder
  uploadedAt?: Prisma.SortOrder
}

export type MeetingFileAvgOrderByAggregateInput = {
  fileSize?: Prisma.SortOrder
}

export type MeetingFileMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  fileName?: Prisma.SortOrder
  filePath?: Prisma.SortOrder
  fileType?: Prisma.SortOrder
  fileSize?: Prisma.SortOrder
  uploadedAt?: Prisma.SortOrder
}

export type MeetingFileMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  fileName?: Prisma.SortOrder
  filePath?: Prisma.SortOrder
  fileType?: Prisma.SortOrder
  fileSize?: Prisma.SortOrder
  uploadedAt?: Prisma.SortOrder
}

export type MeetingFileSumOrderByAggregateInput = {
  fileSize?: Prisma.SortOrder
}

export type MeetingFileCreateNestedManyWithoutMeetingInput = {
  create?: Prisma.XOR<Prisma.MeetingFileCreateWithoutMeetingInput, Prisma.MeetingFileUncheckedCreateWithoutMeetingInput> | Prisma.MeetingFileCreateWithoutMeetingInput[] | Prisma.MeetingFileUncheckedCreateWithoutMeetingInput[]
  connectOrCreate?: Prisma.MeetingFileCreateOrConnectWithoutMeetingInput | Prisma.MeetingFileCreateOrConnectWithoutMeetingInput[]
  createMany?: Prisma.MeetingFileCreateManyMeetingInputEnvelope
  connect?: Prisma.MeetingFileWhereUniqueInput | Prisma.MeetingFileWhereUniqueInput[]
}

export type MeetingFileUncheckedCreateNestedManyWithoutMeetingInput = {
  create?: Prisma.XOR<Prisma.MeetingFileCreateWithoutMeetingInput, Prisma.MeetingFileUncheckedCreateWithoutMeetingInput> | Prisma.MeetingFileCreateWithoutMeetingInput[] | Prisma.MeetingFileUncheckedCreateWithoutMeetingInput[]
  connectOrCreate?: Prisma.MeetingFileCreateOrConnectWithoutMeetingInput | Prisma.MeetingFileCreateOrConnectWithoutMeetingInput[]
  createMany?: Prisma.MeetingFileCreateManyMeetingInputEnvelope
  connect?: Prisma.MeetingFileWhereUniqueInput | Prisma.MeetingFileWhereUniqueInput[]
}

export type MeetingFileUpdateManyWithoutMeetingNestedInput = {
  create?: Prisma.XOR<Prisma.MeetingFileCreateWithoutMeetingInput, Prisma.MeetingFileUncheckedCreateWithoutMeetingInput> | Prisma.MeetingFileCreateWithoutMeetingInput[] | Prisma.MeetingFileUncheckedCreateWithoutMeetingInput[]
  connectOrCreate?: Prisma.MeetingFileCreateOrConnectWithoutMeetingInput | Prisma.MeetingFileCreateOrConnectWithoutMeetingInput[]
  upsert?: Prisma.MeetingFileUpsertWithWhereUniqueWithoutMeetingInput | Prisma.MeetingFileUpsertWithWhereUniqueWithoutMeetingInput[]
  createMany?: Prisma.MeetingFileCreateManyMeetingInputEnvelope
  set?: Prisma.MeetingFileWhereUniqueInput | Prisma.MeetingFileWhereUniqueInput[]
  disconnect?: Prisma.MeetingFileWhereUniqueInput | Prisma.MeetingFileWhereUniqueInput[]
  delete?: Prisma.MeetingFileWhereUniqueInput | Prisma.MeetingFileWhereUniqueInput[]
  connect?: Prisma.MeetingFileWhereUniqueInput | Prisma.MeetingFileWhereUniqueInput[]
  update?: Prisma.MeetingFileUpdateWithWhereUniqueWithoutMeetingInput | Prisma.MeetingFileUpdateWithWhereUniqueWithoutMeetingInput[]
  updateMany?: Prisma.MeetingFileUpdateManyWithWhereWithoutMeetingInput | Prisma.MeetingFileUpdateManyWithWhereWithoutMeetingInput[]
  deleteMany?: Prisma.MeetingFileScalarWhereInput | Prisma.MeetingFileScalarWhereInput[]
}

export type MeetingFileUncheckedUpdateManyWithoutMeetingNestedInput = {
  create?: Prisma.XOR<Prisma.MeetingFileCreateWithoutMeetingInput, Prisma.MeetingFileUncheckedCreateWithoutMeetingInput> | Prisma.MeetingFileCreateWithoutMeetingInput[] | Prisma.MeetingFileUncheckedCreateWithoutMeetingInput[]
  connectOrCreate?: Prisma.MeetingFileCreateOrConnectWithoutMeetingInput | Prisma.MeetingFileCreateOrConnectWithoutMeetingInput[]
  upsert?: Prisma.MeetingFileUpsertWithWhereUniqueWithoutMeetingInput | Prisma.MeetingFileUpsertWithWhereUniqueWithoutMeetingInput[]
  createMany?: Prisma.MeetingFileCreateManyMeetingInputEnvelope
  set?: Prisma.MeetingFileWhereUniqueInput | Prisma.MeetingFileWhereUniqueInput[]
  disconnect?: Prisma.MeetingFileWhereUniqueInput | Prisma.MeetingFileWhereUniqueInput[]
  delete?: Prisma.MeetingFileWhereUniqueInput | Prisma.MeetingFileWhereUniqueInput[]
  connect?: Prisma.MeetingFileWhereUniqueInput | Prisma.MeetingFileWhereUniqueInput[]
  update?: Prisma.MeetingFileUpdateWithWhereUniqueWithoutMeetingInput | Prisma.MeetingFileUpdateWithWhereUniqueWithoutMeetingInput[]
  updateMany?: Prisma.MeetingFileUpdateManyWithWhereWithoutMeetingInput | Prisma.MeetingFileUpdateManyWithWhereWithoutMeetingInput[]
  deleteMany?: Prisma.MeetingFileScalarWhereInput | Prisma.MeetingFileScalarWhereInput[]
}

export type BigIntFieldUpdateOperationsInput = {
  set?: bigint | number
  increment?: bigint | number
  decrement?: bigint | number
  multiply?: bigint | number
  divide?: bigint | number
}

export type MeetingFileCreateWithoutMeetingInput = {
  id?: string
  fileName: string
  filePath: string
  fileType: string
  fileSize: bigint | number
  uploadedAt?: Date | string
}

export type MeetingFileUncheckedCreateWithoutMeetingInput = {
  id?: string
  fileName: string
  filePath: string
  fileType: string
  fileSize: bigint | number
  uploadedAt?: Date | string
}

export type MeetingFileCreateOrConnectWithoutMeetingInput = {
  where: Prisma.MeetingFileWhereUniqueInput
  create: Prisma.XOR<Prisma.MeetingFileCreateWithoutMeetingInput, Prisma.MeetingFileUncheckedCreateWithoutMeetingInput>
}

export type MeetingFileCreateManyMeetingInputEnvelope = {
  data: Prisma.MeetingFileCreateManyMeetingInput | Prisma.MeetingFileCreateManyMeetingInput[]
  skipDuplicates?: boolean
}

export type MeetingFileUpsertWithWhereUniqueWithoutMeetingInput = {
  where: Prisma.MeetingFileWhereUniqueInput
  update: Prisma.XOR<Prisma.MeetingFileUpdateWithoutMeetingInput, Prisma.MeetingFileUncheckedUpdateWithoutMeetingInput>
  create: Prisma.XOR<Prisma.MeetingFileCreateWithoutMeetingInput, Prisma.MeetingFileUncheckedCreateWithoutMeetingInput>
}

export type MeetingFileUpdateWithWhereUniqueWithoutMeetingInput = {
  where: Prisma.MeetingFileWhereUniqueInput
  data: Prisma.XOR<Prisma.MeetingFileUpdateWithoutMeetingInput, Prisma.MeetingFileUncheckedUpdateWithoutMeetingInput>
}

export type MeetingFileUpdateManyWithWhereWithoutMeetingInput = {
  where: Prisma.MeetingFileScalarWhereInput
  data: Prisma.XOR<Prisma.MeetingFileUpdateManyMutationInput, Prisma.MeetingFileUncheckedUpdateManyWithoutMeetingInput>
}

export type MeetingFileScalarWhereInput = {
  AND?: Prisma.MeetingFileScalarWhereInput | Prisma.MeetingFileScalarWhereInput[]
  OR?: Prisma.MeetingFileScalarWhereInput[]
  NOT?: Prisma.MeetingFileScalarWhereInput | Prisma.MeetingFileScalarWhereInput[]
  id?: Prisma.StringFilter<"MeetingFile"> | string
  meetingId?: Prisma.StringFilter<"MeetingFile"> | string
  fileName?: Prisma.StringFilter<"MeetingFile"> | string
  filePath?: Prisma.StringFilter<"MeetingFile"> | string
  fileType?: Prisma.StringFilter<"MeetingFile"> | string
  fileSize?: Prisma.BigIntFilter<"MeetingFile"> | bigint | number
  uploadedAt?: Prisma.DateTimeFilter<"MeetingFile"> | Date | string
}

export type MeetingFileCreateManyMeetingInput = {
  id?: string
  fileName: string
  filePath: string
  fileType: string
  fileSize: bigint | number
  uploadedAt?: Date | string
}

export type MeetingFileUpdateWithoutMeetingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  filePath?: Prisma.StringFieldUpdateOperationsInput | string
  fileType?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MeetingFileUncheckedUpdateWithoutMeetingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  filePath?: Prisma.StringFieldUpdateOperationsInput | string
  fileType?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MeetingFileUncheckedUpdateManyWithoutMeetingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fileName?: Prisma.StringFieldUpdateOperationsInput | string
  filePath?: Prisma.StringFieldUpdateOperationsInput | string
  fileType?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type MeetingFileSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meetingId?: boolean
  fileName?: boolean
  filePath?: boolean
  fileType?: boolean
  fileSize?: boolean
  uploadedAt?: boolean
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
}, ExtArgs["result"]["meetingFile"]>

export type MeetingFileSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meetingId?: boolean
  fileName?: boolean
  filePath?: boolean
  fileType?: boolean
  fileSize?: boolean
  uploadedAt?: boolean
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
}, ExtArgs["result"]["meetingFile"]>

export type MeetingFileSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meetingId?: boolean
  fileName?: boolean
  filePath?: boolean
  fileType?: boolean
  fileSize?: boolean
  uploadedAt?: boolean
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
}, ExtArgs["result"]["meetingFile"]>

export type MeetingFileSelectScalar = {
  id?: boolean
  meetingId?: boolean
  fileName?: boolean
  filePath?: boolean
  fileType?: boolean
  fileSize?: boolean
  uploadedAt?: boolean
}

export type MeetingFileOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "meetingId" | "fileName" | "filePath" | "fileType" | "fileSize" | "uploadedAt", ExtArgs["result"]["meetingFile"]>
export type MeetingFileInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
}
export type MeetingFileIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
}
export type MeetingFileIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
}

export type $MeetingFilePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MeetingFile"
  objects: {
    meeting: Prisma.$MeetingPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    meetingId: string
    fileName: string
    filePath: string
    fileType: string
    fileSize: bigint
    uploadedAt: Date
  }, ExtArgs["result"]["meetingFile"]>
  composites: {}
}

export type MeetingFileGetPayload<S extends boolean | null | undefined | MeetingFileDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MeetingFilePayload, S>

export type MeetingFileCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MeetingFileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MeetingFileCountAggregateInputType | true
  }

export interface MeetingFileDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MeetingFile'], meta: { name: 'MeetingFile' } }
  /**
   * Find zero or one MeetingFile that matches the filter.
   * @param {MeetingFileFindUniqueArgs} args - Arguments to find a MeetingFile
   * @example
   * // Get one MeetingFile
   * const meetingFile = await prisma.meetingFile.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MeetingFileFindUniqueArgs>(args: Prisma.SelectSubset<T, MeetingFileFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MeetingFileClient<runtime.Types.Result.GetResult<Prisma.$MeetingFilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MeetingFile that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MeetingFileFindUniqueOrThrowArgs} args - Arguments to find a MeetingFile
   * @example
   * // Get one MeetingFile
   * const meetingFile = await prisma.meetingFile.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MeetingFileFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MeetingFileFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MeetingFileClient<runtime.Types.Result.GetResult<Prisma.$MeetingFilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MeetingFile that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingFileFindFirstArgs} args - Arguments to find a MeetingFile
   * @example
   * // Get one MeetingFile
   * const meetingFile = await prisma.meetingFile.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MeetingFileFindFirstArgs>(args?: Prisma.SelectSubset<T, MeetingFileFindFirstArgs<ExtArgs>>): Prisma.Prisma__MeetingFileClient<runtime.Types.Result.GetResult<Prisma.$MeetingFilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MeetingFile that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingFileFindFirstOrThrowArgs} args - Arguments to find a MeetingFile
   * @example
   * // Get one MeetingFile
   * const meetingFile = await prisma.meetingFile.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MeetingFileFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MeetingFileFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MeetingFileClient<runtime.Types.Result.GetResult<Prisma.$MeetingFilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MeetingFiles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingFileFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MeetingFiles
   * const meetingFiles = await prisma.meetingFile.findMany()
   * 
   * // Get first 10 MeetingFiles
   * const meetingFiles = await prisma.meetingFile.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const meetingFileWithIdOnly = await prisma.meetingFile.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MeetingFileFindManyArgs>(args?: Prisma.SelectSubset<T, MeetingFileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MeetingFilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MeetingFile.
   * @param {MeetingFileCreateArgs} args - Arguments to create a MeetingFile.
   * @example
   * // Create one MeetingFile
   * const MeetingFile = await prisma.meetingFile.create({
   *   data: {
   *     // ... data to create a MeetingFile
   *   }
   * })
   * 
   */
  create<T extends MeetingFileCreateArgs>(args: Prisma.SelectSubset<T, MeetingFileCreateArgs<ExtArgs>>): Prisma.Prisma__MeetingFileClient<runtime.Types.Result.GetResult<Prisma.$MeetingFilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MeetingFiles.
   * @param {MeetingFileCreateManyArgs} args - Arguments to create many MeetingFiles.
   * @example
   * // Create many MeetingFiles
   * const meetingFile = await prisma.meetingFile.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MeetingFileCreateManyArgs>(args?: Prisma.SelectSubset<T, MeetingFileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MeetingFiles and returns the data saved in the database.
   * @param {MeetingFileCreateManyAndReturnArgs} args - Arguments to create many MeetingFiles.
   * @example
   * // Create many MeetingFiles
   * const meetingFile = await prisma.meetingFile.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MeetingFiles and only return the `id`
   * const meetingFileWithIdOnly = await prisma.meetingFile.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MeetingFileCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MeetingFileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MeetingFilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MeetingFile.
   * @param {MeetingFileDeleteArgs} args - Arguments to delete one MeetingFile.
   * @example
   * // Delete one MeetingFile
   * const MeetingFile = await prisma.meetingFile.delete({
   *   where: {
   *     // ... filter to delete one MeetingFile
   *   }
   * })
   * 
   */
  delete<T extends MeetingFileDeleteArgs>(args: Prisma.SelectSubset<T, MeetingFileDeleteArgs<ExtArgs>>): Prisma.Prisma__MeetingFileClient<runtime.Types.Result.GetResult<Prisma.$MeetingFilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MeetingFile.
   * @param {MeetingFileUpdateArgs} args - Arguments to update one MeetingFile.
   * @example
   * // Update one MeetingFile
   * const meetingFile = await prisma.meetingFile.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MeetingFileUpdateArgs>(args: Prisma.SelectSubset<T, MeetingFileUpdateArgs<ExtArgs>>): Prisma.Prisma__MeetingFileClient<runtime.Types.Result.GetResult<Prisma.$MeetingFilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MeetingFiles.
   * @param {MeetingFileDeleteManyArgs} args - Arguments to filter MeetingFiles to delete.
   * @example
   * // Delete a few MeetingFiles
   * const { count } = await prisma.meetingFile.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MeetingFileDeleteManyArgs>(args?: Prisma.SelectSubset<T, MeetingFileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MeetingFiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingFileUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MeetingFiles
   * const meetingFile = await prisma.meetingFile.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MeetingFileUpdateManyArgs>(args: Prisma.SelectSubset<T, MeetingFileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MeetingFiles and returns the data updated in the database.
   * @param {MeetingFileUpdateManyAndReturnArgs} args - Arguments to update many MeetingFiles.
   * @example
   * // Update many MeetingFiles
   * const meetingFile = await prisma.meetingFile.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MeetingFiles and only return the `id`
   * const meetingFileWithIdOnly = await prisma.meetingFile.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MeetingFileUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MeetingFileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MeetingFilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MeetingFile.
   * @param {MeetingFileUpsertArgs} args - Arguments to update or create a MeetingFile.
   * @example
   * // Update or create a MeetingFile
   * const meetingFile = await prisma.meetingFile.upsert({
   *   create: {
   *     // ... data to create a MeetingFile
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MeetingFile we want to update
   *   }
   * })
   */
  upsert<T extends MeetingFileUpsertArgs>(args: Prisma.SelectSubset<T, MeetingFileUpsertArgs<ExtArgs>>): Prisma.Prisma__MeetingFileClient<runtime.Types.Result.GetResult<Prisma.$MeetingFilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MeetingFiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingFileCountArgs} args - Arguments to filter MeetingFiles to count.
   * @example
   * // Count the number of MeetingFiles
   * const count = await prisma.meetingFile.count({
   *   where: {
   *     // ... the filter for the MeetingFiles we want to count
   *   }
   * })
  **/
  count<T extends MeetingFileCountArgs>(
    args?: Prisma.Subset<T, MeetingFileCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MeetingFileCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MeetingFile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingFileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MeetingFileAggregateArgs>(args: Prisma.Subset<T, MeetingFileAggregateArgs>): Prisma.PrismaPromise<GetMeetingFileAggregateType<T>>

  /**
   * Group by MeetingFile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingFileGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MeetingFileGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MeetingFileGroupByArgs['orderBy'] }
      : { orderBy?: MeetingFileGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MeetingFileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeetingFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MeetingFile model
 */
readonly fields: MeetingFileFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MeetingFile.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MeetingFileClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  meeting<T extends Prisma.MeetingDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MeetingDefaultArgs<ExtArgs>>): Prisma.Prisma__MeetingClient<runtime.Types.Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MeetingFile model
 */
export interface MeetingFileFieldRefs {
  readonly id: Prisma.FieldRef<"MeetingFile", 'String'>
  readonly meetingId: Prisma.FieldRef<"MeetingFile", 'String'>
  readonly fileName: Prisma.FieldRef<"MeetingFile", 'String'>
  readonly filePath: Prisma.FieldRef<"MeetingFile", 'String'>
  readonly fileType: Prisma.FieldRef<"MeetingFile", 'String'>
  readonly fileSize: Prisma.FieldRef<"MeetingFile", 'BigInt'>
  readonly uploadedAt: Prisma.FieldRef<"MeetingFile", 'DateTime'>
}
    

// Custom InputTypes
/**
 * MeetingFile findUnique
 */
export type MeetingFileFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingFile
   */
  select?: Prisma.MeetingFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingFile
   */
  omit?: Prisma.MeetingFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingFileInclude<ExtArgs> | null
  /**
   * Filter, which MeetingFile to fetch.
   */
  where: Prisma.MeetingFileWhereUniqueInput
}

/**
 * MeetingFile findUniqueOrThrow
 */
export type MeetingFileFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingFile
   */
  select?: Prisma.MeetingFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingFile
   */
  omit?: Prisma.MeetingFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingFileInclude<ExtArgs> | null
  /**
   * Filter, which MeetingFile to fetch.
   */
  where: Prisma.MeetingFileWhereUniqueInput
}

/**
 * MeetingFile findFirst
 */
export type MeetingFileFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingFile
   */
  select?: Prisma.MeetingFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingFile
   */
  omit?: Prisma.MeetingFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingFileInclude<ExtArgs> | null
  /**
   * Filter, which MeetingFile to fetch.
   */
  where?: Prisma.MeetingFileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MeetingFiles to fetch.
   */
  orderBy?: Prisma.MeetingFileOrderByWithRelationInput | Prisma.MeetingFileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MeetingFiles.
   */
  cursor?: Prisma.MeetingFileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MeetingFiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MeetingFiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MeetingFiles.
   */
  distinct?: Prisma.MeetingFileScalarFieldEnum | Prisma.MeetingFileScalarFieldEnum[]
}

/**
 * MeetingFile findFirstOrThrow
 */
export type MeetingFileFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingFile
   */
  select?: Prisma.MeetingFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingFile
   */
  omit?: Prisma.MeetingFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingFileInclude<ExtArgs> | null
  /**
   * Filter, which MeetingFile to fetch.
   */
  where?: Prisma.MeetingFileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MeetingFiles to fetch.
   */
  orderBy?: Prisma.MeetingFileOrderByWithRelationInput | Prisma.MeetingFileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MeetingFiles.
   */
  cursor?: Prisma.MeetingFileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MeetingFiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MeetingFiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MeetingFiles.
   */
  distinct?: Prisma.MeetingFileScalarFieldEnum | Prisma.MeetingFileScalarFieldEnum[]
}

/**
 * MeetingFile findMany
 */
export type MeetingFileFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingFile
   */
  select?: Prisma.MeetingFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingFile
   */
  omit?: Prisma.MeetingFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingFileInclude<ExtArgs> | null
  /**
   * Filter, which MeetingFiles to fetch.
   */
  where?: Prisma.MeetingFileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MeetingFiles to fetch.
   */
  orderBy?: Prisma.MeetingFileOrderByWithRelationInput | Prisma.MeetingFileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MeetingFiles.
   */
  cursor?: Prisma.MeetingFileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MeetingFiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MeetingFiles.
   */
  skip?: number
  distinct?: Prisma.MeetingFileScalarFieldEnum | Prisma.MeetingFileScalarFieldEnum[]
}

/**
 * MeetingFile create
 */
export type MeetingFileCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingFile
   */
  select?: Prisma.MeetingFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingFile
   */
  omit?: Prisma.MeetingFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingFileInclude<ExtArgs> | null
  /**
   * The data needed to create a MeetingFile.
   */
  data: Prisma.XOR<Prisma.MeetingFileCreateInput, Prisma.MeetingFileUncheckedCreateInput>
}

/**
 * MeetingFile createMany
 */
export type MeetingFileCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MeetingFiles.
   */
  data: Prisma.MeetingFileCreateManyInput | Prisma.MeetingFileCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MeetingFile createManyAndReturn
 */
export type MeetingFileCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingFile
   */
  select?: Prisma.MeetingFileSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingFile
   */
  omit?: Prisma.MeetingFileOmit<ExtArgs> | null
  /**
   * The data used to create many MeetingFiles.
   */
  data: Prisma.MeetingFileCreateManyInput | Prisma.MeetingFileCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingFileIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MeetingFile update
 */
export type MeetingFileUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingFile
   */
  select?: Prisma.MeetingFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingFile
   */
  omit?: Prisma.MeetingFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingFileInclude<ExtArgs> | null
  /**
   * The data needed to update a MeetingFile.
   */
  data: Prisma.XOR<Prisma.MeetingFileUpdateInput, Prisma.MeetingFileUncheckedUpdateInput>
  /**
   * Choose, which MeetingFile to update.
   */
  where: Prisma.MeetingFileWhereUniqueInput
}

/**
 * MeetingFile updateMany
 */
export type MeetingFileUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MeetingFiles.
   */
  data: Prisma.XOR<Prisma.MeetingFileUpdateManyMutationInput, Prisma.MeetingFileUncheckedUpdateManyInput>
  /**
   * Filter which MeetingFiles to update
   */
  where?: Prisma.MeetingFileWhereInput
  /**
   * Limit how many MeetingFiles to update.
   */
  limit?: number
}

/**
 * MeetingFile updateManyAndReturn
 */
export type MeetingFileUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingFile
   */
  select?: Prisma.MeetingFileSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingFile
   */
  omit?: Prisma.MeetingFileOmit<ExtArgs> | null
  /**
   * The data used to update MeetingFiles.
   */
  data: Prisma.XOR<Prisma.MeetingFileUpdateManyMutationInput, Prisma.MeetingFileUncheckedUpdateManyInput>
  /**
   * Filter which MeetingFiles to update
   */
  where?: Prisma.MeetingFileWhereInput
  /**
   * Limit how many MeetingFiles to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingFileIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MeetingFile upsert
 */
export type MeetingFileUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingFile
   */
  select?: Prisma.MeetingFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingFile
   */
  omit?: Prisma.MeetingFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingFileInclude<ExtArgs> | null
  /**
   * The filter to search for the MeetingFile to update in case it exists.
   */
  where: Prisma.MeetingFileWhereUniqueInput
  /**
   * In case the MeetingFile found by the `where` argument doesn't exist, create a new MeetingFile with this data.
   */
  create: Prisma.XOR<Prisma.MeetingFileCreateInput, Prisma.MeetingFileUncheckedCreateInput>
  /**
   * In case the MeetingFile was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MeetingFileUpdateInput, Prisma.MeetingFileUncheckedUpdateInput>
}

/**
 * MeetingFile delete
 */
export type MeetingFileDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingFile
   */
  select?: Prisma.MeetingFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingFile
   */
  omit?: Prisma.MeetingFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingFileInclude<ExtArgs> | null
  /**
   * Filter which MeetingFile to delete.
   */
  where: Prisma.MeetingFileWhereUniqueInput
}

/**
 * MeetingFile deleteMany
 */
export type MeetingFileDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MeetingFiles to delete
   */
  where?: Prisma.MeetingFileWhereInput
  /**
   * Limit how many MeetingFiles to delete.
   */
  limit?: number
}

/**
 * MeetingFile without action
 */
export type MeetingFileDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MeetingFile
   */
  select?: Prisma.MeetingFileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingFile
   */
  omit?: Prisma.MeetingFileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingFileInclude<ExtArgs> | null
}
