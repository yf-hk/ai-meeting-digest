
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Workspace` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Workspace
 * 
 */
export type WorkspaceModel = runtime.Types.Result.DefaultSelection<Prisma.$WorkspacePayload>

export type AggregateWorkspace = {
  _count: WorkspaceCountAggregateOutputType | null
  _min: WorkspaceMinAggregateOutputType | null
  _max: WorkspaceMaxAggregateOutputType | null
}

export type WorkspaceMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  ownerId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type WorkspaceMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  ownerId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type WorkspaceCountAggregateOutputType = {
  id: number
  name: number
  description: number
  ownerId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type WorkspaceMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  ownerId?: true
  createdAt?: true
  updatedAt?: true
}

export type WorkspaceMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  ownerId?: true
  createdAt?: true
  updatedAt?: true
}

export type WorkspaceCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  ownerId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type WorkspaceAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Workspace to aggregate.
   */
  where?: Prisma.WorkspaceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Workspaces to fetch.
   */
  orderBy?: Prisma.WorkspaceOrderByWithRelationInput | Prisma.WorkspaceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WorkspaceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Workspaces from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Workspaces.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Workspaces
  **/
  _count?: true | WorkspaceCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WorkspaceMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WorkspaceMaxAggregateInputType
}

export type GetWorkspaceAggregateType<T extends WorkspaceAggregateArgs> = {
      [P in keyof T & keyof AggregateWorkspace]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWorkspace[P]>
    : Prisma.GetScalarType<T[P], AggregateWorkspace[P]>
}




export type WorkspaceGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WorkspaceWhereInput
  orderBy?: Prisma.WorkspaceOrderByWithAggregationInput | Prisma.WorkspaceOrderByWithAggregationInput[]
  by: Prisma.WorkspaceScalarFieldEnum[] | Prisma.WorkspaceScalarFieldEnum
  having?: Prisma.WorkspaceScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WorkspaceCountAggregateInputType | true
  _min?: WorkspaceMinAggregateInputType
  _max?: WorkspaceMaxAggregateInputType
}

export type WorkspaceGroupByOutputType = {
  id: string
  name: string
  description: string | null
  ownerId: string
  createdAt: Date
  updatedAt: Date
  _count: WorkspaceCountAggregateOutputType | null
  _min: WorkspaceMinAggregateOutputType | null
  _max: WorkspaceMaxAggregateOutputType | null
}

type GetWorkspaceGroupByPayload<T extends WorkspaceGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WorkspaceGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WorkspaceGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WorkspaceGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WorkspaceGroupByOutputType[P]>
      }
    >
  > 



export type WorkspaceWhereInput = {
  AND?: Prisma.WorkspaceWhereInput | Prisma.WorkspaceWhereInput[]
  OR?: Prisma.WorkspaceWhereInput[]
  NOT?: Prisma.WorkspaceWhereInput | Prisma.WorkspaceWhereInput[]
  id?: Prisma.StringFilter<"Workspace"> | string
  name?: Prisma.StringFilter<"Workspace"> | string
  description?: Prisma.StringNullableFilter<"Workspace"> | string | null
  ownerId?: Prisma.StringFilter<"Workspace"> | string
  createdAt?: Prisma.DateTimeFilter<"Workspace"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Workspace"> | Date | string
  owner?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  members?: Prisma.WorkspaceMemberListRelationFilter
  meetings?: Prisma.MeetingListRelationFilter
  tags?: Prisma.TagListRelationFilter
}

export type WorkspaceOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  owner?: Prisma.UserOrderByWithRelationInput
  members?: Prisma.WorkspaceMemberOrderByRelationAggregateInput
  meetings?: Prisma.MeetingOrderByRelationAggregateInput
  tags?: Prisma.TagOrderByRelationAggregateInput
}

export type WorkspaceWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.WorkspaceWhereInput | Prisma.WorkspaceWhereInput[]
  OR?: Prisma.WorkspaceWhereInput[]
  NOT?: Prisma.WorkspaceWhereInput | Prisma.WorkspaceWhereInput[]
  name?: Prisma.StringFilter<"Workspace"> | string
  description?: Prisma.StringNullableFilter<"Workspace"> | string | null
  ownerId?: Prisma.StringFilter<"Workspace"> | string
  createdAt?: Prisma.DateTimeFilter<"Workspace"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Workspace"> | Date | string
  owner?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  members?: Prisma.WorkspaceMemberListRelationFilter
  meetings?: Prisma.MeetingListRelationFilter
  tags?: Prisma.TagListRelationFilter
}, "id">

export type WorkspaceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.WorkspaceCountOrderByAggregateInput
  _max?: Prisma.WorkspaceMaxOrderByAggregateInput
  _min?: Prisma.WorkspaceMinOrderByAggregateInput
}

export type WorkspaceScalarWhereWithAggregatesInput = {
  AND?: Prisma.WorkspaceScalarWhereWithAggregatesInput | Prisma.WorkspaceScalarWhereWithAggregatesInput[]
  OR?: Prisma.WorkspaceScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WorkspaceScalarWhereWithAggregatesInput | Prisma.WorkspaceScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Workspace"> | string
  name?: Prisma.StringWithAggregatesFilter<"Workspace"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Workspace"> | string | null
  ownerId?: Prisma.StringWithAggregatesFilter<"Workspace"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Workspace"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Workspace"> | Date | string
}

export type WorkspaceCreateInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  owner: Prisma.UserCreateNestedOneWithoutOwnedWorkspacesInput
  members?: Prisma.WorkspaceMemberCreateNestedManyWithoutWorkspaceInput
  meetings?: Prisma.MeetingCreateNestedManyWithoutWorkspaceInput
  tags?: Prisma.TagCreateNestedManyWithoutWorkspaceInput
}

export type WorkspaceUncheckedCreateInput = {
  id?: string
  name: string
  description?: string | null
  ownerId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  members?: Prisma.WorkspaceMemberUncheckedCreateNestedManyWithoutWorkspaceInput
  meetings?: Prisma.MeetingUncheckedCreateNestedManyWithoutWorkspaceInput
  tags?: Prisma.TagUncheckedCreateNestedManyWithoutWorkspaceInput
}

export type WorkspaceUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  owner?: Prisma.UserUpdateOneRequiredWithoutOwnedWorkspacesNestedInput
  members?: Prisma.WorkspaceMemberUpdateManyWithoutWorkspaceNestedInput
  meetings?: Prisma.MeetingUpdateManyWithoutWorkspaceNestedInput
  tags?: Prisma.TagUpdateManyWithoutWorkspaceNestedInput
}

export type WorkspaceUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ownerId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  members?: Prisma.WorkspaceMemberUncheckedUpdateManyWithoutWorkspaceNestedInput
  meetings?: Prisma.MeetingUncheckedUpdateManyWithoutWorkspaceNestedInput
  tags?: Prisma.TagUncheckedUpdateManyWithoutWorkspaceNestedInput
}

export type WorkspaceCreateManyInput = {
  id?: string
  name: string
  description?: string | null
  ownerId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WorkspaceUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WorkspaceUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ownerId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WorkspaceListRelationFilter = {
  every?: Prisma.WorkspaceWhereInput
  some?: Prisma.WorkspaceWhereInput
  none?: Prisma.WorkspaceWhereInput
}

export type WorkspaceOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type WorkspaceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WorkspaceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WorkspaceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WorkspaceScalarRelationFilter = {
  is?: Prisma.WorkspaceWhereInput
  isNot?: Prisma.WorkspaceWhereInput
}

export type WorkspaceNullableScalarRelationFilter = {
  is?: Prisma.WorkspaceWhereInput | null
  isNot?: Prisma.WorkspaceWhereInput | null
}

export type WorkspaceCreateNestedManyWithoutOwnerInput = {
  create?: Prisma.XOR<Prisma.WorkspaceCreateWithoutOwnerInput, Prisma.WorkspaceUncheckedCreateWithoutOwnerInput> | Prisma.WorkspaceCreateWithoutOwnerInput[] | Prisma.WorkspaceUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?: Prisma.WorkspaceCreateOrConnectWithoutOwnerInput | Prisma.WorkspaceCreateOrConnectWithoutOwnerInput[]
  createMany?: Prisma.WorkspaceCreateManyOwnerInputEnvelope
  connect?: Prisma.WorkspaceWhereUniqueInput | Prisma.WorkspaceWhereUniqueInput[]
}

export type WorkspaceUncheckedCreateNestedManyWithoutOwnerInput = {
  create?: Prisma.XOR<Prisma.WorkspaceCreateWithoutOwnerInput, Prisma.WorkspaceUncheckedCreateWithoutOwnerInput> | Prisma.WorkspaceCreateWithoutOwnerInput[] | Prisma.WorkspaceUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?: Prisma.WorkspaceCreateOrConnectWithoutOwnerInput | Prisma.WorkspaceCreateOrConnectWithoutOwnerInput[]
  createMany?: Prisma.WorkspaceCreateManyOwnerInputEnvelope
  connect?: Prisma.WorkspaceWhereUniqueInput | Prisma.WorkspaceWhereUniqueInput[]
}

export type WorkspaceUpdateManyWithoutOwnerNestedInput = {
  create?: Prisma.XOR<Prisma.WorkspaceCreateWithoutOwnerInput, Prisma.WorkspaceUncheckedCreateWithoutOwnerInput> | Prisma.WorkspaceCreateWithoutOwnerInput[] | Prisma.WorkspaceUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?: Prisma.WorkspaceCreateOrConnectWithoutOwnerInput | Prisma.WorkspaceCreateOrConnectWithoutOwnerInput[]
  upsert?: Prisma.WorkspaceUpsertWithWhereUniqueWithoutOwnerInput | Prisma.WorkspaceUpsertWithWhereUniqueWithoutOwnerInput[]
  createMany?: Prisma.WorkspaceCreateManyOwnerInputEnvelope
  set?: Prisma.WorkspaceWhereUniqueInput | Prisma.WorkspaceWhereUniqueInput[]
  disconnect?: Prisma.WorkspaceWhereUniqueInput | Prisma.WorkspaceWhereUniqueInput[]
  delete?: Prisma.WorkspaceWhereUniqueInput | Prisma.WorkspaceWhereUniqueInput[]
  connect?: Prisma.WorkspaceWhereUniqueInput | Prisma.WorkspaceWhereUniqueInput[]
  update?: Prisma.WorkspaceUpdateWithWhereUniqueWithoutOwnerInput | Prisma.WorkspaceUpdateWithWhereUniqueWithoutOwnerInput[]
  updateMany?: Prisma.WorkspaceUpdateManyWithWhereWithoutOwnerInput | Prisma.WorkspaceUpdateManyWithWhereWithoutOwnerInput[]
  deleteMany?: Prisma.WorkspaceScalarWhereInput | Prisma.WorkspaceScalarWhereInput[]
}

export type WorkspaceUncheckedUpdateManyWithoutOwnerNestedInput = {
  create?: Prisma.XOR<Prisma.WorkspaceCreateWithoutOwnerInput, Prisma.WorkspaceUncheckedCreateWithoutOwnerInput> | Prisma.WorkspaceCreateWithoutOwnerInput[] | Prisma.WorkspaceUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?: Prisma.WorkspaceCreateOrConnectWithoutOwnerInput | Prisma.WorkspaceCreateOrConnectWithoutOwnerInput[]
  upsert?: Prisma.WorkspaceUpsertWithWhereUniqueWithoutOwnerInput | Prisma.WorkspaceUpsertWithWhereUniqueWithoutOwnerInput[]
  createMany?: Prisma.WorkspaceCreateManyOwnerInputEnvelope
  set?: Prisma.WorkspaceWhereUniqueInput | Prisma.WorkspaceWhereUniqueInput[]
  disconnect?: Prisma.WorkspaceWhereUniqueInput | Prisma.WorkspaceWhereUniqueInput[]
  delete?: Prisma.WorkspaceWhereUniqueInput | Prisma.WorkspaceWhereUniqueInput[]
  connect?: Prisma.WorkspaceWhereUniqueInput | Prisma.WorkspaceWhereUniqueInput[]
  update?: Prisma.WorkspaceUpdateWithWhereUniqueWithoutOwnerInput | Prisma.WorkspaceUpdateWithWhereUniqueWithoutOwnerInput[]
  updateMany?: Prisma.WorkspaceUpdateManyWithWhereWithoutOwnerInput | Prisma.WorkspaceUpdateManyWithWhereWithoutOwnerInput[]
  deleteMany?: Prisma.WorkspaceScalarWhereInput | Prisma.WorkspaceScalarWhereInput[]
}

export type WorkspaceCreateNestedOneWithoutMembersInput = {
  create?: Prisma.XOR<Prisma.WorkspaceCreateWithoutMembersInput, Prisma.WorkspaceUncheckedCreateWithoutMembersInput>
  connectOrCreate?: Prisma.WorkspaceCreateOrConnectWithoutMembersInput
  connect?: Prisma.WorkspaceWhereUniqueInput
}

export type WorkspaceUpdateOneRequiredWithoutMembersNestedInput = {
  create?: Prisma.XOR<Prisma.WorkspaceCreateWithoutMembersInput, Prisma.WorkspaceUncheckedCreateWithoutMembersInput>
  connectOrCreate?: Prisma.WorkspaceCreateOrConnectWithoutMembersInput
  upsert?: Prisma.WorkspaceUpsertWithoutMembersInput
  connect?: Prisma.WorkspaceWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.WorkspaceUpdateToOneWithWhereWithoutMembersInput, Prisma.WorkspaceUpdateWithoutMembersInput>, Prisma.WorkspaceUncheckedUpdateWithoutMembersInput>
}

export type WorkspaceCreateNestedOneWithoutMeetingsInput = {
  create?: Prisma.XOR<Prisma.WorkspaceCreateWithoutMeetingsInput, Prisma.WorkspaceUncheckedCreateWithoutMeetingsInput>
  connectOrCreate?: Prisma.WorkspaceCreateOrConnectWithoutMeetingsInput
  connect?: Prisma.WorkspaceWhereUniqueInput
}

export type WorkspaceUpdateOneWithoutMeetingsNestedInput = {
  create?: Prisma.XOR<Prisma.WorkspaceCreateWithoutMeetingsInput, Prisma.WorkspaceUncheckedCreateWithoutMeetingsInput>
  connectOrCreate?: Prisma.WorkspaceCreateOrConnectWithoutMeetingsInput
  upsert?: Prisma.WorkspaceUpsertWithoutMeetingsInput
  disconnect?: Prisma.WorkspaceWhereInput | boolean
  delete?: Prisma.WorkspaceWhereInput | boolean
  connect?: Prisma.WorkspaceWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.WorkspaceUpdateToOneWithWhereWithoutMeetingsInput, Prisma.WorkspaceUpdateWithoutMeetingsInput>, Prisma.WorkspaceUncheckedUpdateWithoutMeetingsInput>
}

export type WorkspaceCreateNestedOneWithoutTagsInput = {
  create?: Prisma.XOR<Prisma.WorkspaceCreateWithoutTagsInput, Prisma.WorkspaceUncheckedCreateWithoutTagsInput>
  connectOrCreate?: Prisma.WorkspaceCreateOrConnectWithoutTagsInput
  connect?: Prisma.WorkspaceWhereUniqueInput
}

export type WorkspaceUpdateOneRequiredWithoutTagsNestedInput = {
  create?: Prisma.XOR<Prisma.WorkspaceCreateWithoutTagsInput, Prisma.WorkspaceUncheckedCreateWithoutTagsInput>
  connectOrCreate?: Prisma.WorkspaceCreateOrConnectWithoutTagsInput
  upsert?: Prisma.WorkspaceUpsertWithoutTagsInput
  connect?: Prisma.WorkspaceWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.WorkspaceUpdateToOneWithWhereWithoutTagsInput, Prisma.WorkspaceUpdateWithoutTagsInput>, Prisma.WorkspaceUncheckedUpdateWithoutTagsInput>
}

export type WorkspaceCreateWithoutOwnerInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  members?: Prisma.WorkspaceMemberCreateNestedManyWithoutWorkspaceInput
  meetings?: Prisma.MeetingCreateNestedManyWithoutWorkspaceInput
  tags?: Prisma.TagCreateNestedManyWithoutWorkspaceInput
}

export type WorkspaceUncheckedCreateWithoutOwnerInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  members?: Prisma.WorkspaceMemberUncheckedCreateNestedManyWithoutWorkspaceInput
  meetings?: Prisma.MeetingUncheckedCreateNestedManyWithoutWorkspaceInput
  tags?: Prisma.TagUncheckedCreateNestedManyWithoutWorkspaceInput
}

export type WorkspaceCreateOrConnectWithoutOwnerInput = {
  where: Prisma.WorkspaceWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkspaceCreateWithoutOwnerInput, Prisma.WorkspaceUncheckedCreateWithoutOwnerInput>
}

export type WorkspaceCreateManyOwnerInputEnvelope = {
  data: Prisma.WorkspaceCreateManyOwnerInput | Prisma.WorkspaceCreateManyOwnerInput[]
  skipDuplicates?: boolean
}

export type WorkspaceUpsertWithWhereUniqueWithoutOwnerInput = {
  where: Prisma.WorkspaceWhereUniqueInput
  update: Prisma.XOR<Prisma.WorkspaceUpdateWithoutOwnerInput, Prisma.WorkspaceUncheckedUpdateWithoutOwnerInput>
  create: Prisma.XOR<Prisma.WorkspaceCreateWithoutOwnerInput, Prisma.WorkspaceUncheckedCreateWithoutOwnerInput>
}

export type WorkspaceUpdateWithWhereUniqueWithoutOwnerInput = {
  where: Prisma.WorkspaceWhereUniqueInput
  data: Prisma.XOR<Prisma.WorkspaceUpdateWithoutOwnerInput, Prisma.WorkspaceUncheckedUpdateWithoutOwnerInput>
}

export type WorkspaceUpdateManyWithWhereWithoutOwnerInput = {
  where: Prisma.WorkspaceScalarWhereInput
  data: Prisma.XOR<Prisma.WorkspaceUpdateManyMutationInput, Prisma.WorkspaceUncheckedUpdateManyWithoutOwnerInput>
}

export type WorkspaceScalarWhereInput = {
  AND?: Prisma.WorkspaceScalarWhereInput | Prisma.WorkspaceScalarWhereInput[]
  OR?: Prisma.WorkspaceScalarWhereInput[]
  NOT?: Prisma.WorkspaceScalarWhereInput | Prisma.WorkspaceScalarWhereInput[]
  id?: Prisma.StringFilter<"Workspace"> | string
  name?: Prisma.StringFilter<"Workspace"> | string
  description?: Prisma.StringNullableFilter<"Workspace"> | string | null
  ownerId?: Prisma.StringFilter<"Workspace"> | string
  createdAt?: Prisma.DateTimeFilter<"Workspace"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Workspace"> | Date | string
}

export type WorkspaceCreateWithoutMembersInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  owner: Prisma.UserCreateNestedOneWithoutOwnedWorkspacesInput
  meetings?: Prisma.MeetingCreateNestedManyWithoutWorkspaceInput
  tags?: Prisma.TagCreateNestedManyWithoutWorkspaceInput
}

export type WorkspaceUncheckedCreateWithoutMembersInput = {
  id?: string
  name: string
  description?: string | null
  ownerId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  meetings?: Prisma.MeetingUncheckedCreateNestedManyWithoutWorkspaceInput
  tags?: Prisma.TagUncheckedCreateNestedManyWithoutWorkspaceInput
}

export type WorkspaceCreateOrConnectWithoutMembersInput = {
  where: Prisma.WorkspaceWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkspaceCreateWithoutMembersInput, Prisma.WorkspaceUncheckedCreateWithoutMembersInput>
}

export type WorkspaceUpsertWithoutMembersInput = {
  update: Prisma.XOR<Prisma.WorkspaceUpdateWithoutMembersInput, Prisma.WorkspaceUncheckedUpdateWithoutMembersInput>
  create: Prisma.XOR<Prisma.WorkspaceCreateWithoutMembersInput, Prisma.WorkspaceUncheckedCreateWithoutMembersInput>
  where?: Prisma.WorkspaceWhereInput
}

export type WorkspaceUpdateToOneWithWhereWithoutMembersInput = {
  where?: Prisma.WorkspaceWhereInput
  data: Prisma.XOR<Prisma.WorkspaceUpdateWithoutMembersInput, Prisma.WorkspaceUncheckedUpdateWithoutMembersInput>
}

export type WorkspaceUpdateWithoutMembersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  owner?: Prisma.UserUpdateOneRequiredWithoutOwnedWorkspacesNestedInput
  meetings?: Prisma.MeetingUpdateManyWithoutWorkspaceNestedInput
  tags?: Prisma.TagUpdateManyWithoutWorkspaceNestedInput
}

export type WorkspaceUncheckedUpdateWithoutMembersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ownerId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  meetings?: Prisma.MeetingUncheckedUpdateManyWithoutWorkspaceNestedInput
  tags?: Prisma.TagUncheckedUpdateManyWithoutWorkspaceNestedInput
}

export type WorkspaceCreateWithoutMeetingsInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  owner: Prisma.UserCreateNestedOneWithoutOwnedWorkspacesInput
  members?: Prisma.WorkspaceMemberCreateNestedManyWithoutWorkspaceInput
  tags?: Prisma.TagCreateNestedManyWithoutWorkspaceInput
}

export type WorkspaceUncheckedCreateWithoutMeetingsInput = {
  id?: string
  name: string
  description?: string | null
  ownerId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  members?: Prisma.WorkspaceMemberUncheckedCreateNestedManyWithoutWorkspaceInput
  tags?: Prisma.TagUncheckedCreateNestedManyWithoutWorkspaceInput
}

export type WorkspaceCreateOrConnectWithoutMeetingsInput = {
  where: Prisma.WorkspaceWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkspaceCreateWithoutMeetingsInput, Prisma.WorkspaceUncheckedCreateWithoutMeetingsInput>
}

export type WorkspaceUpsertWithoutMeetingsInput = {
  update: Prisma.XOR<Prisma.WorkspaceUpdateWithoutMeetingsInput, Prisma.WorkspaceUncheckedUpdateWithoutMeetingsInput>
  create: Prisma.XOR<Prisma.WorkspaceCreateWithoutMeetingsInput, Prisma.WorkspaceUncheckedCreateWithoutMeetingsInput>
  where?: Prisma.WorkspaceWhereInput
}

export type WorkspaceUpdateToOneWithWhereWithoutMeetingsInput = {
  where?: Prisma.WorkspaceWhereInput
  data: Prisma.XOR<Prisma.WorkspaceUpdateWithoutMeetingsInput, Prisma.WorkspaceUncheckedUpdateWithoutMeetingsInput>
}

export type WorkspaceUpdateWithoutMeetingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  owner?: Prisma.UserUpdateOneRequiredWithoutOwnedWorkspacesNestedInput
  members?: Prisma.WorkspaceMemberUpdateManyWithoutWorkspaceNestedInput
  tags?: Prisma.TagUpdateManyWithoutWorkspaceNestedInput
}

export type WorkspaceUncheckedUpdateWithoutMeetingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ownerId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  members?: Prisma.WorkspaceMemberUncheckedUpdateManyWithoutWorkspaceNestedInput
  tags?: Prisma.TagUncheckedUpdateManyWithoutWorkspaceNestedInput
}

export type WorkspaceCreateWithoutTagsInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  owner: Prisma.UserCreateNestedOneWithoutOwnedWorkspacesInput
  members?: Prisma.WorkspaceMemberCreateNestedManyWithoutWorkspaceInput
  meetings?: Prisma.MeetingCreateNestedManyWithoutWorkspaceInput
}

export type WorkspaceUncheckedCreateWithoutTagsInput = {
  id?: string
  name: string
  description?: string | null
  ownerId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  members?: Prisma.WorkspaceMemberUncheckedCreateNestedManyWithoutWorkspaceInput
  meetings?: Prisma.MeetingUncheckedCreateNestedManyWithoutWorkspaceInput
}

export type WorkspaceCreateOrConnectWithoutTagsInput = {
  where: Prisma.WorkspaceWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkspaceCreateWithoutTagsInput, Prisma.WorkspaceUncheckedCreateWithoutTagsInput>
}

export type WorkspaceUpsertWithoutTagsInput = {
  update: Prisma.XOR<Prisma.WorkspaceUpdateWithoutTagsInput, Prisma.WorkspaceUncheckedUpdateWithoutTagsInput>
  create: Prisma.XOR<Prisma.WorkspaceCreateWithoutTagsInput, Prisma.WorkspaceUncheckedCreateWithoutTagsInput>
  where?: Prisma.WorkspaceWhereInput
}

export type WorkspaceUpdateToOneWithWhereWithoutTagsInput = {
  where?: Prisma.WorkspaceWhereInput
  data: Prisma.XOR<Prisma.WorkspaceUpdateWithoutTagsInput, Prisma.WorkspaceUncheckedUpdateWithoutTagsInput>
}

export type WorkspaceUpdateWithoutTagsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  owner?: Prisma.UserUpdateOneRequiredWithoutOwnedWorkspacesNestedInput
  members?: Prisma.WorkspaceMemberUpdateManyWithoutWorkspaceNestedInput
  meetings?: Prisma.MeetingUpdateManyWithoutWorkspaceNestedInput
}

export type WorkspaceUncheckedUpdateWithoutTagsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ownerId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  members?: Prisma.WorkspaceMemberUncheckedUpdateManyWithoutWorkspaceNestedInput
  meetings?: Prisma.MeetingUncheckedUpdateManyWithoutWorkspaceNestedInput
}

export type WorkspaceCreateManyOwnerInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WorkspaceUpdateWithoutOwnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  members?: Prisma.WorkspaceMemberUpdateManyWithoutWorkspaceNestedInput
  meetings?: Prisma.MeetingUpdateManyWithoutWorkspaceNestedInput
  tags?: Prisma.TagUpdateManyWithoutWorkspaceNestedInput
}

export type WorkspaceUncheckedUpdateWithoutOwnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  members?: Prisma.WorkspaceMemberUncheckedUpdateManyWithoutWorkspaceNestedInput
  meetings?: Prisma.MeetingUncheckedUpdateManyWithoutWorkspaceNestedInput
  tags?: Prisma.TagUncheckedUpdateManyWithoutWorkspaceNestedInput
}

export type WorkspaceUncheckedUpdateManyWithoutOwnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type WorkspaceCountOutputType
 */

export type WorkspaceCountOutputType = {
  members: number
  meetings: number
  tags: number
}

export type WorkspaceCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  members?: boolean | WorkspaceCountOutputTypeCountMembersArgs
  meetings?: boolean | WorkspaceCountOutputTypeCountMeetingsArgs
  tags?: boolean | WorkspaceCountOutputTypeCountTagsArgs
}

/**
 * WorkspaceCountOutputType without action
 */
export type WorkspaceCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkspaceCountOutputType
   */
  select?: Prisma.WorkspaceCountOutputTypeSelect<ExtArgs> | null
}

/**
 * WorkspaceCountOutputType without action
 */
export type WorkspaceCountOutputTypeCountMembersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WorkspaceMemberWhereInput
}

/**
 * WorkspaceCountOutputType without action
 */
export type WorkspaceCountOutputTypeCountMeetingsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MeetingWhereInput
}

/**
 * WorkspaceCountOutputType without action
 */
export type WorkspaceCountOutputTypeCountTagsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TagWhereInput
}


export type WorkspaceSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  ownerId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  members?: boolean | Prisma.Workspace$membersArgs<ExtArgs>
  meetings?: boolean | Prisma.Workspace$meetingsArgs<ExtArgs>
  tags?: boolean | Prisma.Workspace$tagsArgs<ExtArgs>
  _count?: boolean | Prisma.WorkspaceCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workspace"]>

export type WorkspaceSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  ownerId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workspace"]>

export type WorkspaceSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  ownerId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workspace"]>

export type WorkspaceSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  ownerId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type WorkspaceOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "ownerId" | "createdAt" | "updatedAt", ExtArgs["result"]["workspace"]>
export type WorkspaceInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  members?: boolean | Prisma.Workspace$membersArgs<ExtArgs>
  meetings?: boolean | Prisma.Workspace$meetingsArgs<ExtArgs>
  tags?: boolean | Prisma.Workspace$tagsArgs<ExtArgs>
  _count?: boolean | Prisma.WorkspaceCountOutputTypeDefaultArgs<ExtArgs>
}
export type WorkspaceIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type WorkspaceIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $WorkspacePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Workspace"
  objects: {
    owner: Prisma.$UserPayload<ExtArgs>
    members: Prisma.$WorkspaceMemberPayload<ExtArgs>[]
    meetings: Prisma.$MeetingPayload<ExtArgs>[]
    tags: Prisma.$TagPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string | null
    ownerId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["workspace"]>
  composites: {}
}

export type WorkspaceGetPayload<S extends boolean | null | undefined | WorkspaceDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WorkspacePayload, S>

export type WorkspaceCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WorkspaceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WorkspaceCountAggregateInputType | true
  }

export interface WorkspaceDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Workspace'], meta: { name: 'Workspace' } }
  /**
   * Find zero or one Workspace that matches the filter.
   * @param {WorkspaceFindUniqueArgs} args - Arguments to find a Workspace
   * @example
   * // Get one Workspace
   * const workspace = await prisma.workspace.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WorkspaceFindUniqueArgs>(args: Prisma.SelectSubset<T, WorkspaceFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WorkspaceClient<runtime.Types.Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Workspace that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WorkspaceFindUniqueOrThrowArgs} args - Arguments to find a Workspace
   * @example
   * // Get one Workspace
   * const workspace = await prisma.workspace.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WorkspaceFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WorkspaceFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkspaceClient<runtime.Types.Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Workspace that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkspaceFindFirstArgs} args - Arguments to find a Workspace
   * @example
   * // Get one Workspace
   * const workspace = await prisma.workspace.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WorkspaceFindFirstArgs>(args?: Prisma.SelectSubset<T, WorkspaceFindFirstArgs<ExtArgs>>): Prisma.Prisma__WorkspaceClient<runtime.Types.Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Workspace that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkspaceFindFirstOrThrowArgs} args - Arguments to find a Workspace
   * @example
   * // Get one Workspace
   * const workspace = await prisma.workspace.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WorkspaceFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WorkspaceFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkspaceClient<runtime.Types.Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Workspaces that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkspaceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Workspaces
   * const workspaces = await prisma.workspace.findMany()
   * 
   * // Get first 10 Workspaces
   * const workspaces = await prisma.workspace.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const workspaceWithIdOnly = await prisma.workspace.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WorkspaceFindManyArgs>(args?: Prisma.SelectSubset<T, WorkspaceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Workspace.
   * @param {WorkspaceCreateArgs} args - Arguments to create a Workspace.
   * @example
   * // Create one Workspace
   * const Workspace = await prisma.workspace.create({
   *   data: {
   *     // ... data to create a Workspace
   *   }
   * })
   * 
   */
  create<T extends WorkspaceCreateArgs>(args: Prisma.SelectSubset<T, WorkspaceCreateArgs<ExtArgs>>): Prisma.Prisma__WorkspaceClient<runtime.Types.Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Workspaces.
   * @param {WorkspaceCreateManyArgs} args - Arguments to create many Workspaces.
   * @example
   * // Create many Workspaces
   * const workspace = await prisma.workspace.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WorkspaceCreateManyArgs>(args?: Prisma.SelectSubset<T, WorkspaceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Workspaces and returns the data saved in the database.
   * @param {WorkspaceCreateManyAndReturnArgs} args - Arguments to create many Workspaces.
   * @example
   * // Create many Workspaces
   * const workspace = await prisma.workspace.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Workspaces and only return the `id`
   * const workspaceWithIdOnly = await prisma.workspace.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WorkspaceCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WorkspaceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Workspace.
   * @param {WorkspaceDeleteArgs} args - Arguments to delete one Workspace.
   * @example
   * // Delete one Workspace
   * const Workspace = await prisma.workspace.delete({
   *   where: {
   *     // ... filter to delete one Workspace
   *   }
   * })
   * 
   */
  delete<T extends WorkspaceDeleteArgs>(args: Prisma.SelectSubset<T, WorkspaceDeleteArgs<ExtArgs>>): Prisma.Prisma__WorkspaceClient<runtime.Types.Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Workspace.
   * @param {WorkspaceUpdateArgs} args - Arguments to update one Workspace.
   * @example
   * // Update one Workspace
   * const workspace = await prisma.workspace.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WorkspaceUpdateArgs>(args: Prisma.SelectSubset<T, WorkspaceUpdateArgs<ExtArgs>>): Prisma.Prisma__WorkspaceClient<runtime.Types.Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Workspaces.
   * @param {WorkspaceDeleteManyArgs} args - Arguments to filter Workspaces to delete.
   * @example
   * // Delete a few Workspaces
   * const { count } = await prisma.workspace.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WorkspaceDeleteManyArgs>(args?: Prisma.SelectSubset<T, WorkspaceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Workspaces.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkspaceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Workspaces
   * const workspace = await prisma.workspace.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WorkspaceUpdateManyArgs>(args: Prisma.SelectSubset<T, WorkspaceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Workspaces and returns the data updated in the database.
   * @param {WorkspaceUpdateManyAndReturnArgs} args - Arguments to update many Workspaces.
   * @example
   * // Update many Workspaces
   * const workspace = await prisma.workspace.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Workspaces and only return the `id`
   * const workspaceWithIdOnly = await prisma.workspace.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WorkspaceUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WorkspaceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Workspace.
   * @param {WorkspaceUpsertArgs} args - Arguments to update or create a Workspace.
   * @example
   * // Update or create a Workspace
   * const workspace = await prisma.workspace.upsert({
   *   create: {
   *     // ... data to create a Workspace
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Workspace we want to update
   *   }
   * })
   */
  upsert<T extends WorkspaceUpsertArgs>(args: Prisma.SelectSubset<T, WorkspaceUpsertArgs<ExtArgs>>): Prisma.Prisma__WorkspaceClient<runtime.Types.Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Workspaces.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkspaceCountArgs} args - Arguments to filter Workspaces to count.
   * @example
   * // Count the number of Workspaces
   * const count = await prisma.workspace.count({
   *   where: {
   *     // ... the filter for the Workspaces we want to count
   *   }
   * })
  **/
  count<T extends WorkspaceCountArgs>(
    args?: Prisma.Subset<T, WorkspaceCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WorkspaceCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Workspace.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkspaceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WorkspaceAggregateArgs>(args: Prisma.Subset<T, WorkspaceAggregateArgs>): Prisma.PrismaPromise<GetWorkspaceAggregateType<T>>

  /**
   * Group by Workspace.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkspaceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WorkspaceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WorkspaceGroupByArgs['orderBy'] }
      : { orderBy?: WorkspaceGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WorkspaceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkspaceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Workspace model
 */
readonly fields: WorkspaceFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Workspace.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WorkspaceClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  owner<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  members<T extends Prisma.Workspace$membersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Workspace$membersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  meetings<T extends Prisma.Workspace$meetingsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Workspace$meetingsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  tags<T extends Prisma.Workspace$tagsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Workspace$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Workspace model
 */
export interface WorkspaceFieldRefs {
  readonly id: Prisma.FieldRef<"Workspace", 'String'>
  readonly name: Prisma.FieldRef<"Workspace", 'String'>
  readonly description: Prisma.FieldRef<"Workspace", 'String'>
  readonly ownerId: Prisma.FieldRef<"Workspace", 'String'>
  readonly createdAt: Prisma.FieldRef<"Workspace", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Workspace", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Workspace findUnique
 */
export type WorkspaceFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Workspace
   */
  select?: Prisma.WorkspaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Workspace
   */
  omit?: Prisma.WorkspaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkspaceInclude<ExtArgs> | null
  /**
   * Filter, which Workspace to fetch.
   */
  where: Prisma.WorkspaceWhereUniqueInput
}

/**
 * Workspace findUniqueOrThrow
 */
export type WorkspaceFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Workspace
   */
  select?: Prisma.WorkspaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Workspace
   */
  omit?: Prisma.WorkspaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkspaceInclude<ExtArgs> | null
  /**
   * Filter, which Workspace to fetch.
   */
  where: Prisma.WorkspaceWhereUniqueInput
}

/**
 * Workspace findFirst
 */
export type WorkspaceFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Workspace
   */
  select?: Prisma.WorkspaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Workspace
   */
  omit?: Prisma.WorkspaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkspaceInclude<ExtArgs> | null
  /**
   * Filter, which Workspace to fetch.
   */
  where?: Prisma.WorkspaceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Workspaces to fetch.
   */
  orderBy?: Prisma.WorkspaceOrderByWithRelationInput | Prisma.WorkspaceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Workspaces.
   */
  cursor?: Prisma.WorkspaceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Workspaces from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Workspaces.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Workspaces.
   */
  distinct?: Prisma.WorkspaceScalarFieldEnum | Prisma.WorkspaceScalarFieldEnum[]
}

/**
 * Workspace findFirstOrThrow
 */
export type WorkspaceFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Workspace
   */
  select?: Prisma.WorkspaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Workspace
   */
  omit?: Prisma.WorkspaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkspaceInclude<ExtArgs> | null
  /**
   * Filter, which Workspace to fetch.
   */
  where?: Prisma.WorkspaceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Workspaces to fetch.
   */
  orderBy?: Prisma.WorkspaceOrderByWithRelationInput | Prisma.WorkspaceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Workspaces.
   */
  cursor?: Prisma.WorkspaceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Workspaces from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Workspaces.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Workspaces.
   */
  distinct?: Prisma.WorkspaceScalarFieldEnum | Prisma.WorkspaceScalarFieldEnum[]
}

/**
 * Workspace findMany
 */
export type WorkspaceFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Workspace
   */
  select?: Prisma.WorkspaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Workspace
   */
  omit?: Prisma.WorkspaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkspaceInclude<ExtArgs> | null
  /**
   * Filter, which Workspaces to fetch.
   */
  where?: Prisma.WorkspaceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Workspaces to fetch.
   */
  orderBy?: Prisma.WorkspaceOrderByWithRelationInput | Prisma.WorkspaceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Workspaces.
   */
  cursor?: Prisma.WorkspaceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Workspaces from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Workspaces.
   */
  skip?: number
  distinct?: Prisma.WorkspaceScalarFieldEnum | Prisma.WorkspaceScalarFieldEnum[]
}

/**
 * Workspace create
 */
export type WorkspaceCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Workspace
   */
  select?: Prisma.WorkspaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Workspace
   */
  omit?: Prisma.WorkspaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkspaceInclude<ExtArgs> | null
  /**
   * The data needed to create a Workspace.
   */
  data: Prisma.XOR<Prisma.WorkspaceCreateInput, Prisma.WorkspaceUncheckedCreateInput>
}

/**
 * Workspace createMany
 */
export type WorkspaceCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Workspaces.
   */
  data: Prisma.WorkspaceCreateManyInput | Prisma.WorkspaceCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Workspace createManyAndReturn
 */
export type WorkspaceCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Workspace
   */
  select?: Prisma.WorkspaceSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Workspace
   */
  omit?: Prisma.WorkspaceOmit<ExtArgs> | null
  /**
   * The data used to create many Workspaces.
   */
  data: Prisma.WorkspaceCreateManyInput | Prisma.WorkspaceCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkspaceIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Workspace update
 */
export type WorkspaceUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Workspace
   */
  select?: Prisma.WorkspaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Workspace
   */
  omit?: Prisma.WorkspaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkspaceInclude<ExtArgs> | null
  /**
   * The data needed to update a Workspace.
   */
  data: Prisma.XOR<Prisma.WorkspaceUpdateInput, Prisma.WorkspaceUncheckedUpdateInput>
  /**
   * Choose, which Workspace to update.
   */
  where: Prisma.WorkspaceWhereUniqueInput
}

/**
 * Workspace updateMany
 */
export type WorkspaceUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Workspaces.
   */
  data: Prisma.XOR<Prisma.WorkspaceUpdateManyMutationInput, Prisma.WorkspaceUncheckedUpdateManyInput>
  /**
   * Filter which Workspaces to update
   */
  where?: Prisma.WorkspaceWhereInput
  /**
   * Limit how many Workspaces to update.
   */
  limit?: number
}

/**
 * Workspace updateManyAndReturn
 */
export type WorkspaceUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Workspace
   */
  select?: Prisma.WorkspaceSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Workspace
   */
  omit?: Prisma.WorkspaceOmit<ExtArgs> | null
  /**
   * The data used to update Workspaces.
   */
  data: Prisma.XOR<Prisma.WorkspaceUpdateManyMutationInput, Prisma.WorkspaceUncheckedUpdateManyInput>
  /**
   * Filter which Workspaces to update
   */
  where?: Prisma.WorkspaceWhereInput
  /**
   * Limit how many Workspaces to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkspaceIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Workspace upsert
 */
export type WorkspaceUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Workspace
   */
  select?: Prisma.WorkspaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Workspace
   */
  omit?: Prisma.WorkspaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkspaceInclude<ExtArgs> | null
  /**
   * The filter to search for the Workspace to update in case it exists.
   */
  where: Prisma.WorkspaceWhereUniqueInput
  /**
   * In case the Workspace found by the `where` argument doesn't exist, create a new Workspace with this data.
   */
  create: Prisma.XOR<Prisma.WorkspaceCreateInput, Prisma.WorkspaceUncheckedCreateInput>
  /**
   * In case the Workspace was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WorkspaceUpdateInput, Prisma.WorkspaceUncheckedUpdateInput>
}

/**
 * Workspace delete
 */
export type WorkspaceDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Workspace
   */
  select?: Prisma.WorkspaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Workspace
   */
  omit?: Prisma.WorkspaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkspaceInclude<ExtArgs> | null
  /**
   * Filter which Workspace to delete.
   */
  where: Prisma.WorkspaceWhereUniqueInput
}

/**
 * Workspace deleteMany
 */
export type WorkspaceDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Workspaces to delete
   */
  where?: Prisma.WorkspaceWhereInput
  /**
   * Limit how many Workspaces to delete.
   */
  limit?: number
}

/**
 * Workspace.members
 */
export type Workspace$membersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkspaceMember
   */
  select?: Prisma.WorkspaceMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkspaceMember
   */
  omit?: Prisma.WorkspaceMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkspaceMemberInclude<ExtArgs> | null
  where?: Prisma.WorkspaceMemberWhereInput
  orderBy?: Prisma.WorkspaceMemberOrderByWithRelationInput | Prisma.WorkspaceMemberOrderByWithRelationInput[]
  cursor?: Prisma.WorkspaceMemberWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.WorkspaceMemberScalarFieldEnum | Prisma.WorkspaceMemberScalarFieldEnum[]
}

/**
 * Workspace.meetings
 */
export type Workspace$meetingsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Meeting
   */
  select?: Prisma.MeetingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Meeting
   */
  omit?: Prisma.MeetingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingInclude<ExtArgs> | null
  where?: Prisma.MeetingWhereInput
  orderBy?: Prisma.MeetingOrderByWithRelationInput | Prisma.MeetingOrderByWithRelationInput[]
  cursor?: Prisma.MeetingWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MeetingScalarFieldEnum | Prisma.MeetingScalarFieldEnum[]
}

/**
 * Workspace.tags
 */
export type Workspace$tagsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tag
   */
  select?: Prisma.TagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tag
   */
  omit?: Prisma.TagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagInclude<ExtArgs> | null
  where?: Prisma.TagWhereInput
  orderBy?: Prisma.TagOrderByWithRelationInput | Prisma.TagOrderByWithRelationInput[]
  cursor?: Prisma.TagWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TagScalarFieldEnum | Prisma.TagScalarFieldEnum[]
}

/**
 * Workspace without action
 */
export type WorkspaceDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Workspace
   */
  select?: Prisma.WorkspaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Workspace
   */
  omit?: Prisma.WorkspaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkspaceInclude<ExtArgs> | null
}
