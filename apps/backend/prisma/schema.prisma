generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth models with snake_case
model User {
  id             String    @id @default(cuid()) @map("id")
  name           String    @map("name")
  email          String    @map("email")
  email_verified Boolean   @map("email_verified")
  image          String?   @map("image")
  created_at     DateTime  @default(now()) @map("created_at")
  updated_at     DateTime  @updatedAt @map("updated_at")
  sessions       Session[]
  accounts       Account[]
  meetings       Meeting[]

  @@unique([email])
  @@map("users")
}

model Session {
  id         String   @id @default(cuid()) @map("id")
  expires_at DateTime @map("expires_at")
  token      String   @map("token")
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @updatedAt @map("updated_at")
  ip_address String?  @map("ip_address")
  user_agent String?  @map("user_agent")
  user_id    String   @map("user_id")
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("sessions")
}

model Account {
  id                       String    @id @default(cuid()) @map("id")
  account_id               String    @map("account_id")
  provider_id              String    @map("provider_id")
  user_id                  String    @map("user_id")
  user                     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  access_token             String?   @map("access_token")
  refresh_token            String?   @map("refresh_token")
  id_token                 String?   @map("id_token")
  access_token_expires_at  DateTime? @map("access_token_expires_at")
  refresh_token_expires_at DateTime? @map("refresh_token_expires_at")
  scope                    String?   @map("scope")
  password                 String?   @map("password")
  created_at               DateTime  @default(now()) @map("created_at")
  updated_at               DateTime  @updatedAt @map("updated_at")

  @@map("accounts")
}

model Verification {
  id         String    @id @default(cuid()) @map("id")
  identifier String    @map("identifier")
  value      String    @map("value")
  expires_at DateTime  @map("expires_at")
  created_at DateTime? @default(now()) @map("created_at")
  updated_at DateTime? @updatedAt @map("updated_at")

  @@map("verifications")
}

// Meeting models
model Meeting {
  id          String   @id @default(cuid()) @map("id")
  title       String   @map("title")
  description String?  @map("description")
  file_path   String   @map("file_path")
  file_size   Int      @map("file_size")
  file_type   String   @map("file_type")
  duration    Int?     @map("duration")
  status      String   @default("uploaded") @map("status")
  created_at  DateTime @default(now()) @map("created_at")
  updated_at  DateTime @updatedAt @map("updated_at")
  user_id     String   @map("user_id")

  user           User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  participants   Participant[]
  meeting_tags   MeetingTag[]
  transcript     Transcript?
  summary        Summary?
  action_items   ActionItem[]
  processing_job ProcessingJob[]

  @@map("meetings")
}

model Participant {
  id         String   @id @default(cuid()) @map("id")
  name       String   @map("name")
  email      String?  @map("email")
  role       String?  @map("role")
  meeting_id String   @map("meeting_id")
  created_at DateTime @default(now()) @map("created_at")

  meeting Meeting @relation(fields: [meeting_id], references: [id], onDelete: Cascade)

  @@map("participants")
}

model MeetingTag {
  id         String   @id @default(cuid()) @map("id")
  tag_name   String   @map("tag_name")
  meeting_id String   @map("meeting_id")
  created_at DateTime @default(now()) @map("created_at")

  meeting Meeting @relation(fields: [meeting_id], references: [id], onDelete: Cascade)

  @@map("meeting_tags")
}

model Transcript {
  id               String   @id @default(cuid()) @map("id")
  content          String   @map("content")
  speaker_labels   Json?    @map("speaker_labels")
  timestamps       Json?    @map("timestamps")
  confidence_score Float?   @map("confidence_score")
  meeting_id       String   @unique @map("meeting_id")
  created_at       DateTime @default(now()) @map("created_at")

  meeting Meeting @relation(fields: [meeting_id], references: [id], onDelete: Cascade)

  @@map("transcripts")
}

model Summary {
  id                String   @id @default(cuid()) @map("id")
  executive_summary String   @map("executive_summary")
  key_points        Json     @map("key_points")
  decisions         Json?    @map("decisions")
  topics            Json?    @map("topics")
  sentiment         String?  @map("sentiment")
  meeting_id        String   @unique @map("meeting_id")
  created_at        DateTime @default(now()) @map("created_at")

  meeting Meeting @relation(fields: [meeting_id], references: [id], onDelete: Cascade)

  @@map("summaries")
}

model ActionItem {
  id          String    @id @default(cuid()) @map("id")
  description String    @map("description")
  assignee    String?   @map("assignee")
  due_date    DateTime? @map("due_date")
  priority    String    @default("medium") @map("priority")
  status      String    @default("pending") @map("status")
  meeting_id  String    @map("meeting_id")
  created_at  DateTime  @default(now()) @map("created_at")
  updated_at  DateTime  @updatedAt @map("updated_at")

  meeting Meeting @relation(fields: [meeting_id], references: [id], onDelete: Cascade)

  @@map("action_items")
}

model ProcessingJob {
  id            String    @id @default(cuid()) @map("id")
  meeting_id    String    @map("meeting_id")
  job_type      String    @map("job_type")
  status        String    @default("pending") @map("status")
  progress      Int       @default(0) @map("progress")
  error_message String?   @map("error_message")
  started_at    DateTime? @map("started_at")
  completed_at  DateTime? @map("completed_at")
  created_at    DateTime  @default(now()) @map("created_at")

  meeting Meeting @relation(fields: [meeting_id], references: [id], onDelete: Cascade)

  @@map("processing_jobs")
}
