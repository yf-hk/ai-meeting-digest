import {
  ChevronDown,
  Download,
  ExternalLink,
  FileText,
  Mail,
  Printer,
  Share2,
} from 'lucide-react'
import { useEffect, useRef, useState } from 'react'
import { createPortal } from 'react-dom'
import { Button } from './ui/button'
import { Card, CardContent, CardHeader, CardTitle } from './ui/card'

interface ExportMeetingProps {
  meeting: any
}

export function ExportMeeting({ meeting }: ExportMeetingProps) {
  const [isExporting, setIsExporting] = useState(false)
  const [isDropdownOpen, setIsDropdownOpen] = useState(false)
  const [dropdownPosition, setDropdownPosition] = useState({ top: 0, left: 0 })
  const buttonRef = useRef<HTMLButtonElement>(null)

  const exportToJSON = () => {
    const exportData = {
      meeting: {
        title: meeting.title,
        description: meeting.description,
        createdAt: meeting.createdAt,
        scheduledAt: meeting.scheduledAt,
      },
      summary: meeting.summary,
      actionItems: meeting.actionItems,
      topics: meeting.topics,
      transcript: meeting.transcript,
      exportedAt: new Date().toISOString(),
    }

    const blob = new Blob([JSON.stringify(exportData, null, 2)], {
      type: 'application/json',
    })

    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${meeting.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_digest.json`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const exportToMarkdown = () => {
    let markdown = `# ${meeting.title}\n\n`

    if (meeting.description) {
      markdown += `**Description:** ${meeting.description}\n\n`
    }

    markdown += `**Date:** ${new Date(meeting.createdAt).toLocaleDateString()}\n\n`

    if (meeting.summary) {
      markdown += `## Executive Summary\n\n${meeting.summary.executiveSummary}\n\n`

      if (
        meeting.summary.keyPoints &&
        Array.isArray(meeting.summary.keyPoints)
      ) {
        markdown += '## Key Points\n\n'
        meeting.summary.keyPoints.forEach((point: string) => {
          markdown += `- ${point}\n`
        })
        markdown += '\n'
      }

      if (
        meeting.summary.decisions &&
        Array.isArray(meeting.summary.decisions)
      ) {
        markdown += '## Decisions\n\n'
        meeting.summary.decisions.forEach((decision: any) => {
          markdown += `### ${decision.decision}\n`
          if (decision.rationale)
            markdown += `**Rationale:** ${decision.rationale}\n`
          if (decision.owner) markdown += `**Owner:** ${decision.owner}\n`
          markdown += '\n'
        })
      }

      if (
        meeting.summary.nextSteps &&
        Array.isArray(meeting.summary.nextSteps)
      ) {
        markdown += '## Next Steps\n\n'
        meeting.summary.nextSteps.forEach((step: string) => {
          markdown += `- ${step}\n`
        })
        markdown += '\n'
      }
    }

    if (meeting.actionItems && meeting.actionItems.length > 0) {
      markdown += '## Action Items\n\n'
      meeting.actionItems.forEach((item: any) => {
        markdown += `- [ ] ${item.description}`
        if (item.assignee) markdown += ` (Assigned to: ${item.assignee.name})`
        if (item.dueDate)
          markdown += ` (Due: ${new Date(item.dueDate).toLocaleDateString()})`
        markdown += '\n'
      })
      markdown += '\n'
    }

    if (meeting.topics && meeting.topics.length > 0) {
      markdown += '## Discussion Topics\n\n'
      meeting.topics.forEach((topic: any) => {
        markdown += `- **${topic.topic}**`
        if (topic.importanceScore) {
          markdown += ` (Importance: ${Math.round(topic.importanceScore * 100)}%)`
        }
        markdown += '\n'
      })
    }

    markdown += `\n---\n*Generated by AI Meeting Digest on ${new Date().toLocaleDateString()}*`

    const blob = new Blob([markdown], { type: 'text/markdown' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${meeting.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_digest.md`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const exportToPDF = async () => {
    setIsExporting(true)

    // Create a new window with the meeting content
    const printWindow = window.open('', '_blank')
    if (!printWindow) {
      setIsExporting(false)
      return
    }

    const html = `
      <!DOCTYPE html>
      <html>
        <head>
          <title>${meeting.title} - Meeting Digest</title>
          <style>
            body { 
              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
              line-height: 1.6;
              color: #333;
              max-width: 800px;
              margin: 0 auto;
              padding: 20px;
            }
            h1 { color: #2563eb; border-bottom: 2px solid #e5e7eb; padding-bottom: 10px; }
            h2 { color: #1f2937; margin-top: 30px; }
            h3 { color: #374151; }
            .meta { background: #f9fafb; padding: 15px; border-radius: 8px; margin: 20px 0; }
            .summary { background: #eff6ff; padding: 20px; border-radius: 8px; border-left: 4px solid #2563eb; }
            ul { padding-left: 20px; }
            li { margin: 8px 0; }
            .action-item { background: #fef3c7; padding: 10px; margin: 5px 0; border-radius: 6px; }
            .topic { background: #f0f9ff; padding: 8px; margin: 5px 0; border-radius: 6px; }
            .footer { margin-top: 40px; text-align: center; color: #6b7280; font-size: 14px; }
            @media print {
              body { margin: 0; }
              .no-print { display: none; }
            }
          </style>
        </head>
        <body>
          <h1>${meeting.title}</h1>
          
          <div class="meta">
            ${meeting.description ? `<p><strong>Description:</strong> ${meeting.description}</p>` : ''}
            <p><strong>Date:</strong> ${new Date(meeting.createdAt).toLocaleDateString()}</p>
            ${meeting.scheduledAt ? `<p><strong>Scheduled:</strong> ${new Date(meeting.scheduledAt).toLocaleDateString()}</p>` : ''}
          </div>

          ${
            meeting.summary
              ? `
            <div class="summary">
              <h2>Executive Summary</h2>
              <p>${meeting.summary.executiveSummary}</p>
            </div>

            ${
              meeting.summary.keyPoints &&
              Array.isArray(meeting.summary.keyPoints)
                ? `
              <h2>Key Points</h2>
              <ul>
                ${meeting.summary.keyPoints.map((point: string) => `<li>${point}</li>`).join('')}
              </ul>
            `
                : ''
            }

            ${
              meeting.summary.decisions &&
              Array.isArray(meeting.summary.decisions)
                ? `
              <h2>Key Decisions</h2>
              ${meeting.summary.decisions
                .map(
                  (decision: any) => `
                <div style="margin: 15px 0; padding: 15px; background: #f3f4f6; border-radius: 8px;">
                  <h3>${decision.decision}</h3>
                  ${decision.rationale ? `<p><strong>Rationale:</strong> ${decision.rationale}</p>` : ''}
                  ${decision.owner ? `<p><strong>Owner:</strong> ${decision.owner}</p>` : ''}
                </div>
              `
                )
                .join('')}
            `
                : ''
            }

            ${
              meeting.summary.nextSteps &&
              Array.isArray(meeting.summary.nextSteps)
                ? `
              <h2>Next Steps</h2>
              <ul>
                ${meeting.summary.nextSteps.map((step: string) => `<li>${step}</li>`).join('')}
              </ul>
            `
                : ''
            }
          `
              : ''
          }

          ${
            meeting.actionItems && meeting.actionItems.length > 0
              ? `
            <h2>Action Items</h2>
            ${meeting.actionItems
              .map(
                (item: any) => `
              <div class="action-item">
                <strong>${item.description}</strong>
                ${item.assignee ? `<br><small>Assigned to: ${item.assignee.name}</small>` : ''}
                ${item.dueDate ? `<br><small>Due: ${new Date(item.dueDate).toLocaleDateString()}</small>` : ''}
                <br><small>Priority: ${item.priority} | Status: ${item.status}</small>
              </div>
            `
              )
              .join('')}
          `
              : ''
          }

          ${
            meeting.topics && meeting.topics.length > 0
              ? `
            <h2>Discussion Topics</h2>
            ${meeting.topics
              .map(
                (topic: any) => `
              <div class="topic">
                <strong>${topic.topic}</strong>
                ${topic.importanceScore ? `<small> (Importance: ${Math.round(topic.importanceScore * 100)}%)</small>` : ''}
              </div>
            `
              )
              .join('')}
          `
              : ''
          }

          <div class="footer">
            Generated by AI Meeting Digest on ${new Date().toLocaleDateString()}
          </div>

          <script>
            window.onload = function() {
              window.print();
              window.onafterprint = function() {
                window.close();
              }
            }
          </script>
        </body>
      </html>
    `

    printWindow.document.write(html)
    printWindow.document.close()

    setTimeout(() => setIsExporting(false), 2000)
  }

  const copyToClipboard = async () => {
    let text = `${meeting.title}\n\n`

    if (meeting.description) {
      text += `Description: ${meeting.description}\n\n`
    }

    if (meeting.summary) {
      text += `Executive Summary:\n${meeting.summary.executiveSummary}\n\n`

      if (
        meeting.summary.keyPoints &&
        Array.isArray(meeting.summary.keyPoints)
      ) {
        text += 'Key Points:\n'
        meeting.summary.keyPoints.forEach((point: string) => {
          text += `• ${point}\n`
        })
        text += '\n'
      }
    }

    try {
      await navigator.clipboard.writeText(text)
    } catch (error) {
      console.error('Failed to copy to clipboard:', error)
    }
  }

  const shareViaEmail = () => {
    const subject = encodeURIComponent(`Meeting Digest: ${meeting.title}`)
    const body = encodeURIComponent(
      `Please find the meeting digest for "${meeting.title}" below.\n\nFor the full interactive digest, visit: ${window.location.origin}/meeting/${meeting.id}`
    )
    window.open(`mailto:?subject=${subject}&body=${body}`)
  }

  const updateDropdownPosition = () => {
    if (buttonRef.current) {
      const rect = buttonRef.current.getBoundingClientRect()
      setDropdownPosition({
        top: rect.bottom + window.scrollY + 4,
        left: rect.right - 192 + window.scrollX, // 192px = w-48
      })
    }
  }

  const handleToggleDropdown = () => {
    if (!isDropdownOpen) {
      updateDropdownPosition()
    }
    setIsDropdownOpen(!isDropdownOpen)
  }

  useEffect(() => {
    if (isDropdownOpen) {
      const handleScroll = () => updateDropdownPosition()
      const handleResize = () => updateDropdownPosition()

      window.addEventListener('scroll', handleScroll)
      window.addEventListener('resize', handleResize)

      return () => {
        window.removeEventListener('scroll', handleScroll)
        window.removeEventListener('resize', handleResize)
      }
    }
  }, [isDropdownOpen])

  return (
    <div className="relative">
      <Button
        className="flex items-center gap-2"
        onClick={handleToggleDropdown}
        ref={buttonRef}
        size="sm"
        variant="outline"
      >
        <Download className="h-4 w-4" />
        Export
        <ChevronDown className="h-3 w-3" />
      </Button>

      {isDropdownOpen &&
        createPortal(
          <>
            <div
              className="fixed inset-0 z-40"
              onClick={() => setIsDropdownOpen(false)}
              onKeyDown={(e) => e.key === 'Escape' && setIsDropdownOpen(false)}
              role="button"
              tabIndex={-1}
            />
            <div
              className="fixed z-[9999] w-48 rounded-md border bg-popover p-1 shadow-lg"
              style={{
                top: dropdownPosition.top,
                left: dropdownPosition.left,
              }}
            >
              <button
                className="flex w-full items-center rounded-sm px-2 py-1.5 text-sm hover:bg-accent"
                onClick={() => {
                  exportToMarkdown()
                  setIsDropdownOpen(false)
                }}
                type="button"
              >
                <FileText className="mr-2 h-4 w-4" />
                Download as Markdown
              </button>

              <button
                className="flex w-full items-center rounded-sm px-2 py-1.5 text-sm hover:bg-accent"
                onClick={() => {
                  exportToJSON()
                  setIsDropdownOpen(false)
                }}
                type="button"
              >
                <Download className="mr-2 h-4 w-4" />
                Download as JSON
              </button>

              <button
                className="flex w-full items-center rounded-sm px-2 py-1.5 text-sm hover:bg-accent disabled:opacity-50"
                disabled={isExporting}
                onClick={() => {
                  exportToPDF()
                  setIsDropdownOpen(false)
                }}
                type="button"
              >
                <Printer className="mr-2 h-4 w-4" />
                {isExporting ? 'Preparing PDF...' : 'Print / Save as PDF'}
              </button>

              <div className="-mx-1 my-1 h-px bg-muted" />

              <button
                className="flex w-full items-center rounded-sm px-2 py-1.5 text-sm hover:bg-accent"
                onClick={() => {
                  copyToClipboard()
                  setIsDropdownOpen(false)
                }}
                type="button"
              >
                <Share2 className="mr-2 h-4 w-4" />
                Copy to Clipboard
              </button>

              <button
                className="flex w-full items-center rounded-sm px-2 py-1.5 text-sm hover:bg-accent"
                onClick={() => {
                  shareViaEmail()
                  setIsDropdownOpen(false)
                }}
                type="button"
              >
                <Mail className="mr-2 h-4 w-4" />
                Share via Email
              </button>

              {meeting.summary?.publicId && (
                <button
                  className="flex w-full items-center rounded-sm px-2 py-1.5 text-sm hover:bg-accent"
                  onClick={() => {
                    const shareUrl = `${window.location.origin}/digest/${meeting.summary.publicId}`
                    navigator.clipboard.writeText(shareUrl)
                    setIsDropdownOpen(false)
                  }}
                  type="button"
                >
                  <ExternalLink className="mr-2 h-4 w-4" />
                  Copy Public Link
                </button>
              )}
            </div>
          </>,
          document.body
        )}
    </div>
  )
}
